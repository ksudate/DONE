# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 26, 0, 
	127, 58, 58, 58, 58, 
	0, 127, 58, 58, 60, 60, 
	62, 62, 10, 10, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 115, 115, 
	99, 99, 117, 117, 101, 101, 
	108, 116, 101, 101, 115, 
	115, 115, 115, 105, 105, 
	108, 108, 105, 105, 108, 108, 
	58, 58, 0, 127, 10, 
	10, 0, 127, 9, 92, 
	10, 10, 9, 92, 58, 58, 
	98, 98, 101, 101, 103, 
	103, 105, 105, 110, 110, 
	0, 122, 61, 61, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 10, 10, 
	0, 127, 0, 127, 61, 126, 
	93, 93, 0, 127, 0, 
	127, 10, 10, 34, 34, 
	10, 10, 39, 39, 0, 127, 
	10, 96, 96, 96, 0, 
	45, 0, 77, 0, 77, 
	0, 92, 0, 26, 0, 26, 
	0, 45, 0, 99, 0, 
	26, 67, 99, 45, 45, 
	0, 92, 0, 77, 0, 102, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 58, 58, 58, 
	0, 127, 43, 57, 48, 
	57, 48, 57, 10, 10, 
	48, 57, 48, 57, 115, 115, 
	99, 99, 117, 117, 101, 
	101, 99, 99, 117, 117, 
	101, 101, 0, 127, 58, 58, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 9, 92, 
	9, 92, 60, 60, 10, 10, 
	9, 46, 46, 46, 0, 
	95, 9, 32, 0, 0, 
	10, 10, 10, 10, 98, 98, 
	9, 32, 10, 10, 95, 
	95, 0, 92, 9, 32, 
	36, 123, 0, 127, 48, 57, 
	0, 120, 0, 0, 0, 
	0, 48, 55, 48, 55, 
	0, 0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 
	0, 0, 92, 45, 45, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 
	92, 0, 92, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	10, 10, 0, 92, 48, 
	123, 48, 102, 48, 102, 
	48, 102, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 
	0, 0, 92, 36, 123, 
	0, 127, 48, 57, 0, 120, 
	0, 0, 0, 0, 48, 
	55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 
	92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 10, 
	0, 92, 48, 123, 48, 
	102, 48, 102, 48, 102, 
	0, 0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 
	92, 9, 32, 0, 26, 
	0, 92, 0, 26, 0, 35, 
	36, 123, 0, 127, 48, 
	57, 0, 26, 0, 35, 
	9, 32, 36, 123, 0, 127, 
	48, 57, 0, 32, 9, 
	32, 65, 122, 65, 122, 
	36, 64, 0, 127, 48, 57, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	9, 32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 
	127, 0, 127, 48, 57, 
	115, 115, 38, 38, 42, 42, 
	64, 64, 58, 58, 60, 
	61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 93, 93, 10, 10, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 124, 124, 0, 127, 
	0, 127, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	61, 61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 
	10, 10, 10, 38, 38, 
	42, 42, 64, 64, 60, 61, 
	62, 62, 61, 126, 61, 
	61, 61, 62, 0, 127, 
	93, 93, 10, 10, 124, 124, 
	0, 126, 0, 127, 0, 
	61, 9, 61, 9, 61, 
	0, 0, 9, 61, 9, 62, 
	46, 46, 46, 46, 58, 
	58, 9, 32, 0, 0, 
	0, 127, 0, 0, 9, 124, 
	0, 0, 10, 10, 10, 
	10, 0, 0, 9, 61, 
	58, 58, 60, 60, 62, 62, 
	9, 32, 10, 10, 0, 
	127, 102, 102, 101, 101, 
	110, 110, 104, 104, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 0, 127, 10, 10, 
	0, 123, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 
	0, 111, 111, 0, 0, 
	0, 127, 0, 127, 9, 32, 
	0, 0, 10, 10, 10, 
	10, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 58, 61, 
	0, 0, 61, 126, 61, 
	61, 0, 0, 0, 0, 
	0, 0, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 
	10, 10, 10, 65, 122, 
	0, 122, 38, 61, 0, 0, 
	42, 61, 61, 61, 9, 
	92, 9, 92, 9, 92, 
	46, 46, 46, 46, 0, 26, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 61, 126, 
	61, 62, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 
	126, 0, 127, 48, 57, 
	38, 38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 
	61, 61, 62, 0, 127, 
	48, 57, 0, 127, 124, 124, 
	64, 64, 60, 61, 0, 
	0, 10, 34, 10, 39, 
	96, 96, 62, 62, 61, 126, 
	61, 62, 0, 122, 0, 
	0, 0, 127, 0, 127, 
	0, 120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 
	0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 
	0, 0, 92, 0, 45, 
	10, 10, 0, 92, 48, 123, 
	48, 102, 48, 102, 48, 
	102, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	0, 48, 102, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 0, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 61, 124, 0, 92, 
	9, 32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	9, 32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	61, 61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 
	10, 10, 10, 0, 127, 
	0, 127, 48, 57, 61, 61, 
	38, 61, 0, 0, 0, 
	0, 42, 61, 61, 62, 
	46, 58, 46, 46, 48, 101, 
	48, 95, 9, 92, 9, 
	92, 46, 120, 48, 114, 
	43, 57, 48, 105, 102, 102, 
	0, 0, 101, 105, 0, 
	0, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 114, 
	105, 114, 102, 102, 0, 
	0, 101, 105, 115, 115, 
	0, 0, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 48, 114, 46, 114, 
	48, 114, 46, 114, 48, 
	114, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 
	127, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	92, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 0, 
	61, 124, 0, 0, 9, 46, 
	9, 46, 46, 46, 10, 
	61, 10, 10, 10, 101, 
	10, 110, 10, 100, 10, 10, 
	0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 27, 128, 1, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 128, 84, 
	1, 84, 1, 1, 1, 1, 1, 1, 
	123, 1, 84, 84, 84, 84, 84, 1, 
	128, 128, 66, 1, 128, 128, 1, 1, 
	1, 1, 128, 87, 1, 46, 78, 78, 
	93, 27, 27, 46, 100, 27, 33, 1, 
	93, 78, 103, 128, 128, 128, 128, 128, 
	128, 1, 1, 128, 15, 10, 10, 1, 
	10, 10, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 84, 84, 84, 84, 84, 
	84, 1, 1, 38, 1, 96, 24, 0, 
	1, 1, 1, 24, 1, 1, 93, 24, 
	88, 128, 10, 121, 0, 0, 8, 8, 
	0, 0, 93, 0, 0, 0, 93, 1, 
	0, 0, 0, 93, 46, 93, 93, 0, 
	0, 93, 46, 1, 93, 76, 55, 55, 
	55, 0, 126, 126, 0, 126, 0, 126, 
	126, 126, 126, 0, 126, 126, 126, 126, 
	126, 126, 0, 0, 55, 0, 93, 88, 
	128, 10, 121, 0, 0, 8, 8, 0, 
	0, 93, 0, 0, 0, 93, 1, 0, 
	0, 0, 93, 46, 93, 93, 0, 0, 
	93, 46, 1, 93, 76, 55, 55, 55, 
	0, 126, 126, 0, 126, 0, 126, 126, 
	126, 126, 0, 126, 126, 126, 126, 126, 
	126, 0, 0, 55, 0, 93, 24, 27, 
	93, 27, 36, 88, 128, 10, 27, 36, 
	24, 88, 128, 10, 33, 24, 58, 58, 
	29, 128, 10, 128, 128, 128, 128, 128, 
	24, 0, 66, 1, 1, 128, 128, 10, 
	1, 1, 1, 1, 1, 2, 1, 66, 
	1, 2, 128, 128, 128, 128, 128, 128, 
	128, 1, 1, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 1, 128, 
	128, 24, 1, 1, 1, 0, 128, 128, 
	1, 0, 24, 0, 66, 1, 1, 1, 
	1, 1, 2, 1, 66, 1, 2, 128, 
	1, 1, 1, 127, 128, 62, 53, 53, 
	0, 53, 54, 1, 1, 1, 24, 0, 
	128, 0, 116, 0, 1, 1, 0, 53, 
	1, 1, 1, 24, 1, 128, 1, 1, 
	1, 1, 128, 128, 128, 0, 128, 1, 
	124, 24, 1, 1, 1, 0, 1, 0, 
	128, 128, 24, 0, 1, 1, 1, 0, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 4, 0, 66, 1, 0, 0, 
	0, 24, 1, 24, 66, 1, 1, 58, 
	123, 24, 0, 20, 1, 84, 84, 84, 
	1, 1, 27, 128, 128, 1, 0, 66, 
	2, 0, 0, 0, 0, 66, 128, 10, 
	1, 1, 1, 2, 1, 1, 2, 128, 
	10, 128, 1, 1, 2, 0, 25, 30, 
	1, 1, 66, 2, 123, 0, 128, 128, 
	121, 0, 0, 8, 8, 0, 0, 93, 
	0, 0, 0, 93, 1, 0, 0, 0, 
	93, 46, 93, 93, 0, 0, 93, 46, 
	1, 93, 76, 55, 55, 55, 0, 126, 
	126, 0, 126, 0, 126, 126, 126, 126, 
	0, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 0, 55, 0, 
	128, 128, 128, 0, 1, 0, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 66, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 0, 64, 93, 
	24, 0, 1, 1, 1, 0, 128, 128, 
	24, 0, 1, 1, 1, 0, 128, 128, 
	1, 0, 24, 0, 66, 1, 1, 128, 
	128, 10, 1, 24, 0, 0, 20, 2, 
	13, 1, 54, 48, 84, 84, 75, 67, 
	15, 58, 1, 0, 5, 0, 0, 67, 
	67, 67, 67, 10, 1, 0, 5, 1, 
	0, 0, 67, 67, 67, 67, 67, 67, 
	67, 67, 69, 67, 69, 67, 1, 2, 
	1, 66, 1, 2, 128, 128, 0, 128, 
	128, 128, 128, 128, 128, 0, 1, 0, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 84, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 0, 
	64, 0, 38, 38, 1, 52, 1, 92, 
	101, 91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 
	4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 
	5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 
	6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 
	7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 
	7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 
	7442, 7444, 7529, 7531, 7533, 7535, 7537, 7539, 
	7541, 7665, 7667, 7752, 7837, 7922, 8007, 8092, 
	8094, 8223, 8352, 8419, 8421, 8550, 8679, 8681, 
	8683, 8685, 8687, 8816, 8904, 8906, 8953, 9032, 
	9111, 9205, 9233, 9261, 9308, 9409, 9437, 9471, 
	9473, 9567, 9646, 9750, 9879, 10008, 10137, 10266, 
	10395, 10524, 10526, 10528, 10657, 10673, 10684, 10695, 
	10697, 10708, 10719, 10721, 10723, 10725, 10727, 10729, 
	10731, 10733, 10862, 10864, 10949, 11034, 11119, 11204, 
	11289, 11374, 11376, 11378, 11417, 11419, 11516, 11541, 
	11542, 11544, 11546, 11548, 11573, 11575, 11577, 11671, 
	11696, 11785, 11914, 11925, 12047, 12048, 12049, 12058, 
	12067, 12068, 12069, 12163, 12164, 12165, 12166, 12260, 
	12262, 12263, 12264, 12265, 12359, 12406, 12500, 12594, 
	12595, 12596, 12690, 12737, 12739, 12833, 12910, 12966, 
	13022, 13078, 13079, 13206, 13333, 13334, 13461, 13462, 
	13589, 13716, 13843, 13970, 13971, 14098, 14225, 14352, 
	14479, 14606, 14733, 14734, 14735, 14791, 14792, 14886, 
	14975, 15104, 15115, 15237, 15238, 15239, 15248, 15257, 
	15258, 15259, 15353, 15354, 15355, 15356, 15450, 15452, 
	15453, 15454, 15455, 15549, 15596, 15690, 15784, 15785, 
	15786, 15880, 15927, 15929, 16023, 16100, 16156, 16212, 
	16268, 16269, 16396, 16523, 16524, 16651, 16652, 16779, 
	16906, 17033, 17160, 17161, 17288, 17415, 17542, 17669, 
	17796, 17923, 17924, 17925, 17981, 17982, 18076, 18101, 
	18129, 18223, 18251, 18288, 18377, 18506, 18517, 18545, 
	18582, 18607, 18696, 18825, 18836, 18870, 18895, 18954, 
	19013, 19043, 19172, 19183, 19312, 19441, 19570, 19699, 
	19828, 19853, 19854, 19921, 19923, 19925, 20054, 20183, 
	20194, 20196, 20198, 20200, 20202, 20204, 20207, 20209, 
	20276, 20278, 20281, 20410, 20539, 20668, 20797, 20926, 
	21055, 21184, 21186, 21188, 21317, 21446, 21575, 21704, 
	21833, 21962, 22091, 22220, 22349, 22478, 22607, 22736, 
	22865, 22994, 23123, 23252, 23381, 23510, 23639, 23768, 
	23897, 24026, 24155, 24284, 24413, 24542, 24671, 24800, 
	24929, 25058, 25187, 25316, 25445, 25574, 25703, 25832, 
	25961, 26090, 26219, 26348, 26477, 26606, 26735, 26864, 
	26993, 27122, 27251, 27380, 27509, 27638, 27767, 27896, 
	28025, 28154, 28283, 28412, 28541, 28670, 28799, 28928, 
	29057, 29186, 29315, 29444, 29573, 29702, 29831, 29960, 
	30089, 30218, 30347, 30476, 30605, 30734, 30863, 30992, 
	31121, 31250, 31379, 31508, 31637, 31766, 31895, 31897, 
	32026, 32155, 32180, 32182, 32184, 32186, 32187, 32316, 
	32445, 32447, 32448, 32473, 32474, 32541, 32543, 32545, 
	32547, 32549, 32551, 32554, 32556, 32623, 32625, 32628, 
	32757, 32759, 32761, 32763, 32891, 33020, 33083, 33137, 
	33191, 33192, 33246, 33301, 33303, 33305, 33307, 33332, 
	33333, 33462, 33463, 33580, 33581, 33583, 33585, 33586, 
	33640, 33642, 33644, 33646, 33671, 33673, 33802, 33804, 
	33806, 33808, 33810, 33939, 34068, 34197, 34198, 34327, 
	34329, 34454, 34479, 34481, 34483, 34485, 34486, 34488, 
	34489, 34618, 34747, 34772, 34773, 34775, 34777, 34779, 
	34780, 34909, 35038, 35167, 35296, 35425, 35554, 35683, 
	35812, 35941, 36070, 36199, 36328, 36457, 36586, 36715, 
	36844, 36973, 37102, 37107, 37108, 37175, 37177, 37178, 
	37179, 37180, 37205, 37207, 37232, 37299, 37301, 37303, 
	37362, 37486, 37511, 37512, 37533, 37535, 37620, 37705, 
	37790, 37792, 37794, 37822, 37951, 38080, 38082, 38083, 
	38150, 38153, 38154, 38155, 38156, 38157, 38224, 38353, 
	38364, 38366, 38368, 38370, 38373, 38375, 38377, 38380, 
	38509, 38520, 38649, 38651, 38653, 38656, 38657, 38683, 
	38714, 38716, 38718, 38785, 38788, 38912, 38913, 39042, 
	39171, 39293, 39294, 39295, 39304, 39313, 39314, 39315, 
	39409, 39410, 39411, 39412, 39506, 39508, 39509, 39510, 
	39511, 39605, 39652, 39746, 39840, 39841, 39842, 39936, 
	39983, 39985, 40079, 40156, 40212, 40268, 40324, 40325, 
	40452, 40579, 40580, 40707, 40708, 40835, 40962, 41089, 
	41216, 41217, 41344, 41471, 41598, 41725, 41852, 41979, 
	42106, 42233, 42360, 42487, 42614, 42741, 42868, 42995, 
	43122, 43249, 43376, 43503, 43630, 43631, 43632, 43688, 
	43689, 43818, 43947, 44076, 44077, 44079, 44080, 44209, 
	44338, 44467, 44596, 44725, 44854, 44983, 45112, 45241, 
	45370, 45499, 45628, 45757, 45886, 46015, 46144, 46273, 
	46402, 46531, 46660, 46789, 46918, 47047, 47176, 47305, 
	47434, 47563, 47692, 47821, 47950, 48079, 48208, 48337, 
	48466, 48595, 48724, 48853, 48982, 49111, 49240, 49369, 
	49498, 49627, 49756, 49885, 50014, 50143, 50272, 50401, 
	50530, 50659, 50788, 50917, 51046, 51175, 51304, 51433, 
	51562, 51691, 51820, 51949, 52016, 52145, 52274, 52403, 
	52532, 52661, 52790, 52919, 53048, 53177, 53306, 53435, 
	53564, 53693, 53822, 53951, 54080, 54209, 54338, 54467, 
	54596, 54725, 54854, 54983, 55112, 55241, 55242, 55307, 
	55401, 55426, 55427, 55429, 55431, 55433, 55434, 55563, 
	55692, 55717, 55718, 55720, 55722, 55724, 55725, 55854, 
	55983, 55985, 55986, 56011, 56012, 56079, 56081, 56083, 
	56212, 56341, 56352, 56354, 56379, 56380, 56381, 56402, 
	56405, 56419, 56421, 56476, 56525, 56610, 56695, 56771, 
	56839, 56855, 56914, 56916, 56917, 56923, 56924, 56925, 
	56993, 57061, 57129, 57197, 57208, 57210, 57211, 57217, 
	57219, 57220, 57221, 57289, 57357, 57425, 57493, 57561, 
	57629, 57697, 57765, 57835, 57903, 57973, 58041, 58043, 
	58046, 58048, 58115, 58117, 58120, 58249, 58378, 58379, 
	58508, 58637, 58766, 58895, 59024, 59153, 59154, 59156, 
	59157, 59286, 59415, 59544, 59673, 59802, 59931, 60060, 
	60189, 60318, 60447, 60576, 60705, 60834, 60963, 61092, 
	61221, 61350, 61479, 61608, 61737, 61866, 61995, 62124, 
	62253, 62382, 62511, 62640, 62769, 62898, 63027, 63156, 
	63285, 63414, 63543, 63672, 63801, 63930, 64015, 64144, 
	64273, 64402, 64531, 64660, 64789, 64918, 65047, 65176, 
	65305, 65434, 65563, 65692, 65821, 65950, 66079, 66208, 
	66337, 66466, 66595, 66724, 66853, 66982, 67111, 67240, 
	67369, 67498, 67627, 67756, 67885, 68014, 68143, 68272, 
	68401, 68530, 68659, 68788, 68917, 69046, 69175, 69304, 
	69433, 69562, 69691, 69820, 69949, 70078, 70207, 70336, 
	70465, 70594, 70723, 70852, 70981, 71110, 71239, 71368, 
	71497, 71626, 71755, 71884, 72013, 72142, 72271, 72400, 
	72401, 72466, 72467, 72506, 72545, 72547, 72600, 72602, 
	72695, 72797, 72889
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 80, 82, 80, 
	82, 82, 80, 80, 82, 82, 82, 83, 
	82, 82, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 82, 80, 
	80, 81, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 80, 80, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 80, 80, 80, 
	80, 80, 80, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 82, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 80, 82, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 80, 80, 
	80, 80, 80, 80, 85, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 81, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 80, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 81, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 80, 81, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 88, 87, 88, 87, 87, 88, 88, 
	87, 87, 87, 89, 87, 87, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	87, 87, 87, 87, 87, 87, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 87, 88, 88, 86, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 88, 88, 87, 88, 86, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 88, 88, 88, 88, 88, 88, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 87, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 88, 87, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 88, 88, 88, 88, 88, 88, 
	93, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 91, 
	88, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 88, 
	91, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 88, 88, 88, 88, 88, 
	88, 88, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 88, 88, 88, 88, 
	94, 88, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 88, 88, 88, 88, 
	88, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 95, 95, 95, 95, 
	95, 95, 95, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 95, 95, 95, 
	95, 96, 95, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 95, 95, 95, 
	95, 95, 96, 97, 98, 98, 98, 97, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 98, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 102, 99, 99, 99, 99, 101, 99, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 99, 99, 99, 99, 100, 99, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 99, 99, 99, 99, 99, 100, 
	102, 99, 99, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 104, 
	104, 104, 104, 106, 104, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 104, 
	104, 104, 104, 105, 104, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 104, 
	104, 104, 104, 104, 105, 107, 104, 109, 
	108, 110, 108, 111, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 113, 108, 
	113, 113, 113, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 113, 108, 108, 
	108, 108, 114, 115, 108, 116, 108, 117, 
	118, 119, 120, 121, 114, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 122, 
	108, 123, 119, 124, 125, 108, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	126, 127, 119, 128, 112, 108, 112, 112, 
	112, 112, 112, 112, 112, 112, 129, 112, 
	112, 112, 112, 112, 112, 112, 112, 130, 
	112, 112, 131, 112, 132, 112, 112, 112, 
	133, 134, 108, 128, 108, 112, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 135, 
	108, 135, 135, 135, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 135, 108, 
	108, 108, 108, 136, 137, 108, 138, 108, 
	139, 140, 141, 142, 143, 136, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	144, 108, 145, 141, 146, 147, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 148, 149, 141, 110, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 150, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	151, 105, 105, 152, 105, 153, 105, 105, 
	105, 154, 155, 108, 110, 108, 105, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	106, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 108, 108, 108, 108, 106, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 105, 108, 
	105, 105, 105, 105, 105, 156, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 108, 105, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 106, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 107, 108, 108, 108, 108, 106, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 105, 
	108, 105, 105, 105, 105, 157, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 108, 
	105, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 106, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 107, 108, 108, 108, 108, 
	106, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	105, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 158, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	108, 105, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 106, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 107, 108, 108, 108, 
	108, 106, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 105, 108, 105, 105, 159, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 108, 105, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 106, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 107, 108, 108, 
	108, 108, 106, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 105, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	160, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 108, 105, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 106, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 108, 
	108, 108, 108, 106, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 105, 108, 105, 105, 105, 
	105, 156, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 108, 105, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 106, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 107, 
	108, 108, 108, 108, 106, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 105, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 161, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 108, 105, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 106, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	107, 108, 108, 108, 108, 106, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 162, 105, 105, 105, 105, 105, 
	105, 105, 163, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 108, 105, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	106, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 108, 108, 108, 108, 106, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 105, 108, 
	105, 105, 105, 105, 164, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 108, 105, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 106, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 107, 108, 108, 108, 108, 106, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 105, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 165, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 108, 
	105, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 106, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 107, 108, 108, 108, 108, 
	106, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	105, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 156, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	108, 105, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 106, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 107, 108, 108, 108, 
	108, 106, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 105, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 166, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 108, 105, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 106, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 107, 108, 108, 
	108, 108, 106, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 105, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 156, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 108, 105, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 106, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 108, 
	108, 108, 108, 106, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 105, 108, 105, 105, 105, 
	105, 105, 105, 105, 167, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 108, 105, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 106, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 107, 
	108, 108, 108, 108, 106, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 105, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 168, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 108, 105, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 106, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	107, 108, 108, 108, 108, 106, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 160, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 108, 105, 170, 
	169, 171, 169, 172, 169, 141, 169, 173, 
	169, 169, 169, 169, 169, 169, 169, 174, 
	169, 175, 169, 176, 169, 141, 169, 177, 
	169, 141, 169, 178, 169, 172, 169, 180, 
	179, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 183, 183, 183, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 183, 181, 181, 181, 181, 181, 181, 
	181, 184, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 181, 185, 181, 181, 
	182, 181, 182, 182, 182, 186, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 181, 181, 181, 181, 
	181, 182, 187, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 189, 181, 189, 
	189, 189, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 189, 181, 181, 181, 
	181, 181, 181, 181, 190, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 181, 
	191, 181, 181, 188, 181, 188, 188, 188, 
	192, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 181, 
	181, 181, 181, 181, 188, 194, 193, 194, 
	194, 194, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 194, 193, 193, 193, 
	193, 193, 193, 193, 195, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	196, 193, 197, 193, 198, 193, 198, 198, 
	198, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 198, 193, 193, 193, 193, 
	193, 193, 193, 199, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 200, 
	193, 201, 202, 204, 203, 205, 203, 206, 
	203, 207, 203, 208, 203, 209, 210, 210, 
	210, 209, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 209, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	210, 210, 210, 210, 210, 210, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	210, 212, 201, 213, 214, 213, 213, 213, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 213, 201, 201, 215, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 217, 201, 
	218, 219, 218, 218, 218, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 218, 
	201, 201, 220, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 222, 201, 224, 225, 224, 
	224, 224, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 224, 223, 223, 226, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	228, 223, 230, 231, 230, 230, 230, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 230, 229, 229, 232, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 234, 229, 230, 
	235, 230, 230, 230, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	229, 232, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 234, 229, 214, 201, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 238, 
	238, 236, 238, 236, 238, 238, 236, 236, 
	238, 238, 238, 239, 238, 238, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	238, 238, 238, 238, 238, 238, 238, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 236, 238, 236, 236, 237, 238, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 236, 236, 236, 238, 236, 237, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 236, 236, 236, 236, 236, 236, 236, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 236, 236, 236, 236, 238, 236, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 236, 236, 236, 236, 236, 238, 
	241, 238, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 238, 236, 241, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 243, 
	236, 236, 236, 236, 244, 236, 236, 236, 
	236, 236, 245, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 212, 236, 236, 236, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	236, 236, 236, 236, 242, 246, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	236, 236, 236, 245, 236, 242, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	249, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	248, 248, 248, 248, 248, 248, 248, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 248, 248, 248, 248, 247, 248, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 248, 248, 248, 248, 248, 247, 251, 
	250, 254, 253, 249, 248, 254, 255, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 243, 236, 236, 236, 236, 244, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 236, 236, 236, 236, 242, 246, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 236, 236, 236, 236, 236, 242, 
	257, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 254, 256, 
	254, 257, 258, 259, 259, 259, 258, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 258, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 260, 
	259, 258, 261, 261, 261, 258, 261, 261, 
	261, 261, 261, 262, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 258, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 263, 261, 
	258, 261, 261, 261, 258, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 258, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 264, 261, 258, 
	265, 265, 265, 258, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 258, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 266, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 267, 265, 258, 268, 268, 
	268, 258, 268, 268, 268, 268, 268, 269, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 258, 
	268, 258, 268, 268, 268, 258, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 258, 268, 258, 259, 259, 
	259, 258, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 270, 259, 258, 271, 271, 271, 
	258, 271, 271, 271, 271, 271, 272, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 258, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 273, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	274, 271, 271, 271, 271, 271, 271, 275, 
	271, 258, 271, 271, 271, 258, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 258, 271, 276, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 277, 258, 277, 
	258, 258, 278, 278, 278, 258, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 258, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	279, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 280, 278, 258, 
	261, 261, 261, 258, 261, 261, 261, 261, 
	261, 262, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 258, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 264, 261, 258, 281, 
	281, 281, 258, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	258, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	281, 281, 281, 281, 281, 281, 281, 282, 
	282, 282, 282, 282, 282, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 282, 
	282, 282, 282, 282, 282, 281, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 284, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	285, 201, 201, 286, 201, 284, 201, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 201, 201, 201, 201, 283, 201, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 201, 201, 201, 201, 201, 283, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	284, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 285, 236, 236, 286, 236, 284, 236, 
	283, 283, 283, 283, 283, 283, 287, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 236, 236, 236, 236, 283, 236, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 236, 236, 236, 236, 236, 283, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 284, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 285, 236, 236, 286, 236, 284, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 288, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 236, 236, 236, 236, 283, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 236, 236, 236, 236, 236, 
	283, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 284, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 285, 236, 236, 286, 236, 
	284, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 289, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 236, 236, 236, 236, 
	283, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 236, 236, 236, 236, 
	236, 283, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 284, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 285, 236, 236, 286, 
	236, 284, 236, 283, 283, 283, 289, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 236, 236, 236, 
	236, 283, 236, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 236, 236, 236, 
	236, 236, 283, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 292, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 293, 290, 290, 
	290, 290, 292, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 290, 291, 293, 290, 290, 294, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 295, 295, 295, 295, 295, 295, 
	295, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 295, 295, 295, 295, 296, 
	295, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 295, 295, 295, 295, 295, 
	296, 298, 297, 298, 297, 297, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	297, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 297, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 297, 302, 
	301, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 301, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 301, 306, 
	305, 307, 305, 308, 305, 309, 305, 311, 
	310, 312, 310, 313, 310, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 295, 
	295, 295, 295, 295, 295, 295, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	295, 295, 295, 295, 314, 295, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	295, 295, 295, 295, 295, 314, 315, 301, 
	316, 317, 316, 316, 316, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 316, 
	301, 301, 318, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 319, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 320, 301, 321, 322, 321, 
	321, 321, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 321, 301, 301, 323, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	324, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	325, 301, 327, 328, 327, 327, 327, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 327, 326, 326, 329, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 330, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 331, 326, 333, 
	334, 333, 333, 333, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 335, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 336, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 337, 332, 333, 334, 333, 333, 
	333, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 333, 332, 332, 335, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 338, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 337, 
	332, 333, 339, 333, 333, 333, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	333, 332, 332, 335, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 336, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 337, 332, 340, 301, 
	317, 301, 342, 341, 342, 342, 342, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 342, 341, 341, 341, 341, 341, 343, 
	341, 341, 341, 341, 341, 341, 341, 344, 
	341, 345, 341, 347, 346, 346, 346, 347, 
	346, 346, 346, 346, 348, 349, 348, 348, 
	348, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 347, 346, 346, 
	346, 346, 346, 348, 346, 346, 350, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	351, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 352, 
	346, 346, 353, 346, 348, 354, 348, 348, 
	348, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 348, 354, 355, 356, 357, 
	358, 359, 361, 360, 363, 364, 363, 363, 
	363, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 363, 362, 349, 360, 365, 
	360, 367, 366, 366, 366, 367, 366, 366, 
	366, 366, 368, 369, 368, 368, 368, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 367, 366, 366, 366, 366, 
	366, 368, 366, 366, 370, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 371, 366, 368, 
	372, 368, 368, 368, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 368, 372, 
	374, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 375, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 376, 
	373, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 377, 377, 377, 377, 377, 
	377, 377, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 377, 377, 377, 377, 
	13, 377, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 377, 377, 377, 377, 
	377, 13, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 377, 380, 379, 379, 
	379, 380, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 380, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 381, 381, 381, 
	381, 381, 381, 381, 381, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	382, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 383, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	384, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 379, 385, 379, 379, 386, 379, 387, 
	388, 390, 390, 390, 390, 390, 390, 390, 
	390, 389, 391, 391, 391, 391, 391, 391, 
	391, 391, 389, 389, 392, 392, 38, 38, 
	38, 392, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 392, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 39, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 393, 38, 394, 395, 396, 396, 38, 
	38, 38, 396, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	396, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 39, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 397, 38, 37, 396, 398, 399, 
	400, 400, 25, 25, 25, 400, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 400, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 401, 25, 396, 
	19, 19, 19, 396, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 396, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 402, 19, 392, 25, 
	25, 25, 392, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	392, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 392, 403, 403, 403, 
	392, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 392, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	404, 403, 405, 406, 406, 403, 403, 403, 
	406, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 406, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	407, 403, 406, 19, 19, 19, 406, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 406, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 402, 
	19, 408, 406, 406, 25, 25, 25, 406, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 406, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 27, 
	25, 410, 410, 410, 410, 410, 410, 410, 
	410, 410, 410, 409, 409, 409, 409, 409, 
	409, 409, 410, 410, 410, 410, 410, 410, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 410, 410, 410, 410, 410, 410, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 411, 409, 412, 412, 
	412, 412, 412, 412, 412, 412, 412, 412, 
	409, 409, 409, 409, 409, 409, 409, 412, 
	412, 412, 412, 412, 412, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 412, 
	412, 412, 412, 412, 412, 409, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	409, 409, 409, 409, 409, 409, 409, 413, 
	413, 413, 413, 413, 413, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 413, 
	413, 413, 413, 413, 413, 409, 414, 414, 
	414, 414, 414, 414, 414, 414, 414, 414, 
	409, 409, 409, 409, 409, 409, 409, 414, 
	414, 414, 414, 414, 414, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 414, 
	414, 414, 414, 414, 414, 409, 415, 418, 
	417, 417, 417, 418, 417, 417, 417, 417, 
	419, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 418, 417, 417, 417, 417, 417, 419, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 420, 
	420, 420, 420, 420, 420, 420, 420, 420, 
	420, 417, 417, 417, 417, 417, 417, 417, 
	420, 420, 420, 420, 420, 420, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	420, 420, 420, 420, 420, 420, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 421, 417, 418, 417, 
	417, 417, 418, 417, 417, 417, 417, 416, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	418, 417, 417, 417, 417, 417, 416, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	417, 417, 417, 417, 417, 417, 417, 422, 
	422, 422, 422, 422, 422, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 422, 
	422, 422, 422, 422, 422, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 423, 417, 416, 418, 422, 
	422, 422, 418, 422, 422, 422, 422, 416, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	418, 422, 422, 422, 422, 422, 416, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 422, 422, 416, 422, 424, 418, 425, 
	425, 425, 418, 425, 425, 425, 425, 419, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	418, 425, 425, 425, 425, 425, 419, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 420, 420, 
	420, 420, 420, 420, 420, 420, 420, 420, 
	425, 425, 425, 425, 425, 425, 425, 420, 
	420, 420, 420, 420, 420, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 420, 
	420, 420, 420, 420, 420, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 416, 425, 418, 425, 425, 
	425, 418, 425, 425, 425, 425, 416, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 418, 
	425, 425, 425, 425, 425, 416, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 422, 422, 422, 
	422, 422, 422, 422, 422, 422, 422, 425, 
	425, 425, 425, 425, 425, 425, 422, 422, 
	422, 422, 422, 422, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 422, 422, 
	422, 422, 422, 422, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 418, 425, 418, 425, 425, 425, 
	418, 425, 425, 425, 425, 426, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 418, 425, 
	425, 425, 425, 425, 426, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 425, 425, 
	425, 425, 425, 425, 425, 427, 427, 427, 
	427, 427, 427, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 427, 427, 427, 
	427, 427, 427, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 428, 425, 418, 425, 425, 425, 418, 
	425, 425, 425, 425, 426, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 418, 425, 425, 
	425, 425, 425, 426, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 420, 420, 420, 420, 420, 
	420, 420, 420, 420, 420, 425, 425, 425, 
	425, 425, 425, 425, 420, 420, 420, 420, 
	420, 420, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 420, 420, 420, 420, 
	420, 420, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	428, 425, 429, 418, 425, 425, 425, 418, 
	425, 425, 425, 425, 426, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 418, 425, 425, 
	425, 425, 425, 426, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 430, 430, 430, 430, 430, 
	430, 430, 430, 430, 430, 425, 425, 425, 
	425, 425, 425, 425, 430, 430, 430, 430, 
	430, 430, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 430, 430, 430, 430, 
	430, 430, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	428, 425, 418, 425, 425, 425, 418, 425, 
	425, 425, 425, 426, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 418, 425, 425, 425, 
	425, 425, 426, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 425, 425, 425, 425, 
	425, 425, 425, 431, 431, 431, 431, 431, 
	431, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 431, 431, 431, 431, 431, 
	431, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 428, 
	425, 418, 425, 425, 425, 418, 425, 425, 
	425, 425, 426, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 418, 425, 425, 425, 425, 
	425, 426, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 425, 425, 425, 425, 425, 
	425, 425, 432, 432, 432, 432, 432, 432, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 432, 432, 432, 432, 432, 432, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 428, 425, 
	418, 425, 425, 425, 418, 425, 425, 425, 
	425, 426, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 418, 425, 425, 425, 425, 425, 
	426, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	433, 433, 433, 433, 433, 433, 433, 433, 
	433, 433, 425, 425, 425, 425, 425, 425, 
	425, 433, 433, 433, 433, 433, 433, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 433, 433, 433, 433, 433, 433, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 428, 425, 418, 
	425, 425, 425, 418, 425, 425, 425, 425, 
	426, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 418, 425, 425, 425, 425, 425, 426, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 425, 425, 425, 425, 425, 425, 425, 
	434, 434, 434, 434, 434, 434, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	434, 434, 434, 434, 434, 434, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 428, 425, 418, 425, 
	425, 425, 418, 425, 425, 425, 425, 416, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	418, 425, 425, 425, 425, 425, 416, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	425, 425, 425, 425, 425, 425, 425, 434, 
	434, 434, 434, 434, 434, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 434, 
	434, 434, 434, 434, 434, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 416, 425, 435, 436, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 437, 437, 437, 437, 437, 437, 437, 
	438, 438, 438, 438, 438, 438, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	438, 438, 438, 438, 438, 438, 437, 437, 
	440, 439, 439, 439, 440, 439, 439, 439, 
	439, 439, 441, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 440, 439, 439, 439, 439, 439, 
	439, 439, 439, 442, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 443, 439, 445, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 446, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 447, 444, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 448, 448, 448, 448, 448, 448, 448, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 448, 448, 448, 448, 44, 448, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 448, 448, 448, 448, 448, 44, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 448, 451, 450, 450, 450, 451, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 451, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 452, 452, 452, 452, 452, 
	452, 452, 452, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 453, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	454, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 455, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	456, 450, 450, 457, 450, 458, 459, 461, 
	461, 461, 461, 461, 461, 461, 461, 460, 
	462, 462, 462, 462, 462, 462, 462, 462, 
	460, 460, 463, 463, 69, 69, 69, 463, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 463, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 464, 
	69, 465, 466, 467, 467, 69, 69, 69, 
	467, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 467, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	468, 69, 68, 467, 469, 470, 471, 471, 
	56, 56, 56, 471, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 471, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 472, 56, 467, 50, 50, 
	50, 467, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 467, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 473, 50, 463, 56, 56, 56, 
	463, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 463, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 57, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	58, 56, 463, 474, 474, 474, 463, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 463, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 475, 474, 
	476, 477, 477, 474, 474, 474, 477, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 477, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 474, 478, 474, 
	477, 50, 50, 50, 477, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 477, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 473, 50, 479, 
	477, 477, 56, 56, 56, 477, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 477, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	57, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 58, 56, 481, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	481, 480, 480, 480, 480, 480, 480, 480, 
	481, 481, 481, 481, 481, 481, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	481, 481, 481, 481, 481, 481, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 482, 480, 483, 483, 483, 483, 
	483, 483, 483, 483, 483, 483, 480, 480, 
	480, 480, 480, 480, 480, 483, 483, 483, 
	483, 483, 483, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 483, 483, 483, 
	483, 483, 483, 480, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 480, 480, 
	480, 480, 480, 480, 480, 484, 484, 484, 
	484, 484, 484, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 484, 484, 484, 
	484, 484, 484, 480, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 480, 480, 
	480, 480, 480, 480, 480, 485, 485, 485, 
	485, 485, 485, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 485, 485, 485, 
	485, 485, 485, 480, 486, 489, 488, 488, 
	488, 489, 488, 488, 488, 488, 490, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 489, 
	488, 488, 488, 488, 488, 490, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 488, 
	488, 488, 488, 488, 488, 488, 491, 491, 
	491, 491, 491, 491, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 491, 491, 
	491, 491, 491, 491, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 492, 488, 489, 488, 488, 488, 
	489, 488, 488, 488, 488, 487, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 489, 488, 
	488, 488, 488, 488, 487, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 488, 488, 
	488, 488, 488, 488, 488, 493, 493, 493, 
	493, 493, 493, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 493, 493, 493, 
	493, 493, 493, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 488, 488, 488, 488, 488, 488, 
	488, 494, 488, 487, 489, 493, 493, 493, 
	489, 493, 493, 493, 493, 487, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 489, 493, 
	493, 493, 493, 493, 487, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 487, 493, 495, 489, 496, 496, 496, 
	489, 496, 496, 496, 496, 490, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 489, 496, 
	496, 496, 496, 496, 490, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 496, 496, 
	496, 496, 496, 496, 496, 491, 491, 491, 
	491, 491, 491, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 491, 491, 491, 
	491, 491, 491, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 487, 496, 489, 496, 496, 496, 489, 
	496, 496, 496, 496, 487, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 489, 496, 496, 
	496, 496, 496, 487, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 496, 496, 496, 
	496, 496, 496, 496, 493, 493, 493, 493, 
	493, 493, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 493, 493, 493, 493, 
	493, 493, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	489, 496, 489, 496, 496, 496, 489, 496, 
	496, 496, 496, 497, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 489, 496, 496, 496, 
	496, 496, 497, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 496, 496, 496, 496, 
	496, 496, 496, 498, 498, 498, 498, 498, 
	498, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 498, 498, 498, 498, 498, 
	498, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 499, 
	496, 489, 496, 496, 496, 489, 496, 496, 
	496, 496, 497, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 489, 496, 496, 496, 496, 
	496, 497, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 496, 496, 496, 496, 496, 
	496, 496, 491, 491, 491, 491, 491, 491, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 491, 491, 491, 491, 491, 491, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 499, 496, 
	500, 489, 496, 496, 496, 489, 496, 496, 
	496, 496, 497, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 489, 496, 496, 496, 496, 
	496, 497, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 501, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 496, 496, 496, 496, 496, 
	496, 496, 501, 501, 501, 501, 501, 501, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 501, 501, 501, 501, 501, 501, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 499, 496, 
	489, 496, 496, 496, 489, 496, 496, 496, 
	496, 497, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 489, 496, 496, 496, 496, 496, 
	497, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 496, 496, 496, 496, 496, 496, 
	496, 502, 502, 502, 502, 502, 502, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 502, 502, 502, 502, 502, 502, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 499, 496, 489, 
	496, 496, 496, 489, 496, 496, 496, 496, 
	497, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 489, 496, 496, 496, 496, 496, 497, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 496, 496, 496, 496, 496, 496, 496, 
	503, 503, 503, 503, 503, 503, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	503, 503, 503, 503, 503, 503, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 499, 496, 489, 496, 
	496, 496, 489, 496, 496, 496, 496, 497, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	489, 496, 496, 496, 496, 496, 497, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	496, 496, 496, 496, 496, 496, 496, 504, 
	504, 504, 504, 504, 504, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 504, 
	504, 504, 504, 504, 504, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 499, 496, 489, 496, 496, 
	496, 489, 496, 496, 496, 496, 497, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 489, 
	496, 496, 496, 496, 496, 497, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 496, 
	496, 496, 496, 496, 496, 496, 505, 505, 
	505, 505, 505, 505, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 505, 505, 
	505, 505, 505, 505, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 499, 496, 489, 496, 496, 496, 
	489, 496, 496, 496, 496, 487, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 489, 496, 
	496, 496, 496, 496, 487, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 496, 496, 
	496, 496, 496, 496, 496, 505, 505, 505, 
	505, 505, 505, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 505, 505, 505, 
	505, 505, 505, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 487, 496, 506, 507, 509, 509, 509, 
	509, 509, 509, 509, 509, 509, 509, 508, 
	508, 508, 508, 508, 508, 508, 509, 509, 
	509, 509, 509, 509, 508, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 509, 509, 
	509, 509, 509, 509, 508, 508, 511, 510, 
	510, 510, 511, 510, 510, 510, 510, 512, 
	513, 512, 512, 512, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	511, 510, 510, 510, 510, 510, 512, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 514, 510, 512, 515, 512, 512, 
	512, 515, 515, 515, 515, 515, 515, 515, 
	515, 515, 515, 515, 515, 515, 515, 515, 
	515, 515, 515, 512, 515, 516, 517, 517, 
	517, 516, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 517, 
	517, 517, 517, 517, 517, 517, 517, 516, 
	517, 519, 518, 518, 518, 519, 518, 518, 
	518, 518, 518, 520, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 519, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 521, 518, 522, 
	523, 523, 523, 522, 523, 523, 523, 523, 
	523, 524, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 522, 523, 526, 525, 525, 525, 526, 
	525, 525, 525, 525, 525, 527, 525, 525, 
	525, 525, 525, 525, 525, 525, 525, 525, 
	525, 525, 525, 525, 525, 526, 525, 525, 
	525, 525, 525, 525, 525, 525, 528, 525, 
	530, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 531, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 532, 
	529, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 533, 533, 533, 533, 533, 
	533, 533, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 533, 533, 533, 533, 
	75, 533, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 533, 533, 533, 533, 
	533, 75, 78, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 533, 535, 534, 534, 
	534, 535, 534, 534, 534, 534, 534, 536, 
	534, 534, 534, 534, 534, 534, 534, 534, 
	534, 534, 534, 534, 534, 534, 534, 535, 
	534, 538, 537, 537, 537, 538, 537, 537, 
	537, 537, 539, 540, 539, 539, 539, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 538, 537, 537, 537, 537, 
	537, 539, 537, 537, 541, 537, 539, 542, 
	539, 539, 539, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 539, 542, 544, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 545, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 546, 543, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 547, 547, 547, 547, 547, 547, 
	547, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 547, 547, 547, 547, 81, 
	547, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 547, 547, 547, 547, 547, 
	81, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 547, 549, 548, 548, 548, 
	549, 548, 548, 548, 548, 550, 551, 550, 
	550, 550, 548, 548, 548, 548, 548, 548, 
	548, 548, 548, 548, 548, 548, 549, 548, 
	548, 548, 548, 548, 550, 548, 550, 552, 
	550, 550, 550, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 550, 552, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 553, 553, 553, 553, 553, 553, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 553, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 555, 555, 555, 555, 
	555, 555, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 555, 556, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 557, 88, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 558, 558, 558, 
	558, 558, 558, 558, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 558, 558, 
	558, 558, 86, 558, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 558, 558, 
	558, 558, 558, 86, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 558, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 559, 559, 559, 559, 559, 559, 559, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 559, 559, 559, 559, 91, 559, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 559, 559, 559, 559, 559, 91, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	560, 560, 560, 560, 560, 560, 560, 560, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 560, 560, 560, 560, 560, 560, 
	560, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 560, 560, 560, 560, 91, 
	560, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 560, 560, 560, 560, 560, 
	91, 561, 561, 561, 561, 561, 561, 561, 
	561, 561, 561, 561, 561, 561, 561, 561, 
	561, 561, 561, 561, 561, 561, 561, 561, 
	561, 561, 561, 561, 561, 561, 561, 561, 
	561, 561, 561, 561, 561, 561, 561, 561, 
	561, 561, 561, 561, 561, 561, 561, 561, 
	561, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 561, 561, 561, 561, 561, 
	561, 561, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 561, 561, 561, 561, 
	94, 561, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 561, 561, 561, 561, 
	561, 94, 563, 564, 564, 564, 563, 564, 
	564, 564, 564, 565, 566, 565, 565, 565, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 563, 564, 564, 564, 
	564, 564, 565, 567, 564, 568, 569, 570, 
	571, 564, 564, 564, 572, 573, 564, 573, 
	564, 574, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 575, 564, 576, 577, 
	578, 564, 564, 579, 580, 579, 579, 581, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 582, 583, 564, 
	574, 584, 574, 585, 586, 587, 588, 589, 
	590, 562, 562, 591, 562, 562, 562, 592, 
	593, 594, 562, 562, 595, 596, 597, 598, 
	562, 599, 562, 600, 562, 564, 601, 564, 
	573, 564, 562, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 603, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 602, 602, 602, 
	603, 602, 603, 602, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 602, 602, 
	602, 602, 562, 602, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 602, 602, 
	602, 602, 602, 562, 565, 604, 565, 565, 
	565, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 565, 604, 605, 574, 606, 
	606, 574, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 574, 
	606, 607, 608, 609, 610, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 96, 96, 
	611, 96, 611, 96, 96, 611, 611, 96, 
	96, 96, 613, 96, 96, 614, 614, 614, 
	614, 614, 614, 614, 614, 614, 614, 96, 
	96, 96, 96, 96, 96, 96, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	611, 96, 611, 611, 612, 96, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	611, 611, 611, 96, 611, 612, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 615, 615, 
	615, 615, 615, 615, 615, 615, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	615, 615, 615, 615, 615, 615, 615, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 615, 615, 615, 615, 612, 615, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 615, 615, 615, 615, 615, 612, 614, 
	614, 614, 614, 614, 614, 614, 614, 614, 
	614, 615, 616, 606, 574, 606, 574, 606, 
	574, 606, 618, 617, 574, 619, 606, 574, 
	606, 620, 574, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 611, 611, 611, 611, 611, 611, 
	611, 611, 574, 611, 574, 606, 574, 574, 
	606, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 603, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 602, 602, 602, 603, 602, 
	603, 602, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 602, 602, 602, 602, 
	579, 602, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 602, 602, 602, 602, 
	602, 579, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 603, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 621, 621, 621, 603, 
	621, 603, 621, 579, 579, 579, 579, 622, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 621, 621, 621, 
	621, 579, 621, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 621, 621, 621, 
	621, 621, 579, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 603, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 621, 621, 621, 
	603, 621, 603, 621, 579, 579, 579, 579, 
	579, 579, 623, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 621, 621, 
	621, 621, 579, 621, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 621, 621, 
	621, 621, 621, 579, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 603, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 621, 621, 
	621, 603, 621, 603, 621, 579, 579, 579, 
	579, 579, 579, 579, 579, 624, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 621, 
	621, 621, 621, 579, 621, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 621, 
	621, 621, 621, 621, 579, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 603, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 621, 
	621, 621, 603, 621, 603, 621, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 625, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	621, 621, 621, 621, 579, 621, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	621, 621, 621, 621, 621, 579, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 603, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	621, 621, 621, 603, 621, 603, 621, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 626, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 621, 621, 621, 621, 579, 621, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 621, 621, 621, 621, 621, 579, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	603, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 621, 621, 621, 603, 621, 603, 621, 
	579, 579, 579, 625, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 621, 621, 621, 621, 579, 621, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 579, 579, 579, 579, 579, 579, 
	579, 579, 621, 621, 621, 621, 621, 579, 
	620, 611, 566, 611, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 628, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 629, 630, 562, 562, 562, 562, 
	562, 631, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 632, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 633, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 634, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 635, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 636, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 637, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 638, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 639, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 640, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	641, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 642, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 638, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 643, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 642, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	644, 562, 645, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 646, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 647, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 640, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 640, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 648, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 649, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 650, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 651, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 640, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 652, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 653, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 640, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 654, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 655, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 656, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 640, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 657, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 647, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 658, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 640, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 659, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	603, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 660, 660, 660, 603, 660, 603, 660, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 660, 660, 660, 660, 562, 660, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	661, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 660, 660, 660, 660, 660, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 662, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 663, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 664, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 665, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	666, 562, 667, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	668, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 640, 562, 562, 562, 669, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 640, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 640, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 670, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 671, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 656, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 672, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 594, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	654, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 640, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 640, 562, 562, 562, 
	562, 562, 562, 562, 640, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 673, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 674, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 675, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 656, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	676, 562, 562, 562, 677, 562, 562, 562, 
	562, 562, 678, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 678, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 640, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 640, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 679, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 680, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 681, 682, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	640, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 683, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	656, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 684, 562, 
	562, 685, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 640, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	651, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 686, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 687, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 669, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 688, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 594, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	562, 562, 562, 689, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 683, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 651, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 690, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 691, 562, 562, 562, 562, 562, 
	562, 562, 692, 562, 562, 562, 562, 562, 
	562, 562, 693, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	603, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 603, 627, 603, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 562, 627, 
	562, 562, 562, 562, 669, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 627, 627, 562, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 603, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 627, 627, 627, 603, 627, 603, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 562, 
	627, 562, 562, 562, 562, 657, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 627, 627, 
	562, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 603, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 627, 627, 627, 603, 627, 
	603, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	562, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 677, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 627, 
	627, 562, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 603, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 627, 627, 627, 603, 
	627, 603, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 562, 627, 562, 562, 562, 562, 562, 
	562, 562, 694, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	627, 627, 562, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 603, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 627, 627, 627, 
	603, 627, 603, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 562, 627, 562, 562, 562, 562, 
	651, 562, 562, 562, 675, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 627, 627, 562, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 603, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 627, 627, 
	627, 603, 627, 603, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 562, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 695, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 627, 627, 562, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 603, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 627, 
	627, 627, 603, 627, 603, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 562, 627, 562, 562, 
	562, 562, 696, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 627, 627, 562, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 603, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	627, 627, 627, 603, 627, 603, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 562, 627, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 645, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 627, 627, 627, 627, 627, 562, 574, 
	606, 698, 699, 699, 699, 698, 699, 699, 
	699, 699, 700, 699, 700, 700, 700, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 699, 698, 699, 699, 699, 699, 
	699, 700, 699, 699, 701, 699, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 699, 702, 699, 699, 
	697, 699, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 697, 697, 697, 697, 
	697, 697, 697, 697, 699, 699, 699, 699, 
	699, 697, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 703, 101, 703, 703, 703, 703, 
	703, 703, 703, 703, 703, 703, 703, 703, 
	703, 703, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 102, 703, 703, 703, 
	703, 101, 703, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 703, 703, 703, 
	703, 100, 703, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 703, 703, 703, 
	703, 703, 100, 700, 704, 700, 700, 700, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 700, 704, 705, 706, 707, 708, 
	709, 703, 710, 712, 713, 713, 713, 712, 
	713, 713, 713, 713, 714, 715, 714, 714, 
	714, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 712, 713, 713, 
	713, 713, 713, 714, 716, 713, 717, 713, 
	718, 719, 713, 713, 713, 720, 721, 713, 
	721, 713, 718, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 722, 
	723, 724, 713, 713, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 726, 727, 
	713, 718, 711, 718, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 713, 728, 
	713, 721, 713, 711, 729, 729, 729, 729, 
	729, 729, 729, 729, 729, 729, 729, 729, 
	729, 729, 729, 729, 729, 729, 729, 729, 
	729, 729, 729, 729, 729, 729, 729, 729, 
	729, 729, 729, 729, 729, 730, 729, 729, 
	729, 729, 729, 729, 729, 729, 729, 729, 
	729, 729, 729, 729, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 729, 729, 
	729, 729, 729, 730, 729, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 729, 
	729, 729, 729, 711, 729, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 711, 
	711, 711, 711, 711, 711, 711, 711, 729, 
	729, 729, 729, 729, 711, 732, 731, 733, 
	714, 734, 714, 714, 714, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 714, 
	734, 735, 718, 736, 736, 718, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 736, 736, 736, 736, 736, 
	736, 736, 736, 718, 736, 737, 738, 739, 
	740, 718, 736, 718, 736, 718, 736, 718, 
	741, 736, 718, 736, 743, 718, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 742, 742, 742, 
	742, 742, 742, 742, 742, 718, 742, 718, 
	736, 718, 718, 736, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 730, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 744, 744, 
	744, 744, 744, 730, 744, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 744, 
	744, 744, 744, 725, 744, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 744, 
	744, 744, 744, 744, 725, 743, 742, 715, 
	742, 718, 736, 746, 745, 745, 745, 746, 
	745, 745, 745, 745, 747, 748, 747, 747, 
	747, 745, 745, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 745, 746, 745, 745, 
	745, 745, 745, 747, 745, 745, 749, 745, 
	110, 750, 745, 751, 745, 752, 110, 141, 
	753, 143, 110, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 745, 754, 745, 755, 
	141, 756, 757, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 745, 745, 141, 758, 
	141, 110, 745, 745, 745, 745, 745, 745, 
	745, 745, 745, 745, 759, 745, 745, 745, 
	745, 745, 745, 745, 745, 760, 745, 745, 
	761, 745, 762, 745, 745, 745, 154, 155, 
	745, 110, 745, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 747, 763, 747, 747, 
	747, 763, 763, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 763, 763, 763, 763, 
	763, 763, 763, 747, 763, 763, 763, 763, 
	136, 137, 763, 138, 763, 139, 140, 141, 
	142, 143, 136, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 763, 144, 763, 145, 
	141, 146, 147, 763, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 148, 149, 
	141, 110, 105, 763, 105, 105, 105, 105, 
	105, 105, 105, 105, 150, 105, 105, 105, 
	105, 105, 105, 105, 105, 151, 105, 105, 
	152, 105, 153, 105, 105, 105, 154, 155, 
	763, 110, 763, 105, 764, 765, 765, 765, 
	764, 765, 765, 765, 765, 141, 766, 141, 
	141, 141, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 764, 765, 
	765, 765, 765, 765, 141, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 765, 765, 765, 765, 765, 765, 765, 
	765, 141, 765, 141, 766, 141, 141, 141, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 141, 104, 104, 104, 104, 104, 
	110, 104, 104, 104, 104, 104, 104, 104, 
	141, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 141, 
	104, 141, 766, 141, 141, 141, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	141, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 141, 104, 767, 
	141, 766, 141, 141, 141, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 141, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 769, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 141, 768, 141, 766, 
	141, 141, 141, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 141, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 141, 141, 104, 770, 764, 141, 
	764, 772, 771, 774, 775, 774, 774, 774, 
	773, 773, 773, 773, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 773, 773, 773, 
	773, 773, 774, 773, 776, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 106, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 107, 
	764, 764, 764, 764, 106, 764, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	764, 764, 764, 764, 105, 764, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	764, 764, 764, 764, 764, 105, 777, 141, 
	766, 141, 141, 141, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 141, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 141, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 110, 764, 778, 779, 780, 781, 
	782, 783, 141, 766, 141, 141, 141, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 141, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 110, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 141, 764, 
	141, 771, 110, 784, 110, 784, 785, 786, 
	785, 785, 785, 773, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 785, 773, 787, 
	784, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 113, 788, 113, 113, 113, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 788, 788, 788, 788, 788, 788, 
	788, 113, 788, 788, 788, 788, 114, 115, 
	788, 116, 788, 117, 118, 119, 120, 121, 
	114, 788, 788, 788, 788, 788, 788, 788, 
	788, 788, 788, 122, 788, 123, 119, 124, 
	125, 788, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 126, 127, 119, 128, 
	112, 788, 112, 112, 112, 112, 112, 112, 
	112, 112, 129, 112, 112, 112, 112, 112, 
	112, 112, 112, 130, 112, 112, 131, 112, 
	132, 112, 112, 112, 133, 134, 788, 128, 
	788, 112, 141, 784, 789, 784, 790, 784, 
	791, 784, 792, 180, 180, 180, 792, 180, 
	180, 180, 180, 793, 180, 793, 793, 793, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 792, 180, 180, 180, 
	180, 180, 793, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 180, 794, 180, 
	180, 182, 180, 182, 182, 182, 186, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 180, 180, 180, 
	180, 180, 182, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 795, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 180, 179, 179, 
	179, 179, 795, 179, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 179, 179, 
	179, 179, 182, 179, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 179, 179, 
	179, 179, 179, 182, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 183, 796, 183, 
	183, 183, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 183, 796, 796, 796, 
	796, 796, 796, 796, 184, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 796, 
	185, 796, 796, 182, 796, 182, 182, 182, 
	186, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 796, 
	796, 796, 796, 796, 182, 797, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 796, 795, 
	796, 796, 796, 796, 796, 796, 796, 796, 
	796, 796, 796, 796, 796, 796, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	180, 796, 796, 796, 796, 795, 796, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 796, 796, 796, 796, 182, 796, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 798, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 796, 796, 796, 796, 796, 182, 187, 
	796, 800, 799, 799, 799, 800, 799, 799, 
	799, 799, 801, 799, 801, 801, 801, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 800, 799, 799, 799, 799, 
	799, 801, 799, 799, 802, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 803, 799, 799, 
	799, 799, 799, 799, 799, 804, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 799, 799, 799, 799, 
	799, 799, 799, 799, 805, 799, 801, 806, 
	801, 801, 801, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 801, 806, 807, 
	808, 809, 810, 812, 811, 813, 814, 811, 
	815, 817, 818, 818, 818, 817, 818, 818, 
	818, 818, 819, 820, 819, 819, 819, 818, 
	818, 818, 818, 818, 818, 818, 818, 818, 
	818, 818, 818, 817, 818, 818, 818, 818, 
	818, 819, 818, 818, 821, 818, 818, 818, 
	818, 818, 818, 818, 818, 818, 818, 818, 
	818, 818, 818, 818, 818, 818, 818, 818, 
	818, 818, 818, 818, 818, 818, 818, 818, 
	818, 818, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 818, 822, 818, 818, 
	816, 818, 816, 816, 816, 816, 816, 816, 
	816, 816, 823, 816, 816, 816, 816, 816, 
	816, 816, 816, 824, 816, 816, 825, 816, 
	826, 816, 816, 816, 818, 818, 818, 818, 
	818, 816, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 827, 827, 827, 827, 
	827, 827, 827, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 827, 827, 827, 
	827, 816, 827, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 827, 827, 827, 
	827, 827, 816, 819, 828, 819, 819, 819, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 819, 828, 829, 830, 831, 832, 
	833, 835, 834, 836, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 837, 837, 837, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 816, 837, 816, 816, 816, 
	816, 816, 838, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 837, 816, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 837, 837, 837, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 816, 837, 816, 816, 
	816, 816, 839, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 837, 816, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 837, 837, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 816, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 840, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 837, 816, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 837, 837, 837, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 816, 837, 
	816, 816, 841, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 837, 816, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 837, 837, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 816, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 842, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 837, 
	816, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 837, 
	837, 837, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	816, 837, 816, 816, 816, 816, 838, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	837, 816, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	837, 837, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 816, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	843, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 837, 816, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 837, 837, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 816, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 844, 
	816, 816, 816, 816, 816, 816, 816, 845, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 837, 816, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 837, 837, 837, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 816, 837, 816, 816, 816, 
	816, 846, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 837, 816, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 837, 
	837, 837, 837, 837, 837, 837, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 816, 837, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	847, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 837, 816, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	837, 837, 837, 837, 837, 837, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 816, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 838, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 837, 816, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 837, 837, 837, 837, 837, 837, 837, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 816, 837, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	848, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 837, 816, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 837, 837, 837, 837, 837, 837, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 816, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 838, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 837, 
	816, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 837, 837, 837, 837, 837, 
	837, 837, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	816, 837, 816, 816, 816, 816, 816, 816, 
	816, 849, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	837, 816, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 837, 837, 837, 837, 
	837, 837, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 816, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 850, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 837, 816, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 837, 837, 837, 
	837, 837, 837, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 816, 837, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 842, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 837, 837, 
	837, 837, 837, 816, 852, 212, 212, 212, 
	852, 212, 212, 212, 212, 853, 854, 853, 
	853, 853, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 852, 212, 
	212, 212, 212, 212, 853, 855, 212, 856, 
	212, 857, 858, 212, 859, 212, 860, 861, 
	212, 862, 863, 864, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 865, 212, 
	866, 867, 868, 869, 212, 870, 871, 870, 
	870, 872, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 873, 
	874, 212, 875, 876, 212, 877, 878, 879, 
	880, 881, 882, 851, 851, 883, 851, 851, 
	851, 884, 885, 886, 851, 851, 887, 888, 
	889, 890, 851, 891, 851, 892, 851, 893, 
	894, 212, 875, 212, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 899, 898, 
	898, 900, 898, 901, 903, 904, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 905, 902, 907, 
	906, 908, 909, 910, 853, 911, 853, 853, 
	853, 911, 911, 911, 911, 911, 911, 911, 
	911, 911, 911, 911, 911, 911, 911, 911, 
	911, 911, 911, 853, 911, 913, 912, 915, 
	916, 915, 915, 915, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 914, 914, 
	914, 914, 914, 914, 914, 914, 915, 914, 
	212, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 212, 917, 918, 919, 920, 921, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 923, 923, 923, 923, 923, 923, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 923, 925, 210, 210, 210, 925, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 925, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 210, 210, 210, 
	210, 210, 210, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 210, 927, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 212, 926, 928, 
	930, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 212, 929, 212, 201, 213, 
	214, 213, 213, 213, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 213, 926, 
	926, 215, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	926, 926, 926, 212, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 217, 926, 230, 231, 230, 230, 
	230, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 230, 229, 229, 232, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 234, 
	229, 213, 214, 213, 213, 213, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	213, 926, 926, 215, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 926, 926, 926, 212, 212, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 926, 926, 926, 217, 926, 932, 917, 
	934, 933, 917, 935, 935, 935, 917, 935, 
	935, 935, 935, 935, 935, 935, 935, 935, 
	935, 935, 935, 935, 935, 935, 935, 935, 
	935, 935, 935, 935, 917, 935, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 937, 
	938, 917, 939, 238, 940, 938, 917, 917, 
	941, 942, 917, 942, 917, 238, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	943, 917, 944, 945, 946, 917, 947, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 948, 917, 917, 238, 936, 238, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 917, 949, 917, 950, 917, 936, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	952, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 951, 951, 951, 953, 951, 952, 951, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 951, 951, 951, 951, 936, 951, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 951, 951, 951, 951, 951, 936, 
	955, 954, 956, 958, 959, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 960, 957, 962, 963, 
	961, 964, 965, 966, 967, 238, 951, 951, 
	968, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 238, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 951, 951, 951, 951, 951, 951, 
	951, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 951, 951, 951, 951, 237, 
	951, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 951, 951, 951, 951, 951, 
	237, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 951, 969, 951, 238, 951, 
	238, 951, 238, 970, 951, 238, 951, 238, 
	951, 238, 238, 951, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 971, 971, 
	971, 971, 971, 971, 974, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 971, 
	971, 971, 971, 972, 971, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 971, 
	971, 971, 971, 971, 972, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 975, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	979, 979, 979, 979, 979, 979, 979, 979, 
	979, 979, 977, 977, 977, 977, 977, 977, 
	977, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 977, 977, 977, 977, 978, 
	977, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 977, 977, 977, 977, 977, 
	978, 969, 951, 968, 951, 980, 981, 917, 
	982, 253, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 254, 243, 255, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	254, 244, 254, 257, 212, 917, 875, 212, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 212, 
	917, 212, 927, 917, 986, 985, 985, 985, 
	986, 985, 985, 985, 985, 987, 988, 987, 
	987, 987, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 986, 985, 
	985, 985, 985, 985, 987, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 985, 
	990, 985, 985, 989, 985, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 989, 989, 989, 989, 989, 985, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 991, 991, 991, 
	991, 991, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 991, 991, 991, 991, 
	992, 991, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 991, 991, 991, 991, 
	991, 992, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 994, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 993, 993, 993, 993, 
	993, 993, 993, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 993, 993, 993, 
	993, 994, 993, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 994, 994, 994, 
	994, 994, 994, 994, 994, 993, 993, 993, 
	993, 993, 994, 997, 996, 996, 996, 997, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 997, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 998, 998, 998, 998, 998, 
	998, 998, 998, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 999, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	1000, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 1001, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	1002, 996, 996, 1003, 996, 1004, 1005, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 
	1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 
	1006, 1006, 1009, 1009, 278, 278, 278, 1009, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 1009, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 279, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 1010, 
	278, 1011, 1012, 1013, 1013, 278, 278, 278, 
	1013, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 1013, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 279, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	1014, 278, 277, 1013, 1015, 1016, 1017, 1017, 
	265, 265, 265, 1017, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 1017, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 266, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 1018, 265, 1013, 259, 259, 
	259, 1013, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 1013, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 1019, 259, 1009, 265, 265, 265, 
	1009, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 1009, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 266, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	267, 265, 1009, 1020, 1020, 1020, 1009, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1009, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 
	1022, 1023, 1023, 1020, 1020, 1020, 1023, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1023, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1024, 1020, 
	1023, 259, 259, 259, 1023, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 1023, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 1019, 259, 1025, 
	1023, 1023, 265, 265, 265, 1023, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 1023, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	266, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 267, 265, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1027, 1027, 1027, 1027, 1027, 1027, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1027, 1027, 1027, 1027, 1027, 1027, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1028, 1026, 1029, 1029, 1029, 1029, 
	1029, 1029, 1029, 1029, 1029, 1029, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1029, 1029, 1029, 
	1029, 1029, 1029, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1029, 1029, 1029, 
	1029, 1029, 1029, 1026, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1030, 1030, 1030, 
	1030, 1030, 1030, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1030, 1030, 1030, 
	1030, 1030, 1030, 1026, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1031, 1031, 1031, 
	1031, 1031, 1031, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1031, 1031, 1031, 
	1031, 1031, 1031, 1026, 1032, 1035, 1034, 1034, 
	1034, 1035, 1034, 1034, 1034, 1034, 1036, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 
	1034, 1034, 1034, 1034, 1034, 1036, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1037, 1037, 
	1037, 1037, 1037, 1037, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1037, 1037, 
	1037, 1037, 1037, 1037, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1038, 1034, 1035, 1034, 1034, 1034, 
	1035, 1034, 1034, 1034, 1034, 1033, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1035, 1034, 
	1034, 1034, 1034, 1034, 1033, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1039, 1039, 1039, 
	1039, 1039, 1039, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1039, 1039, 1039, 
	1039, 1039, 1039, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1040, 1034, 1033, 1035, 1039, 1039, 1039, 
	1035, 1039, 1039, 1039, 1039, 1033, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1035, 1039, 
	1039, 1039, 1039, 1039, 1033, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1033, 1039, 1041, 1035, 1042, 1042, 1042, 
	1035, 1042, 1042, 1042, 1042, 1036, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1042, 1036, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043, 
	1043, 1043, 1043, 1043, 1043, 1043, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 
	1043, 1043, 1043, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 
	1043, 1043, 1043, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1033, 1042, 1035, 1042, 1042, 1042, 1035, 
	1042, 1042, 1042, 1042, 1033, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1042, 1033, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1039, 1039, 1039, 1039, 
	1039, 1039, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1039, 1039, 1039, 1039, 
	1039, 1039, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1035, 1042, 1035, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1044, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1042, 1044, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1045, 1045, 1045, 1045, 1045, 1045, 
	1045, 1045, 1045, 1045, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045, 
	1045, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1045, 1045, 1045, 1045, 1045, 
	1045, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1046, 
	1042, 1035, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1044, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1042, 1044, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 
	1043, 1043, 1043, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1046, 1042, 
	1047, 1035, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1044, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1042, 1044, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 
	1048, 1048, 1048, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1048, 1048, 1048, 1048, 1048, 1048, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1048, 1048, 1048, 1048, 1048, 1048, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1046, 1042, 
	1035, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1044, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1035, 1042, 1042, 1042, 1042, 1042, 
	1044, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1049, 1049, 1049, 1049, 1049, 1049, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1049, 1049, 1049, 1049, 1049, 1049, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1046, 1042, 1035, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1044, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1035, 1042, 1042, 1042, 1042, 1042, 1044, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1050, 
	1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 
	1050, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1050, 1050, 1050, 1050, 1050, 1050, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1050, 1050, 1050, 1050, 1050, 1050, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1046, 1042, 1035, 1042, 
	1042, 1042, 1035, 1042, 1042, 1042, 1042, 1044, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1035, 1042, 1042, 1042, 1042, 1042, 1044, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1051, 
	1051, 1051, 1051, 1051, 1051, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1051, 
	1051, 1051, 1051, 1051, 1051, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1046, 1042, 1035, 1042, 1042, 
	1042, 1035, 1042, 1042, 1042, 1042, 1044, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1035, 
	1042, 1042, 1042, 1042, 1042, 1044, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1052, 1052, 
	1052, 1052, 1052, 1052, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1052, 1052, 
	1052, 1052, 1052, 1052, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1046, 1042, 1035, 1042, 1042, 1042, 
	1035, 1042, 1042, 1042, 1042, 1033, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1042, 1033, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1052, 1052, 1052, 
	1052, 1052, 1052, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1052, 1052, 1052, 
	1052, 1052, 1052, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1033, 1042, 1035, 1042, 1042, 1042, 1035, 
	1042, 1042, 1042, 1042, 1053, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1042, 1053, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1054, 1054, 1054, 1054, 1054, 
	1054, 1054, 1054, 1054, 1054, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1054, 1054, 1054, 1054, 
	1054, 1054, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1054, 1054, 1054, 1054, 
	1054, 1054, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1046, 1042, 1035, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1053, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1042, 1053, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1055, 1055, 1055, 1055, 1055, 
	1055, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1055, 1055, 1055, 1055, 1055, 
	1055, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1046, 
	1042, 1035, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1053, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1042, 1053, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 
	1056, 1056, 1056, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1056, 1056, 1056, 1056, 1056, 1056, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1056, 1056, 1056, 1056, 1056, 1056, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1033, 1042, 
	1035, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1053, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1035, 1042, 1042, 1042, 1042, 1042, 
	1053, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 
	1057, 1057, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1057, 1057, 1057, 1057, 1057, 1057, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1057, 1057, 1057, 1057, 1057, 1057, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1033, 1042, 1035, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1053, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1035, 1042, 1042, 1042, 1042, 1042, 1053, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1058, 
	1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 
	1058, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1058, 1058, 1058, 1058, 1058, 1058, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1058, 1058, 1058, 1058, 1058, 1058, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1033, 1042, 1035, 1042, 
	1042, 1042, 1035, 1042, 1042, 1042, 1042, 1053, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1035, 1042, 1042, 1042, 1042, 1042, 1053, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1059, 1059, 
	1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1059, 
	1059, 1059, 1059, 1059, 1059, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1059, 
	1059, 1059, 1059, 1059, 1059, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1033, 1042, 1035, 1042, 1042, 
	1042, 1035, 1042, 1042, 1042, 1042, 1053, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1035, 
	1042, 1042, 1042, 1042, 1042, 1053, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1060, 1060, 1060, 
	1060, 1060, 1060, 1060, 1060, 1060, 1060, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1060, 1060, 
	1060, 1060, 1060, 1060, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1060, 1060, 
	1060, 1060, 1060, 1060, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1033, 1042, 1035, 1042, 1042, 1042, 
	1035, 1042, 1042, 1042, 1042, 1053, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1042, 1053, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1052, 1052, 1052, 
	1052, 1052, 1052, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1052, 1052, 1052, 
	1052, 1052, 1052, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1033, 1042, 1035, 1042, 1042, 1042, 1035, 
	1042, 1042, 1042, 1042, 1053, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1042, 1053, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1061, 1061, 1061, 1061, 1061, 
	1061, 1061, 1061, 1061, 1061, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1061, 1061, 1061, 1061, 
	1061, 1061, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1061, 1061, 1061, 1061, 
	1061, 1061, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1046, 1042, 1035, 1042, 1042, 1042, 1035, 1042, 
	1042, 1042, 1042, 1053, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1042, 1053, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1062, 1062, 1062, 1062, 1062, 
	1062, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1062, 1062, 1062, 1062, 1062, 
	1062, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1046, 
	1042, 1035, 1042, 1042, 1042, 1035, 1042, 1042, 
	1042, 1042, 1053, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1042, 1053, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1063, 1063, 1063, 1063, 1063, 1063, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1063, 1063, 1063, 1063, 1063, 1063, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1046, 1042, 
	1035, 1042, 1042, 1042, 1035, 1042, 1042, 1042, 
	1042, 1053, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1035, 1042, 1042, 1042, 1042, 1042, 
	1053, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1064, 1064, 1064, 1064, 1064, 1064, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1064, 1064, 1064, 1064, 1064, 1064, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1046, 1042, 1035, 
	1042, 1042, 1042, 1035, 1042, 1042, 1042, 1042, 
	1053, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1035, 1042, 1042, 1042, 1042, 1042, 1053, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1052, 1052, 1052, 1052, 1052, 1052, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1052, 1052, 1052, 1052, 1052, 1052, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1046, 1042, 1065, 1066, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1067, 1067, 1067, 1067, 1067, 1067, 
	1067, 1068, 1068, 1068, 1068, 1068, 1068, 1067, 
	1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 
	1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 
	1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 
	1067, 1068, 1068, 1068, 1068, 1068, 1068, 1067, 
	1067, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 284, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 285, 201, 201, 286, 201, 
	284, 201, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 201, 201, 201, 201, 
	283, 201, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 201, 201, 201, 201, 
	201, 283, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 284, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 285, 917, 917, 286, 
	917, 284, 917, 283, 283, 283, 283, 1069, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 917, 917, 917, 
	917, 283, 917, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 917, 917, 917, 
	917, 917, 283, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 284, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 285, 917, 917, 
	286, 917, 284, 917, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 1070, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 917, 917, 
	917, 917, 283, 917, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 917, 917, 
	917, 917, 917, 283, 1071, 1072, 917, 912, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 1073, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 1074, 1075, 
	851, 851, 851, 851, 851, 1076, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1077, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 1078, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 1079, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 1080, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 1081, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1082, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 1083, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	1084, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 1085, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 284, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 201, 201, 
	286, 201, 284, 201, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 201, 201, 
	201, 201, 851, 201, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 201, 201, 
	201, 201, 201, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 1086, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1087, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 1083, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1088, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 1087, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1089, 851, 1090, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 1091, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 1092, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1085, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 1085, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 1093, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1094, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 851, 851, 1095, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 1096, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1085, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 1097, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 1098, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1085, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 1099, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1100, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1101, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 1085, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 1102, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 1092, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 1103, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1085, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	851, 1085, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1104, 851, 1105, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1106, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 1085, 851, 851, 851, 1103, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 1085, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 1107, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1108, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 1101, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 1109, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 886, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1099, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 1085, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 1110, 851, 851, 851, 851, 
	851, 851, 851, 1085, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1111, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 1112, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1113, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1101, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 1114, 
	851, 851, 851, 1115, 851, 851, 851, 851, 
	851, 1116, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 1116, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1085, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1085, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 1117, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 1118, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 1119, 1120, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1085, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 1121, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 1122, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	1123, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1126, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1127, 1124, 
	1124, 1128, 1124, 1126, 1124, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1124, 
	1124, 1124, 1124, 1125, 1124, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 
	1125, 1125, 1125, 1125, 1125, 1125, 1125, 1124, 
	1124, 1124, 1124, 1124, 1125, 903, 1129, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 905, 902, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 1130, 851, 851, 1131, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 1085, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 1096, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	1132, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1133, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1103, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1134, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 886, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 851, 851, 851, 1135, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1136, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 1096, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 1101, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1137, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 1138, 
	851, 851, 851, 851, 851, 851, 851, 1139, 
	851, 851, 851, 851, 851, 851, 851, 1140, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 1103, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 1141, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 1142, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 1110, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 1143, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 895, 896, 896, 896, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 284, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 285, 895, 895, 286, 895, 
	284, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 897, 895, 895, 
	851, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 1110, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 895, 895, 895, 895, 
	895, 851, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 895, 896, 896, 896, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 896, 284, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 285, 895, 895, 286, 
	895, 284, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 897, 895, 
	895, 851, 895, 851, 851, 851, 851, 851, 
	851, 851, 1144, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 895, 895, 895, 
	895, 895, 851, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 895, 896, 896, 
	896, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 896, 284, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 285, 895, 895, 
	286, 895, 284, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 897, 
	895, 895, 851, 895, 851, 851, 851, 851, 
	1096, 851, 851, 851, 1145, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 895, 895, 
	895, 895, 895, 851, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 895, 896, 
	896, 896, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 896, 284, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 285, 895, 
	895, 286, 895, 284, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	897, 895, 895, 851, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	1146, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 895, 
	895, 895, 895, 895, 851, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 895, 
	896, 896, 896, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 896, 284, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 285, 
	895, 895, 286, 895, 284, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 897, 895, 895, 851, 895, 851, 851, 
	851, 851, 1110, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	895, 895, 895, 895, 895, 851, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	895, 896, 896, 896, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 896, 284, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	285, 895, 895, 286, 895, 284, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 897, 895, 895, 851, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 1147, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 895, 895, 895, 895, 895, 851, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 895, 896, 896, 896, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 896, 
	284, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 285, 895, 895, 286, 895, 284, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 897, 895, 895, 851, 895, 
	851, 851, 851, 851, 1148, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 895, 895, 895, 895, 895, 851, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 896, 895, 896, 896, 896, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	896, 284, 895, 895, 895, 895, 895, 895, 
	895, 895, 895, 895, 895, 895, 895, 895, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 285, 895, 895, 286, 895, 284, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 897, 895, 895, 851, 
	895, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 851, 1090, 851, 851, 851, 
	851, 851, 851, 851, 851, 851, 851, 851, 
	851, 851, 851, 895, 895, 895, 895, 895, 
	851, 1149, 212, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 927, 917, 1151, 1150, 1150, 1150, 1151, 
	1150, 1150, 1150, 1150, 1152, 1153, 1152, 1152, 
	1152, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1151, 1150, 1150, 
	1150, 1150, 1150, 1152, 1150, 1150, 1154, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1155, 
	1150, 1152, 1156, 1152, 1152, 1152, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1152, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 
	1162, 1164, 1166, 1167, 1167, 1167, 1166, 1167, 
	1167, 1167, 1167, 1168, 1169, 1168, 1168, 1168, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1166, 1167, 1167, 1167, 
	1167, 1167, 1168, 1167, 1170, 1171, 1167, 1167, 
	1167, 1170, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1167, 1172, 1167, 
	1167, 1165, 1167, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1167, 1167, 1167, 
	1167, 1167, 1165, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 292, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 293, 1173, 1173, 
	1173, 1173, 292, 1173, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 1173, 1173, 
	1173, 1173, 291, 1173, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 1173, 1173, 
	1173, 1173, 1173, 291, 1168, 1174, 1168, 1168, 
	1168, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 
	1174, 1174, 1174, 1168, 1174, 1175, 1176, 1177, 
	1178, 1179, 1180, 1173, 1181, 1183, 1184, 1184, 
	1184, 1183, 1184, 1184, 1184, 1184, 1185, 1186, 
	1185, 1185, 1185, 1184, 1184, 1184, 1184, 1184, 
	1184, 1184, 1184, 1184, 1184, 1184, 1184, 1183, 
	1184, 1184, 1184, 1184, 1184, 1185, 1187, 1188, 
	1189, 1190, 1191, 1192, 1188, 1193, 1194, 1195, 
	1191, 1196, 1197, 1198, 1191, 1199, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201, 
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 
	1208, 1208, 1210, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1211, 1212, 1213, 1191, 1214, 1188, 1215, 1216, 
	1217, 1218, 1219, 1220, 1182, 1182, 1221, 1182, 
	1182, 1182, 1222, 1223, 1224, 1182, 1182, 1225, 
	1226, 1227, 1228, 1182, 1229, 1182, 1230, 1182, 
	1231, 1232, 1233, 1234, 1184, 1182, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 1235, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	301, 301, 301, 301, 301, 1235, 301, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 301, 301, 301, 301, 1182, 301, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 301, 301, 301, 301, 301, 1182, 1237, 
	1236, 1238, 1185, 1239, 1185, 1185, 1185, 1239, 
	1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 
	1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 
	1239, 1185, 1239, 1240, 1242, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1242, 1241, 1243, 
	1244, 1245, 1246, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 296, 296, 1247, 296, 
	1247, 296, 296, 1247, 1247, 296, 296, 296, 
	1248, 296, 296, 1249, 1249, 1249, 1249, 1249, 
	1249, 1249, 1249, 1249, 1249, 296, 296, 296, 
	296, 296, 296, 296, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 1247, 296, 
	1247, 1247, 314, 296, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 1247, 1247, 
	1247, 296, 1247, 314, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 1250, 
	1250, 1250, 1250, 314, 1250, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 1250, 
	1250, 1250, 1250, 1250, 314, 1249, 1249, 1249, 
	1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250, 
	1251, 301, 1191, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1253, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1251, 1252, 1254, 1255, 1191, 1256, 1256, 
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 
	1251, 1256, 1251, 1257, 1252, 1259, 1258, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 1260, 1258, 1196, 1261, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1263, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1264, 1262, 1262, 1262, 
	1262, 1262, 1263, 1262, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 298, 1262, 1265, 301, 1265, 
	1265, 1265, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 1265, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	1266, 301, 1268, 1267, 1268, 1268, 1268, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1268, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1269, 1267, 1271, 
	1270, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1273, 1270, 1274, 1275, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1276, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1277, 1270, 1270, 1270, 1270, 1270, 1270, 
	1278, 1270, 1270, 1273, 1270, 1274, 1275, 1270, 
	1270, 1270, 1279, 1270, 1270, 1270, 1270, 1270, 
	1276, 1270, 1270, 1280, 1270, 1270, 1270, 1270, 
	1270, 1277, 1270, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 1281, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1282, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1281, 1281, 1283, 1281, 1281, 1281, 1281, 1281, 
	1282, 1281, 1281, 1281, 1284, 1281, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1285, 1281, 1286, 
	301, 1286, 301, 301, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 301, 304, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 
	1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 
	1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 
	1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 
	1287, 1287, 1287, 1287, 1287, 1287, 1286, 1287, 
	1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 
	1288, 1287, 1290, 1289, 1291, 1293, 1292, 1292, 
	1292, 1294, 1292, 1295, 1296, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1278, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1279, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1280, 
	1270, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1298, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1279, 1270, 1270, 1270, 1270, 1270, 
	1270, 1270, 1270, 1280, 1270, 1300, 1300, 1300, 
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1301, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1302, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303, 
	1299, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 
	1300, 1300, 1300, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1304, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1302, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1303, 1299, 1302, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1303, 1299, 
	1306, 1305, 1307, 1309, 1308, 1308, 1308, 1310, 
	1308, 1312, 1311, 1313, 1314, 1316, 1316, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1317, 1315, 1315, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1318, 1315, 
	1315, 1315, 1315, 1315, 1315, 1315, 1315, 1319, 
	1315, 1320, 1320, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1321, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1302, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1303, 1299, 1320, 1320, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1304, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1302, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303, 
	1299, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 
	1323, 1323, 1323, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1324, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1325, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1326, 1322, 1328, 1328, 1328, 
	1328, 1328, 1328, 1328, 1328, 1328, 1328, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 
	1327, 1327, 1327, 1327, 1329, 1327, 1327, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1330, 1327, 
	1327, 1327, 1327, 1327, 1327, 1327, 1327, 1331, 
	1327, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 
	1333, 1333, 1333, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1334, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 
	1332, 1332, 1335, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1336, 1332, 1337, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1337, 1337, 
	1337, 1337, 1337, 1337, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1338, 1299, 1337, 1337, 
	1337, 1337, 1337, 1337, 1299, 1299, 1302, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303, 
	1299, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1337, 1337, 1337, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1337, 1337, 1337, 1337, 1337, 1337, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1304, 1299, 1337, 1337, 1337, 1337, 1337, 1337, 
	1299, 1299, 1302, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1303, 1299, 1340, 1339, 1341, 
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 
	1341, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1342, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1343, 1339, 
	1339, 1339, 1339, 1339, 1342, 1339, 1339, 1339, 
	1344, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1345, 1339, 1346, 1346, 1346, 1346, 1346, 
	1346, 1346, 1346, 1346, 1346, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1347, 1339, 1339, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1344, 1339, 1339, 1339, 
	1339, 1339, 1339, 1339, 1339, 1345, 1339, 1348, 
	1299, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1350, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1351, 1299, 1299, 1299, 1299, 1299, 1350, 1299, 
	1299, 1299, 1302, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1303, 1299, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1304, 1299, 1299, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1302, 1299, 
	1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303, 
	1299, 1253, 1261, 1191, 1352, 1252, 1242, 1252, 
	1353, 1354, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 
	1261, 1242, 1261, 1242, 1252, 1242, 1191, 1252, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 1247, 1247, 1247, 1247, 1247, 1247, 
	1355, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 1247, 1247, 1247, 1247, 314, 
	1247, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 1247, 1247, 1247, 1247, 1247, 
	314, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 1235, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1356, 301, 301, 301, 301, 
	1235, 301, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 301, 301, 301, 301, 
	1208, 301, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 301, 301, 301, 301, 
	301, 1208, 1357, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1235, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1356, 1358, 1358, 
	1358, 1358, 1235, 1358, 1208, 1208, 1208, 1208, 
	1359, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1358, 1358, 
	1358, 1358, 1208, 1358, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1358, 1358, 
	1358, 1358, 1358, 1208, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1235, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1356, 1358, 
	1358, 1358, 1358, 1235, 1358, 1208, 1208, 1208, 
	1208, 1208, 1208, 1360, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1358, 
	1358, 1358, 1358, 1208, 1358, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1358, 
	1358, 1358, 1358, 1358, 1208, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1235, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1356, 
	1358, 1358, 1358, 1358, 1235, 1358, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1361, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1358, 1358, 1358, 1358, 1208, 1358, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1358, 1358, 1358, 1358, 1358, 1208, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1235, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1356, 1358, 1358, 1358, 1358, 1235, 1358, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1362, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1358, 1358, 1358, 1358, 1208, 1358, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1358, 1358, 1358, 1358, 1358, 1208, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1235, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1356, 1358, 1358, 1358, 1358, 1235, 1358, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1363, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1358, 1358, 1358, 1358, 1208, 1358, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1358, 1358, 1358, 1358, 1358, 1208, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1235, 1358, 1358, 1358, 1358, 1358, 1358, 
	1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1356, 1358, 1358, 1358, 1358, 1235, 
	1358, 1208, 1208, 1208, 1362, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1358, 1358, 1358, 1358, 1208, 
	1358, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1358, 1358, 1358, 1358, 1358, 
	1208, 1364, 1366, 1365, 1367, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1369, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1370, 1371, 1182, 1182, 1182, 
	1182, 1182, 1372, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1373, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1374, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1375, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1376, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1377, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1378, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1379, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1380, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1381, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1382, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1383, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1384, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1385, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1386, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1387, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1383, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1388, 1182, 1389, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1390, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1391, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1392, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1393, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1394, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1395, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1396, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1397, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1393, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1398, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1399, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1400, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1401, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1402, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1403, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1393, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1404, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1405, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1406, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 1407, 316, 317, 316, 316, 316, 1407, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 316, 1235, 1407, 318, 1407, 1407, 1407, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1407, 1407, 319, 1407, 1407, 
	1235, 1407, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1407, 320, 1407, 1407, 
	1182, 1407, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1407, 1407, 1407, 1407, 
	1407, 1182, 333, 334, 333, 333, 333, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 333, 332, 332, 335, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 338, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 337, 332, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1409, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1410, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1411, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 
	1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 
	1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 
	1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 
	1412, 1412, 1235, 1412, 1412, 1412, 1412, 1412, 
	1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 
	1412, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1412, 1412, 1412, 1412, 1412, 
	1235, 1412, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1412, 1412, 1412, 1412, 
	1182, 1412, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1413, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1412, 1412, 1412, 1412, 
	1412, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1414, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1415, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1416, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1417, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1418, 1182, 1419, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1420, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1393, 1182, 1182, 
	1182, 1421, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1393, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1386, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1422, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1423, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1403, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1424, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1224, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1425, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1426, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1386, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1393, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1427, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1393, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1428, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1429, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1430, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1403, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1431, 1182, 1182, 1182, 
	1432, 1182, 1182, 1182, 1182, 1182, 1433, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1434, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1400, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1386, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1435, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1436, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1437, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1438, 1439, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1386, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1440, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1441, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1427, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1442, 1182, 1182, 1443, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1386, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1444, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1400, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1445, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1446, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1447, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1386, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1448, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1449, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1435, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1450, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1451, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1397, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1426, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1452, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1453, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1454, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1455, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1456, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1392, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1457, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1458, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1427, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1459, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1427, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1182, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1460, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1182, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1182, 1368, 1182, 1182, 1182, 1182, 1397, 1182, 
	1182, 1182, 1461, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1182, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1368, 1368, 1368, 1368, 
	1368, 1235, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1182, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1462, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1182, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1368, 1368, 1368, 
	1368, 1368, 1235, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1182, 1368, 1182, 1182, 1182, 1182, 
	1427, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1182, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1368, 1368, 
	1368, 1368, 1368, 1235, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1182, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1463, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1182, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1368, 
	1368, 1368, 1368, 1368, 1235, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1182, 1368, 1182, 1182, 
	1182, 1182, 1464, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1182, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1235, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1368, 1368, 1368, 1368, 1368, 1235, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1182, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1465, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1182, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1235, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1368, 1368, 1368, 1368, 1368, 1235, 1368, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1182, 1368, 
	1182, 1182, 1182, 1435, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1368, 1368, 1368, 1368, 1368, 1182, 
	1466, 1251, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1191, 1241, 1467, 1469, 1468, 1469, 1469, 1469, 
	1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 
	1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 
	1468, 1468, 1469, 1468, 1468, 1468, 1468, 1468, 
	1470, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 
	344, 1468, 342, 1471, 342, 342, 342, 1471, 
	1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 
	1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 
	1471, 342, 1471, 1471, 1471, 1471, 1471, 343, 
	1471, 1471, 1471, 1471, 1471, 1471, 1471, 344, 
	1471, 345, 1471, 1473, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1474, 1472, 
	1473, 1472, 1473, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1476, 1472, 1473, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1477, 1472, 1473, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 
	1472, 1472, 1472, 1472, 1472, 1472, 1472, 1478, 
	1472, 1480, 1478, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	181, 2, 3, 4, 187, 6, 7, 8, 
	9, 10, 181, 181, 190, 193, 190, 12, 
	194, 14, 190, 201, 202, 205, 206, 212, 
	207, 208, 209, 19, 210, 211, 214, 216, 
	217, 218, 219, 220, 25, 18, 203, 204, 
	27, 243, 244, 246, 248, 246, 30, 249, 
	32, 246, 256, 257, 260, 261, 267, 262, 
	263, 264, 37, 265, 266, 269, 271, 272, 
	273, 274, 275, 43, 36, 258, 259, 45, 
	298, 299, 306, 308, 306, 48, 309, 50, 
	311, 314, 311, 52, 315, 54, 321, 320, 
	0, 56, 322, 323, 324, 58, 325, 326, 
	326, 326, 326, 439, 61, 62, 63, 439, 
	467, 64, 65, 467, 467, 471, 471, 69, 
	64, 70, 469, 470, 472, 473, 471, 467, 
	474, 475, 477, 66, 67, 478, 479, 68, 
	471, 71, 72, 77, 84, 481, 482, 70, 
	469, 470, 472, 473, 471, 467, 474, 475, 
	477, 66, 67, 478, 479, 68, 71, 72, 
	77, 84, 481, 482, 480, 73, 74, 75, 
	76, 78, 79, 82, 80, 81, 83, 85, 
	86, 467, 88, 89, 90, 92, 95, 93, 
	94, 96, 98, 498, 498, 498, 499, 100, 
	501, 101, 502, 102, 499, 100, 501, 101, 
	502, 536, 103, 536, 104, 105, 103, 536, 
	104, 536, 536, 536, 108, 109, 110, 111, 
	547, 536, 536, 552, 536, 114, 115, 116, 
	536, 119, 114, 115, 116, 536, 119, 117, 
	117, 115, 116, 558, 118, 117, 117, 115, 
	116, 558, 118, 115, 536, 574, 536, 121, 
	575, 581, 125, 590, 591, 130, 131, 125, 
	126, 589, 126, 589, 536, 127, 128, 129, 
	592, 132, 536, 606, 607, 610, 611, 617, 
	612, 613, 614, 137, 615, 616, 619, 621, 
	622, 623, 624, 625, 143, 136, 608, 609, 
	145, 661, 662, 147, 538, 106, 540, 149, 
	150, 664, 766, 152, 153, 154, 766, 774, 
	774, 774, 157, 795, 794, 774, 797, 799, 
	801, 774, 163, 164, 165, 805, 774, 167, 
	168, 816, 784, 838, 171, 172, 173, 177, 
	178, 171, 172, 173, 177, 178, 174, 174, 
	172, 173, 175, 176, 174, 174, 172, 173, 
	175, 176, 885, 172, 774, 954, 179, 180, 
	954, 954, 181, 181, 182, 183, 184, 186, 
	188, 189, 181, 181, 181, 185, 181, 185, 
	181, 1, 181, 181, 181, 5, 190, 190, 
	191, 190, 192, 195, 190, 190, 11, 13, 
	190, 190, 190, 196, 197, 198, 15, 21, 
	26, 221, 28, 190, 190, 190, 199, 200, 
	190, 16, 190, 190, 190, 17, 190, 190, 
	190, 20, 213, 215, 22, 190, 190, 23, 
	24, 190, 222, 226, 223, 224, 225, 190, 
	190, 227, 228, 231, 233, 242, 229, 230, 
	190, 232, 234, 236, 235, 190, 237, 238, 
	239, 240, 241, 190, 190, 190, 245, 246, 
	246, 246, 247, 250, 246, 29, 31, 246, 
	246, 246, 251, 252, 253, 33, 39, 44, 
	276, 46, 246, 246, 246, 254, 255, 246, 
	34, 246, 246, 246, 35, 246, 246, 246, 
	38, 268, 270, 40, 246, 246, 41, 42, 
	246, 277, 281, 278, 279, 280, 246, 246, 
	282, 283, 286, 288, 297, 284, 285, 246, 
	287, 289, 291, 290, 246, 292, 293, 294, 
	295, 296, 246, 246, 246, 300, 301, 301, 
	302, 301, 303, 301, 301, 301, 304, 304, 
	304, 305, 304, 304, 304, 306, 306, 306, 
	307, 306, 47, 49, 306, 306, 310, 310, 
	310, 311, 311, 312, 311, 313, 311, 311, 
	51, 53, 311, 311, 316, 316, 317, 316, 
	316, 318, 319, 318, 55, 57, 320, 320, 
	320, 320, 327, 326, 326, 328, 329, 330, 
	331, 333, 336, 337, 338, 339, 326, 340, 
	341, 343, 345, 346, 347, 351, 353, 354, 
	355, 371, 376, 383, 388, 395, 402, 405, 
	406, 410, 404, 414, 422, 426, 428, 433, 
	435, 438, 326, 326, 326, 326, 326, 326, 
	332, 326, 332, 326, 334, 59, 335, 326, 
	60, 326, 326, 342, 344, 326, 348, 349, 
	350, 346, 352, 326, 356, 357, 366, 369, 
	358, 359, 360, 361, 362, 363, 364, 365, 
	327, 367, 368, 370, 372, 375, 373, 374, 
	377, 380, 378, 379, 381, 382, 384, 386, 
	385, 387, 389, 390, 326, 391, 392, 393, 
	394, 326, 396, 399, 397, 398, 400, 401, 
	403, 407, 408, 409, 411, 413, 412, 415, 
	416, 417, 419, 418, 420, 421, 423, 424, 
	425, 427, 429, 430, 431, 432, 434, 436, 
	437, 440, 439, 439, 441, 442, 444, 439, 
	439, 439, 443, 439, 443, 445, 439, 447, 
	446, 446, 450, 451, 452, 453, 446, 455, 
	456, 457, 458, 460, 462, 463, 464, 465, 
	466, 446, 448, 446, 449, 446, 446, 446, 
	446, 446, 454, 446, 454, 459, 446, 461, 
	446, 467, 467, 468, 483, 484, 470, 486, 
	487, 474, 488, 489, 490, 491, 492, 494, 
	495, 496, 497, 467, 467, 467, 467, 467, 
	467, 471, 476, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 485, 467, 485, 467, 
	467, 467, 467, 493, 467, 87, 91, 97, 
	498, 500, 503, 99, 498, 498, 499, 504, 
	504, 505, 506, 508, 510, 511, 504, 504, 
	507, 504, 507, 504, 509, 504, 504, 504, 
	513, 512, 512, 514, 515, 516, 518, 520, 
	521, 526, 533, 512, 512, 512, 512, 517, 
	512, 517, 512, 519, 512, 512, 513, 522, 
	523, 524, 525, 527, 528, 531, 529, 530, 
	532, 534, 535, 537, 536, 545, 546, 548, 
	549, 551, 553, 554, 555, 557, 559, 560, 
	562, 563, 588, 594, 595, 596, 664, 665, 
	666, 667, 668, 556, 670, 687, 692, 699, 
	704, 706, 712, 715, 716, 720, 714, 724, 
	735, 739, 742, 750, 754, 757, 758, 536, 
	103, 104, 536, 106, 539, 536, 536, 541, 
	543, 544, 536, 542, 536, 536, 536, 536, 
	536, 107, 536, 536, 536, 536, 536, 550, 
	536, 550, 536, 536, 112, 536, 536, 113, 
	536, 536, 556, 536, 561, 536, 536, 536, 
	564, 573, 536, 120, 576, 577, 578, 536, 
	579, 122, 582, 583, 123, 586, 587, 536, 
	565, 567, 536, 566, 536, 536, 568, 571, 
	572, 536, 569, 570, 536, 536, 536, 536, 
	536, 536, 580, 536, 574, 584, 585, 536, 
	584, 536, 574, 584, 124, 593, 536, 536, 
	536, 597, 536, 536, 536, 598, 600, 536, 
	599, 536, 599, 536, 601, 602, 603, 133, 
	139, 144, 626, 146, 536, 536, 536, 604, 
	605, 536, 134, 536, 536, 536, 135, 536, 
	536, 536, 138, 618, 620, 140, 536, 536, 
	141, 142, 536, 627, 631, 628, 629, 630, 
	536, 536, 632, 633, 636, 647, 660, 634, 
	635, 536, 637, 638, 639, 641, 640, 536, 
	642, 643, 644, 645, 646, 648, 655, 649, 
	650, 651, 652, 653, 654, 656, 657, 658, 
	659, 536, 536, 536, 663, 148, 151, 536, 
	669, 671, 672, 682, 685, 673, 674, 675, 
	676, 677, 678, 679, 680, 681, 683, 684, 
	686, 688, 691, 689, 690, 693, 696, 694, 
	695, 697, 698, 700, 702, 701, 703, 705, 
	707, 709, 708, 710, 711, 713, 681, 717, 
	718, 719, 721, 723, 722, 725, 726, 727, 
	732, 728, 729, 730, 536, 537, 538, 106, 
	731, 543, 733, 734, 736, 737, 738, 740, 
	741, 743, 744, 745, 748, 746, 747, 749, 
	751, 752, 753, 755, 756, 536, 759, 759, 
	760, 761, 762, 764, 759, 759, 759, 763, 
	759, 763, 759, 765, 759, 767, 766, 766, 
	768, 769, 766, 770, 772, 766, 766, 766, 
	766, 771, 766, 771, 773, 766, 775, 774, 
	774, 778, 779, 780, 774, 781, 783, 786, 
	787, 788, 789, 790, 774, 791, 792, 798, 
	826, 830, 774, 831, 833, 835, 774, 836, 
	837, 839, 843, 845, 846, 774, 848, 866, 
	871, 878, 886, 893, 900, 905, 906, 910, 
	904, 915, 925, 931, 934, 943, 947, 951, 
	952, 953, 786, 776, 774, 777, 774, 774, 
	774, 774, 774, 774, 782, 774, 782, 774, 
	155, 785, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 793, 796, 774, 774, 156, 
	158, 796, 159, 774, 796, 159, 774, 160, 
	807, 818, 821, 800, 822, 823, 808, 812, 
	814, 774, 800, 160, 802, 804, 161, 774, 
	802, 774, 803, 774, 774, 162, 806, 774, 
	774, 809, 811, 774, 809, 810, 812, 814, 
	811, 774, 813, 774, 774, 815, 817, 774, 
	166, 774, 774, 774, 819, 811, 812, 814, 
	819, 820, 774, 809, 811, 812, 814, 774, 
	809, 811, 812, 814, 774, 824, 811, 812, 
	814, 824, 825, 774, 160, 826, 800, 827, 
	812, 814, 828, 811, 160, 828, 800, 829, 
	832, 834, 774, 169, 170, 774, 774, 840, 
	841, 842, 837, 844, 774, 774, 847, 774, 
	774, 849, 850, 859, 864, 851, 852, 853, 
	854, 855, 856, 857, 858, 775, 860, 861, 
	862, 863, 775, 865, 867, 870, 868, 869, 
	775, 775, 872, 875, 873, 874, 876, 877, 
	775, 879, 881, 880, 882, 883, 884, 774, 
	774, 887, 775, 888, 774, 889, 890, 891, 
	892, 776, 894, 897, 895, 896, 898, 899, 
	901, 902, 903, 775, 907, 908, 909, 911, 
	913, 914, 912, 775, 916, 917, 918, 921, 
	919, 920, 922, 923, 924, 926, 928, 927, 
	929, 930, 932, 933, 935, 936, 938, 941, 
	937, 939, 940, 942, 944, 945, 946, 948, 
	949, 950, 774, 774, 954, 955, 956, 954, 
	958, 957, 959, 957, 960, 961, 962, 957, 
	957
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	14, 0, 15, 0, 0, 0, 0, 16, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	18, 19, 20, 21, 0, 0, 0, 22, 
	23, 0, 0, 24, 25, 26, 27, 28, 
	29, 29, 30, 31, 29, 32, 31, 33, 
	31, 29, 29, 30, 29, 34, 29, 29, 
	35, 29, 29, 29, 29, 29, 29, 0, 
	36, 37, 0, 38, 37, 39, 37, 0, 
	0, 36, 0, 40, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 41, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 42, 43, 44, 45, 0, 
	0, 0, 45, 28, 46, 29, 29, 29, 
	46, 47, 0, 48, 0, 28, 29, 49, 
	29, 50, 51, 52, 0, 0, 0, 0, 
	0, 53, 54, 0, 55, 0, 28, 0, 
	56, 0, 29, 57, 29, 58, 29, 59, 
	60, 61, 60, 62, 60, 0, 63, 64, 
	63, 65, 63, 66, 67, 0, 68, 0, 
	0, 0, 0, 69, 69, 0, 0, 70, 
	70, 71, 0, 28, 72, 0, 0, 0, 
	69, 0, 73, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 0, 74, 0, 0, 0, 
	0, 74, 75, 0, 0, 0, 76, 77, 
	78, 79, 0, 7, 7, 80, 81, 82, 
	82, 83, 0, 0, 0, 0, 84, 0, 
	0, 0, 0, 0, 0, 28, 0, 0, 
	0, 29, 57, 29, 29, 29, 59, 60, 
	61, 60, 60, 60, 0, 63, 64, 63, 
	63, 63, 85, 66, 86, 87, 0, 88, 
	89, 90, 93, 94, 0, 28, 0, 7, 
	0, 7, 95, 96, 97, 59, 98, 0, 
	99, 0, 100, 101, 102, 0, 103, 104, 
	0, 105, 7, 7, 106, 107, 0, 0, 
	108, 109, 110, 111, 111, 111, 111, 111, 
	111, 111, 111, 112, 113, 114, 0, 0, 
	115, 0, 116, 117, 118, 0, 119, 120, 
	121, 0, 7, 0, 0, 122, 123, 0, 
	28, 124, 0, 0, 0, 0, 0, 125, 
	126, 0, 0, 0, 0, 0, 0, 0, 
	127, 0, 0, 0, 0, 128, 0, 0, 
	0, 0, 0, 129, 130, 131, 0, 132, 
	133, 134, 7, 7, 135, 0, 0, 136, 
	137, 138, 111, 111, 111, 111, 111, 111, 
	111, 111, 139, 140, 141, 0, 0, 142, 
	0, 143, 144, 145, 0, 146, 147, 148, 
	0, 7, 0, 0, 149, 150, 0, 28, 
	151, 0, 0, 0, 0, 0, 152, 153, 
	0, 0, 0, 0, 0, 0, 0, 154, 
	0, 0, 0, 0, 155, 0, 0, 0, 
	0, 0, 156, 157, 158, 0, 159, 160, 
	0, 161, 0, 162, 163, 164, 165, 166, 
	167, 0, 168, 169, 170, 171, 172, 173, 
	7, 174, 0, 0, 175, 176, 177, 178, 
	179, 180, 181, 0, 182, 7, 183, 184, 
	0, 0, 185, 186, 187, 188, 0, 189, 
	190, 191, 0, 192, 0, 0, 193, 194, 
	195, 196, 197, 198, 199, 0, 28, 0, 
	0, 7, 7, 0, 0, 0, 200, 0, 
	0, 0, 0, 201, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 202, 203, 204, 205, 206, 207, 
	59, 208, 0, 209, 0, 0, 0, 210, 
	0, 211, 212, 0, 0, 213, 0, 0, 
	0, 214, 0, 215, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	214, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 216, 0, 0, 0, 
	0, 217, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 218, 219, 0, 0, 0, 220, 
	221, 222, 59, 223, 0, 28, 224, 0, 
	225, 226, 0, 28, 0, 0, 227, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 228, 0, 229, 0, 230, 231, 232, 
	233, 234, 59, 235, 0, 0, 236, 0, 
	237, 238, 239, 240, 28, 0, 27, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 241, 242, 243, 244, 245, 
	246, 247, 0, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 59, 257, 0, 258, 
	259, 260, 261, 262, 263, 0, 0, 0, 
	264, 7, 7, 0, 265, 266, 267, 268, 
	269, 0, 0, 0, 0, 0, 270, 271, 
	59, 272, 0, 273, 28, 274, 275, 276, 
	277, 278, 279, 0, 28, 0, 0, 0, 
	0, 0, 0, 280, 281, 282, 283, 59, 
	284, 0, 285, 28, 286, 287, 288, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 289, 290, 0, 8, 0, 
	0, 7, 291, 0, 0, 291, 291, 0, 
	0, 7, 292, 0, 292, 0, 292, 292, 
	292, 0, 0, 292, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 0, 292, 293, 
	294, 294, 295, 296, 0, 297, 298, 0, 
	74, 0, 299, 0, 300, 301, 302, 303, 
	304, 29, 305, 306, 307, 308, 309, 59, 
	310, 0, 311, 312, 0, 313, 314, 0, 
	315, 316, 291, 317, 0, 318, 319, 320, 
	0, 0, 321, 0, 0, 0, 0, 322, 
	0, 0, 0, 0, 0, 0, 0, 323, 
	0, 0, 324, 0, 325, 326, 0, 0, 
	0, 327, 0, 0, 328, 329, 330, 331, 
	332, 333, 0, 334, 335, 335, 0, 336, 
	0, 337, 338, 338, 0, 0, 339, 340, 
	341, 0, 342, 343, 344, 0, 7, 345, 
	346, 347, 0, 348, 111, 111, 111, 111, 
	111, 111, 111, 111, 349, 350, 351, 0, 
	0, 352, 0, 353, 354, 355, 0, 356, 
	357, 358, 0, 7, 0, 0, 359, 360, 
	0, 28, 361, 0, 0, 0, 0, 0, 
	362, 363, 0, 0, 0, 0, 0, 0, 
	0, 364, 0, 0, 0, 0, 0, 365, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 366, 367, 368, 0, 0, 0, 369, 
	28, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 74, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 370, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 371, 372, 373, 374, 375, 
	375, 371, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 376, 377, 378, 
	0, 28, 0, 0, 379, 380, 381, 59, 
	382, 0, 383, 28, 384, 7, 385, 386, 
	0, 28, 387, 0, 0, 388, 389, 390, 
	391, 59, 392, 0, 28, 393, 394, 395, 
	396, 0, 28, 0, 397, 0, 7, 398, 
	0, 0, 0, 0, 399, 0, 0, 400, 
	400, 0, 401, 0, 0, 0, 402, 7, 
	403, 403, 403, 0, 0, 404, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 405, 406, 407, 0, 408, 409, 
	410, 411, 412, 413, 59, 414, 0, 415, 
	0, 0, 416, 417, 418, 419, 420, 421, 
	422, 423, 424, 0, 425, 426, 427, 0, 
	0, 428, 0, 429, 430, 29, 431, 432, 
	433, 0, 0, 434, 0, 0, 433, 435, 
	435, 436, 437, 0, 438, 439, 0, 440, 
	441, 442, 0, 443, 444, 0, 0, 445, 
	446, 433, 433, 447, 0, 0, 448, 448, 
	0, 449, 0, 450, 451, 7, 0, 452, 
	0, 453, 454, 455, 456, 456, 457, 457, 
	0, 0, 458, 459, 459, 460, 460, 461, 
	462, 462, 463, 463, 464, 465, 465, 466, 
	466, 0, 0, 467, 468, 469, 470, 471, 
	472, 472, 469, 471, 473, 400, 474, 0, 
	0, 0, 475, 0, 0, 476, 477, 403, 
	403, 403, 478, 403, 479, 480, 28, 481, 
	482, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 483, 0, 0, 
	0, 0, 478, 0, 0, 0, 0, 0, 
	484, 485, 0, 0, 0, 0, 0, 0, 
	486, 0, 0, 0, 0, 0, 485, 487, 
	488, 0, 489, 0, 490, 0, 0, 0, 
	0, 491, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 492, 0, 0, 0, 0, 
	0, 0, 0, 491, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 493, 494, 495, 7, 88, 496, 
	0, 497, 0, 498, 0, 0, 0, 499, 
	500
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 91, 0, 0, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 91, 0, 0, 
	91, 0, 91, 0, 0, 0, 91, 91, 
	0, 0, 0, 0, 91, 0, 91, 0, 
	91, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 91, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 91, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 91, 0, 0, 0, 0, 0, 
	91, 0, 0, 0, 0, 0, 0, 0, 
	91, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	91, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 91, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 91, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 91, 0, 0, 91, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 92, 0, 0, 
	92, 0, 92, 0, 0, 0, 92, 92, 
	0, 0, 0, 0, 92, 0, 92, 0, 
	92, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 92, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 92, 0, 0, 0, 0, 0, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	92, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 92, 0, 0, 92, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 81, 81, 81, 81, 0, 
	0, 0, 0, 96, 98, 100, 100, 100, 
	105, 105, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 180, 182, 182, 182, 194, 
	194, 194, 202, 204, 204, 204, 204, 204, 
	210, 202, 202, 202, 202, 202, 202, 202, 
	237, 237, 237, 237, 237, 237, 202, 253, 
	202, 253, 237, 237, 202, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 202, 237, 237, 237, 237, 
	291, 291, 291, 296, 298, 298, 298, 302, 
	302, 302, 306, 306, 306, 306, 311, 311, 
	311, 296, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 342, 342, 0, 355, 356, 
	357, 359, 361, 363, 361, 361, 0, 373, 
	374, 378, 378, 379, 388, 389, 390, 390, 
	390, 393, 393, 395, 396, 397, 397, 397, 
	399, 400, 401, 401, 397, 393, 393, 406, 
	407, 407, 407, 407, 407, 410, 410, 410, 
	410, 416, 417, 417, 417, 417, 425, 417, 
	417, 417, 417, 430, 417, 417, 417, 417, 
	417, 417, 436, 437, 438, 438, 0, 445, 
	449, 449, 450, 459, 460, 461, 461, 461, 
	464, 464, 466, 467, 468, 468, 468, 470, 
	471, 472, 472, 468, 464, 464, 477, 478, 
	478, 478, 478, 478, 481, 481, 481, 481, 
	487, 488, 488, 488, 488, 496, 488, 488, 
	488, 488, 501, 488, 488, 488, 488, 488, 
	488, 507, 508, 509, 509, 0, 516, 517, 
	0, 523, 0, 530, 534, 534, 0, 0, 
	543, 544, 548, 548, 0, 553, 0, 556, 
	0, 559, 559, 560, 561, 562, 0, 603, 
	605, 606, 607, 608, 610, 612, 616, 616, 
	607, 607, 607, 607, 618, 607, 607, 612, 
	607, 607, 603, 622, 622, 622, 622, 622, 
	622, 612, 612, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 661, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 628, 628, 
	628, 628, 628, 628, 628, 628, 607, 0, 
	704, 705, 706, 708, 704, 711, 0, 730, 
	732, 734, 735, 736, 737, 738, 740, 737, 
	737, 737, 737, 737, 743, 737, 737, 745, 
	743, 743, 737, 0, 764, 765, 105, 105, 
	768, 769, 105, 765, 765, 772, 774, 777, 
	765, 778, 765, 779, 780, 782, 784, 765, 
	772, 785, 785, 774, 785, 789, 785, 785, 
	785, 785, 0, 180, 797, 798, 797, 797, 
	0, 807, 808, 810, 812, 814, 812, 816, 
	0, 828, 829, 830, 831, 833, 835, 837, 
	838, 838, 838, 838, 838, 838, 838, 838, 
	838, 838, 838, 838, 838, 838, 838, 838, 
	0, 896, 899, 902, 903, 907, 909, 910, 
	911, 912, 913, 915, 918, 919, 921, 923, 
	926, 927, 929, 930, 202, 927, 932, 927, 
	918, 934, 918, 918, 952, 955, 957, 958, 
	962, 965, 966, 967, 968, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 972, 
	976, 978, 952, 952, 918, 983, 984, 984, 
	984, 918, 918, 918, 985, 992, 992, 994, 
	996, 1005, 1006, 1007, 1007, 1007, 1010, 1010, 
	1012, 1013, 1014, 1014, 1014, 1016, 1017, 1018, 
	1018, 1014, 1010, 1010, 1023, 1024, 1024, 1024, 
	1024, 1024, 1027, 1027, 1027, 1027, 1033, 1034, 
	1034, 1034, 1034, 1042, 1034, 1034, 1034, 1034, 
	1048, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1066, 1067, 1068, 1068, 
	202, 918, 918, 1072, 918, 913, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 202, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 1125, 903, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 1150, 918, 0, 
	1157, 1158, 1159, 1161, 1163, 1165, 0, 1174, 
	1175, 1176, 1177, 1179, 1174, 1182, 0, 302, 
	1237, 1239, 1240, 1241, 1242, 1244, 1246, 1248, 
	1251, 1251, 302, 1253, 1255, 1256, 1257, 1253, 
	1259, 1262, 1263, 1263, 302, 1268, 1271, 1282, 
	302, 1288, 1290, 1292, 1293, 1296, 1297, 1271, 
	1271, 1300, 1300, 1300, 1306, 1308, 1309, 1312, 
	1314, 1315, 1316, 1300, 1300, 1323, 1328, 1333, 
	1300, 1300, 1340, 1340, 1300, 1300, 1262, 1253, 
	1253, 1262, 1253, 1253, 1248, 302, 1358, 1359, 
	1359, 1359, 1359, 1359, 1359, 1365, 1248, 1368, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1408, 1409, 1369, 1369, 
	1413, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 
	1369, 1369, 1369, 1369, 1369, 1369, 1369, 1467, 
	1242, 1468, 0, 1472, 1472, 0, 1476, 1476, 
	1476, 1476, 1480
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 181;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 190;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 246;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 301;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 304;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 306;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 310;
class << self
	attr_accessor :lex_en_interp_backslash_delimited_words
end
self.lex_en_interp_backslash_delimited_words = 311;
class << self
	attr_accessor :lex_en_plain_backslash_delimited_words
end
self.lex_en_plain_backslash_delimited_words = 316;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 318;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 320;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 326;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 439;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 446;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 467;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 498;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 504;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 512;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 536;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 759;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 766;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 774;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 954;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 957;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 181;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  NUMPARAM_MAX = 100

  attr_reader   :source_buffer
  attr_reader   :max_numparam_stack

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg, :context

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil
    @context    = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_start = true

    # True at the end of "def foo a:"
    @in_kwarg      = false

    # State before =begin / =end block comment
    @cs_before_block_comment = self.class.lex_en_line_begin

    # Maximum numbered parameters stack
    @max_numparam_stack = MaxNumparamStack.new
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def max_numparam
    @max_numparam_stack.top
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    cmd_state = @command_start
    @command_start = false

    
# line 10920 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 92 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10948 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 28 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 111 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 29 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 59 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 63 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 296 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1546 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 38 then
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 40 then
# line 1590 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 70 then
# line 1781 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 335 then
# line 1873 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
	when 338 then
# line 1874 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
	when 346 then
# line 1894 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 375 then
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 294 then
# line 2045 "lib/parser/lexer.rl"
		begin
 ident_tok = tok; ident_ts = @ts; ident_te = @te; 		end
	when 465 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 459 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 462 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 456 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 471 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 433 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 448 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 441 then
# line 2291 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 438 then
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 88 then
# line 2457 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 108 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 766;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 5 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 104 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 103 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 109 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 106 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 107 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 891 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 136 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 766;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 10 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 133 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 132 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 137 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 135 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 891 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 160 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 159 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 162 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 163 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 166 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 165 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 168 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 175 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 766;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 13 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 172 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 171 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 176 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 174 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 178 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 177 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 185 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 766;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 15 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 181 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 180 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 186 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end

   end
		end
	when 183 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 184 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 14 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 188 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 187 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 759;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 190 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 191 then
# line 1172 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1;
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 192 then
# line 1159 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 774;
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 16 then
# line 1305 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 193 then
# line 1305 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 196 then
# line 1318 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 195 then
# line 1328 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version < 27
          diagnostic :error, :ivar_name, { :name => tok }
        end

        value = tok[1..-1]

        if value[0] == '0'
          diagnostic :error, :leading_zero_in_numparam, nil, range(@ts, @te)
        end

        if value.to_i > NUMPARAM_MAX
          diagnostic :error, :too_large_numparam, nil, range(@ts, @te)
        end

        if !@context.in_block? && !@context.in_lambda?
          diagnostic :error, :numparam_outside_block, nil, range(@ts, @te)
        end

        if !@max_numparam_stack.can_have_numparams?
          diagnostic :error, :ordinary_param_defined, nil, range(@ts, @te)
        end

        @max_numparam_stack.register(value.to_i)

        emit(:tNUMPARAM, tok[1..-1])
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 194 then
# line 1358 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 217 then
# line 1379 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 203 then
# line 1387 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 18 then
# line 1391 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 774; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end
  end
		end
	when 200 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 212 then
# line 1404 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1410 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if version?(23)
          type, delimiter = tok[0..-2], tok[-1].chr
          	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

        else
          p = @ts - 1
          	begin
		 @cs = 774
		_goto_level = _again
		next
	end

        end
       end
		end
	when 199 then
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 198 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 216 then
# line 1379 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 213 then
# line 1383 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 215 then
# line 1387 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 210 then
# line 1391 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 774; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end
  end
		end
	when 206 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 211 then
# line 1407 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 204 then
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 209 then
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1400 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit_table(PUNCTUATION)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 17 then
# line 1423 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 202 then
# line 1 "NONE"
		begin
	case  @act
	when 40 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 41 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 42 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 22 then
# line 1435 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           p = p - 1;  @cs = 759; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 219 then
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 218 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 221 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 220 then
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1441 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 227 then
# line 1467 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 226 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 225 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 237 then
# line 1452 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 228 then
# line 1456 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 233 then
# line 1467 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 231 then
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 236 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 260 then
# line 1532 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 243 then
# line 1550 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 536
		_goto_level = _again
		next
	end

       end
		end
	when 249 then
# line 1574 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 24 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 251 then
# line 1591 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 39 then
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 238 then
# line 1616 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 239 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 250 then
# line 1541 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 246 then
# line 1563 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 536
		_goto_level = _again
		next
	end

       end
		end
	when 248 then
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 242 then
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 241 then
# line 1607 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 259 then
# line 1616 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 25 then
# line 1607 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 41 then
# line 1616 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 23 then
# line 1 "NONE"
		begin
	case  @act
	when 68 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 536
		_goto_level = _again
		next
	end

      end
	when 69 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 536
		_goto_level = _again
		next
	end

      end
	when 74 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 43 then
# line 1652 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 467
		_goto_level = _again
		next
	end
  end
		end
	when 264 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 265 then
# line 1652 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 467
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1652 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 467
		_goto_level = _again
		next
	end
  end
		end
	when 42 then
# line 1 "NONE"
		begin
	case  @act
	when 81 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 82 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 467
		_goto_level = _again
		next
	end
 end
end 
			end
	when 275 then
# line 1687 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 268 then
# line 1693 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 269 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 270 then
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 273 then
# line 1693 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 279 then
# line 1717 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 278 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 287 then
# line 1709 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 281 then
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 285 then
# line 1717 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 280 then
# line 1 "NONE"
		begin
	case  @act
	when 89 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 90 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
 end
end 
			end
	when 56 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 320 then
# line 1749 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 312 then
# line 1756 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 54 then
# line 1763 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 333 then
# line 1838 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1; p = p - 1;
        emit(:tSYMBEG, tok(@ts, @ts + 1), @ts, @ts + 1)
        	begin
		 @cs = 326
		_goto_level = _again
		next
	end

       end
		end
	when 321 then
# line 1846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 332 then
# line 1854 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1, @ts + 2))
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 68 then
# line 1868 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 343 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 342 then
# line 1919 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 322 then
# line 1959 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 51 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 774;
          else
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 759;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 319 then
# line 2018 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if @version >= 27
          emit(:tBDOT3)
        else
          emit(:tDOT3)
        end

         @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 48 then
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 439;
        else
           @cs = 498;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 306 then
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 181
		_goto_level = _again
		next
	end

       end
		end
	when 55 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 290 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 317 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 316 then
# line 1739 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 313 then
# line 1763 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 311 then
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 340 then
# line 1829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 323 then
# line 1868 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 336 then
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 341 then
# line 1919 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 347 then
# line 1925 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 314 then
# line 1959 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 318 then
# line 2007 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          emit(:tBDOT2)
        else
          emit(:tDOT2)
        end

         @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 293 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 303 then
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 305 then
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 181
		_goto_level = _again
		next
	end

       end
		end
	when 308 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 53 then
# line 1769 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 72 then
# line 1829 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 73 then
# line 1896 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 47 then
# line 1290 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 52 then
# line 2063 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 67 then
# line 2082 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 50 then
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 102 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 512; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
 end
	when 123 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 127 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
 end
end 
			end
	when 377 then
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 378 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 379 then
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 383 then
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 76 then
# line 2112 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 387 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 386 then
# line 2127 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 385 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 389 then
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 388 then
# line 2127 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 75 then
# line 2127 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 536
		_goto_level = _again
		next
	end
  end
		end
	when 423 then
# line 2138 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 86 then
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 397 then
# line 2312 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 78 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end
  end
		end
	when 419 then
# line 2343 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 475 then
# line 2367 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        	begin
		 @cs = 766
		_goto_level = _again
		next
	end

       end
		end
	when 412 then
# line 2376 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION);
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 404 then
# line 2386 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 774;
          else
             @cs = 504;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 417 then
# line 2411 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 402 then
# line 2415 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 399 then
# line 2423 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 401 then
# line 2436 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 480 then
# line 2440 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 396 then
# line 2446 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 395 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 490 then
# line 2172 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 326; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 488 then
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 487 then
# line 2187 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 427 then
# line 2262 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 477 then
# line 2322 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 416 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 320
		_goto_level = _again
		next
	end
  end
		end
	when 424 then
# line 2343 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 482 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 422 then
# line 2367 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        	begin
		 @cs = 766
		_goto_level = _again
		next
	end

       end
		end
	when 418 then
# line 2376 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION);
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 411 then
# line 2382 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 426 then
# line 2423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 409 then
# line 2430 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 415 then
# line 2446 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 84 then
# line 2235 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 79 then
# line 2262 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 83 then
# line 2294 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 77 then
# line 2446 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 80 then
# line 1 "NONE"
		begin
	case  @act
	when 140 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 141 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 326; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 143 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 144 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 512; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 147 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 152 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 158 then
	begin begin p = (( @te))-1; end
 emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 159 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 160 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 161 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 163 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 164 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 90 then
# line 2458 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 495 then
# line 2461 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 181; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 496 then
# line 2461 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 181; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 87 then
# line 2461 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 181; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 499 then
# line 2471 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 498 then
# line 2479 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 101 then
# line 2489 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 957
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2493 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 93 then
# line 2496 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 766
		_goto_level = _again
		next
	end
  end
		end
	when 94 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 95 then
# line 2486 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 100 then
# line 2489 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 957
		_goto_level = _again
		next
	end
  end
		end
	when 99 then
# line 2496 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 766
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2496 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 766
		_goto_level = _again
		next
	end
  end
		end
	when 66 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 105 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 134 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 161 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 167 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 173 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 179 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 182 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 189 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 261 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1532 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 252 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1591 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 244 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 344 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1909 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 307 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 181
		_goto_level = _again
		next
	end

       end
		end
	when 500 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2471 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 497 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2476 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 102 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2489 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 957
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2493 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 451 then
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 449 then
# line 637 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 454 then
# line 638 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 452 then
# line 639 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 450 then
# line 640 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 453 then
# line 641 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 6); p -= 6 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 442 then
# line 645 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 443 then
# line 646 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 2); p -= 2 } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 444 then
# line 650 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 446 then
# line 651 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 445 then
# line 652 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 6); p -= 6 } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 128 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 155 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 365 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 139 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 349 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 115 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 142 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 352 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 117 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 144 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 354 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 114 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 141 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 351 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 131 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 158 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 368 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 130 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 157 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 367 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 125 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 152 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 362 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 124 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 151 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 361 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 129 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 156 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 366 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 126 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 153 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 363 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 113 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 140 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 350 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 164 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 169 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 57 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 30 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1546 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1590 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 205 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 224 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 232 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 33 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 774
		_goto_level = _again
		next
	end

       end
		end
	when 263 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 255 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1613 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 274 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 286 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 282 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1714 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 58 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 49 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 439;
        else
           @cs = 498;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 304 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 384 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 380 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2093 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 181
		_goto_level = _again
		next
	end

      end
     end
		end
	when 393 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 390 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2124 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 181
		_goto_level = _again
		next
	end
  end
		end
	when 429 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 481 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2430 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 410 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2433 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 954
		_goto_level = _again
		next
	end
  end
		end
	when 96 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2486 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 254 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze, @te - 1, @te)
        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
        end
        @command_start = true
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 276 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1675 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE_ARG, '{'.freeze)
        end
        @command_start = true
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 376 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1936 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          @command_start = true
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 493 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 2146 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 494 then
# line 1055 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
          @cond.lexpop
          @cmdarg.lexpop
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end


        p = p - 1;
         @cs = (next_state_for_literal(current_literal));
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2386 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 774;
          else
             @cs = 504;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 60 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 64 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 208 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 223 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 235 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 257 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 272 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 284 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 310 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 382 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 392 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 414 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2430 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 98 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2486 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 229 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1460 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 324 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 295 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 407 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 140 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 141 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 326; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 143 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 144 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 512; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 147 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 152 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 158 then
	begin begin p = (( @te))-1; end
 emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 159 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 446; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 160 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 161 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 163 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 164 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 230 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1460 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 325 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 297 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 408 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2350 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 326 then
# line 1248 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 298 then
# line 1248 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 327 then
# line 1249 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 299 then
# line 1249 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 331 then
# line 1250 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 302 then
# line 1250 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 330 then
# line 1251 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 301 then
# line 1251 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 102 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 512; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
 end
	when 123 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 439; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 127 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
 end
end 
			end
	when 328 then
# line 1252 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 300 then
# line 1252 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 329 then
# line 1257 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 476 then
# line 1262 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2326 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 253 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1508 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 369 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1949 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 479 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2419 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 245 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1489 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 258 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1502 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 266 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1629 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 766; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 315 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1954 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 420 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 2382 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 421 then
# line 1285 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2386 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 774;
          else
             @cs = 504;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 71 then
# line 1781 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 339 then
# line 1782 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1783 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/m

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if @version >= 27
          if delimiter.count("\n") > 0 || delimiter.count("\r") > 0
            diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
          end
        elsif @version >= 24
          if delimiter.count("\n") > 0
            if delimiter.end_with?("\n")
              diagnostic :warning, :heredoc_id_ends_with_nl, nil, range(@ts, @ts + 1)
              delimiter = delimiter.rstrip
            else
              diagnostic :fatal, :heredoc_id_has_newline, nil, range(@ts, @ts + 1)
            end
          end
        end

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 536; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 334 then
# line 1873 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 337 then
# line 1874 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 345 then
# line 1894 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 372 then
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1965 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 512; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 466 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 460 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 463 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 457 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 472 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 435 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 473 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 89 then
# line 2457 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2458 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 439 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 214 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1379 "lib/parser/lexer.rl"
		begin
 @act = 40;		end
	when 201 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1383 "lib/parser/lexer.rl"
		begin
 @act = 41;		end
	when 197 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1387 "lib/parser/lexer.rl"
		begin
 @act = 42;		end
	when 26 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1550 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 240 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @act = 75;		end
	when 267 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1639 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 45 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1652 "lib/parser/lexer.rl"
		begin
 @act = 82;		end
	when 288 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1705 "lib/parser/lexer.rl"
		begin
 @act = 89;		end
	when 277 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1709 "lib/parser/lexer.rl"
		begin
 @act = 90;		end
	when 69 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1829 "lib/parser/lexer.rl"
		begin
 @act = 102;		end
	when 291 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1959 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 371 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1965 "lib/parser/lexer.rl"
		begin
 @act = 117;		end
	when 370 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @act = 118;		end
	when 74 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 289 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 292 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2082 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 489 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2146 "lib/parser/lexer.rl"
		begin
 @act = 140;		end
	when 484 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2172 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 492 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2182 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 485 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2187 "lib/parser/lexer.rl"
		begin
 @act = 144;		end
	when 486 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2192 "lib/parser/lexer.rl"
		begin
 @act = 145;		end
	when 491 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2196 "lib/parser/lexer.rl"
		begin
 @act = 146;		end
	when 483 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2207 "lib/parser/lexer.rl"
		begin
 @act = 147;		end
	when 478 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2221 "lib/parser/lexer.rl"
		begin
 @act = 148;		end
	when 400 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @act = 149;		end
	when 437 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2279 "lib/parser/lexer.rl"
		begin
 @act = 152;		end
	when 82 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @act = 153;		end
	when 403 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2322 "lib/parser/lexer.rl"
		begin
 @act = 155;		end
	when 428 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 425 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2343 "lib/parser/lexer.rl"
		begin
 @act = 159;		end
	when 394 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 160;		end
	when 406 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2350 "lib/parser/lexer.rl"
		begin
 @act = 161;		end
	when 398 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2376 "lib/parser/lexer.rl"
		begin
 @act = 163;		end
	when 405 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2382 "lib/parser/lexer.rl"
		begin
 @act = 164;		end
	when 170 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 118 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 145 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 355 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 123 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 150 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 360 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 116 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 143 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 353 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 122 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 149 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 359 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 120 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 147 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 357 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 127 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 154 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 364 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 138 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 348 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 61 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 207 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 222 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 234 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 256 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 774
		_goto_level = _again
		next
	end
  end
		end
	when 271 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 283 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 309 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 381 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 391 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 413 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2430 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 97 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2486 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 468 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 432 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 447 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 440 then
# line 2291 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 436 then
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 262 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @act = 75;		end
	when 81 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 35 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 46 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1652 "lib/parser/lexer.rl"
		begin
 @act = 82;		end
	when 430 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 65 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 85 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2176 "lib/parser/lexer.rl"
		begin
 @act = 142;		end
	when 37 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 374 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 373 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 469 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @act = 149;		end
	when 121 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 148 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 358 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 119 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 146 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 356 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 774; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 464 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 458 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 461 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 455 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 467 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 431 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 62 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 474 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 470 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 434 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
# line 23307 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 91 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 23317 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 294 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  def encode_escape(ord)
    ord.chr.force_encoding(@source_buffer.source.encoding)
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg(cmd_state)
    if cmd_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)
    next_state_for_literal(new_literal)
  end

  def next_state_for_literal(literal)
    if literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited_words
      else
        self.class.lex_en_plain_backslash_delimited_words
      end
    elsif literal.words? && !literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif !literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,  '.:'  => :tMETHREF
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2501 "lib/parser/lexer.rl"

  # %
end
