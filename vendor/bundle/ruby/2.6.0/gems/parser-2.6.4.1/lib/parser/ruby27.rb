# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16.pre.1
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-491,-105,277,214,215,-103,599,-491,-491,-491,600,-111,-491,-491,-491',
'627,-491,-89,225,629,812,606,214,215,-491,812,-491,-491,-491,214,215',
'-75,727,867,465,-96,-491,-491,-107,-491,-491,-491,-491,-491,-105,-109',
'586,586,586,277,728,-99,762,763,-110,811,764,113,114,226,811,824,544',
'593,-104,546,-491,-491,-491,-491,-491,-491,-491,-491,-491,-491,-491',
'-491,-491,-491,-588,626,-491,-491,-491,628,-491,-491,226,276,-491,-111',
'-108,-491,-491,-111,-491,226,-491,598,-491,-96,-491,-491,-103,-491,-491',
'-491,-491,-491,-96,-491,-299,-491,-94,-588,226,-99,-106,-299,-299,-299',
'-589,226,-299,-299,-299,-491,-299,-111,-491,-491,-491,-491,-111,-491',
'276,-491,-299,-299,-299,-96,-491,-491,-96,765,785,-491,-299,-299,-104',
'-299,-299,-299,-299,-299,-107,-99,-96,-108,-99,-107,-105,-109,119,119',
'119,-105,-109,118,118,118,-110,-95,-99,736,-106,-110,-299,-299,-299',
'-299,-299,-299,-299,-299,-299,-299,-299,-299,-299,-299,614,586,-299',
'-299,-299,586,801,-299,-102,-99,-299,832,-109,-299,-299,-105,-299,798',
'-299,597,-299,-274,-299,-299,-107,-299,-299,-299,-299,-299,-103,-299',
'-299,-299,401,-103,799,-110,119,-299,-299,-299,226,118,-106,-299,-299',
'-299,-299,-106,-299,-299,-299,-299,409,-299,878,-299,544,411,410,543',
'-299,-299,616,615,625,-109,-299,-299,593,-299,-299,-299,-299,-299,-104',
'-589,-106,214,215,-104,-98,-97,506,-108,119,119,548,-588,-108,118,118',
'-97,877,785,547,-108,-299,-299,-299,-299,-299,-299,-299,-299,-299,-299',
'-299,-299,-299,-299,277,277,-299,-299,-299,-105,653,119,831,-100,-299',
'119,118,-299,859,226,118,614,-299,614,-299,-98,-299,-299,246,-299,-299',
'-299,-299,-299,-96,-299,-299,-299,-101,-588,-98,-97,881,-299,-299,-299',
'96,97,-105,-299,-299,-299,-299,119,-299,-299,-499,-299,118,-299,856',
'824,534,-499,-585,119,-299,-299,272,272,118,-109,-299,-299,695,-299',
'-299,-299,-299,-299,-98,-97,898,-98,-97,616,615,616,615,617,528,276',
'276,531,119,771,119,-98,-97,118,-272,118,-299,-299,-299,-299,-299,-299',
'-299,-299,-299,-299,-299,-299,-299,-299,-488,902,-299,-299,-299,-499',
'653,-488,98,99,-299,906,-585,-299,614,223,-488,614,-299,614,-299,907',
'-299,-299,-101,-299,-299,-299,-299,-299,710,-299,-592,-299,544,-585',
'649,546,-110,-592,-592,-592,96,97,-592,-592,-592,-299,-592,728,-299',
'-299,648,-100,909,-299,246,-592,-592,-592,-592,544,-299,-299,546,-488',
'-488,-109,-592,-592,-504,-592,-592,-592,-592,-592,-111,911,616,615,612',
'616,615,616,615,619,614,531,243,913,-586,769,245,244,-503,681,-504,-108',
'-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592',
'915,-106,-592,-592,-592,-95,800,-592,98,99,-592,-503,915,-592,-592,614',
'-592,221,-592,-104,-592,226,-592,-592,270,-592,-592,-592,-592,-592,-491',
'-592,-592,-592,214,215,-110,-491,616,615,612,614,-586,-103,922,-104',
'-491,-592,272,-496,-592,-592,-592,-592,924,-592,-496,-592,-94,-495,226',
'-488,-592,-592,223,-586,-495,-107,-488,-488,-488,281,-103,-488,-488',
'-488,-337,-488,525,616,615,630,222,-337,-494,-488,927,-488,-488,-488',
'226,-494,-337,999,928,-491,-491,-488,-488,649,-488,-488,-488,-488,-488',
'616,615,621,-497,518,221,-102,582,581,-496,-497,-500,989,931,-592,856',
'824,226,-500,-495,-111,604,-488,-488,-488,-488,-488,-488,-488,-488,-488',
'-488,-488,-488,-488,-488,-337,-337,-488,-488,-488,-99,-488,-488,-494',
'935,-488,648,-275,-488,-488,517,-488,-498,-488,-108,-488,226,-488,-488',
'-498,-488,-488,-488,-488,-488,-592,-488,-497,-488,222,220,-74,-592,214',
'215,-500,-491,-588,263,264,128,-592,-488,-491,-488,-488,-488,-488,-488',
'937,-488,-488,-488,-97,221,710,-592,-488,-488,710,-592,270,-488,-592',
'-592,-592,941,-106,943,-592,-592,-300,-592,571,262,261,246,-498,-300',
'945,947,-592,226,574,949,506,504,-300,82,502,-592,-592,-592,-592,493',
'-592,-592,-592,-592,-592,83,-491,225,467,571,211,128,970,243,-488,84',
'971,245,244,574,466,582,581,976,222,757,575,-592,-592,-592,-592,-592',
'-592,-592,-592,-592,-592,-592,-592,-592,-592,-300,-300,-592,-592,-592',
'915,654,1036,-501,987,-592,582,581,-592,464,-501,575,412,-592,990,-592',
'399,-592,-592,-501,-592,-592,-592,-592,-592,226,-592,-592,-592,566,995',
'563,562,561,571,564,-502,122,123,124,125,126,-592,-502,574,-592,-592',
'-592,-592,996,-592,997,-502,1000,-592,-592,-592,-592,-592,915,-592,-592',
'-107,-592,915,915,569,326,-501,-501,325,710,-592,1009,1011,579,578,582',
'581,1013,1015,1015,575,-592,-592,266,-592,-592,-592,-592,-592,566,700',
'563,562,561,221,564,216,213,212,-502,-502,989,1015,971,1029,1015,226',
'1015,732,730,604,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592',
'-592,-592,-592,729,720,-592,-592,-592,246,654,737,738,593,-592,740,718',
'-592,221,716,714,712,-592,710,-592,602,-592,-592,710,-592,-592,-592',
'-592,-592,604,-592,-592,-592,222,220,707,243,226,703,757,245,244,701',
'241,242,700,-592,768,695,-592,-592,772,-98,773,-592,299,72,73,74,9,60',
'-592,-592,537,66,67,-107,226,-273,70,684,68,69,71,30,31,75,76,222,220',
'-89,226,226,77,28,27,107,106,108,109,226,786,19,493,493,226,803,643',
'8,48,301,10,111,110,112,100,59,102,101,103,804,104,113,114,266,96,97',
'44,45,43,246,250,251,252,253,263,264,258,259,254,255,221,239,240,809',
'814,256,257,524,40,504,506,33,246,246,61,62,522,695,63,226,35,243,246',
'249,47,245,244,246,241,242,262,261,247,20,248,272,272,695,94,82,85,86',
'246,87,89,88,90,824,658,272,226,83,93,115,260,1015,-247,-589,647,65',
'850,84,98,99,851,222,220,41,42,105,299,72,73,74,9,60,226,824,858,66',
'67,646,226,226,70,642,68,69,71,30,31,75,76,122,123,124,125,126,77,28',
'27,107,106,108,109,638,637,19,-272,635,634,226,643,8,48,301,10,111,110',
'112,100,59,102,101,103,631,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,258,259,254,255,221,239,240,,,256,257,596,40,,,33,,,61,62',
'594,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,,222,220,41,42,105',
'299,72,73,74,9,60,,,-290,66,67,,,,70,-290,68,69,71,30,31,75,76,,-290',
',,,77,28,27,107,106,108,109,,964,19,563,562,561,,564,8,48,301,10,111',
'110,112,100,59,102,101,103,,104,113,114,-299,96,97,44,45,43,221,-299',
',,,,-589,533,-290,-290,-299,221,,,,,463,,994,40,,,33,221,,61,62,992',
',63,219,35,,,566,47,563,562,561,217,564,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,-299,-299,,83,93,,222,220,,,,65,720,84,98,99,,222,220,41,42,105',
'299,72,73,74,9,60,,222,220,66,67,,,,70,,68,69,71,30,31,75,76,122,123',
'124,125,126,77,28,27,107,106,108,109,,566,19,563,562,561,,564,8,48,301',
'10,111,110,112,100,59,102,101,103,,104,113,114,221,96,97,44,45,43,-299',
'462,221,,,,246,-299,720,641,463,,-589,,,,-299,724,639,40,,,33,-300,',
'61,62,,,63,-300,35,,,,47,,,243,-300,,,245,244,20,241,242,,,94,82,85',
'86,,87,89,88,90,,222,220,,83,93,,-299,-299,222,220,,65,,84,98,99,,,',
'41,42,105,299,72,73,74,9,60,,-300,-300,66,67,,,,70,,68,69,71,30,31,75',
'76,122,123,124,125,126,77,28,27,107,106,108,109,,566,19,563,562,561',
',564,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,',
',,41,42,105,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,',
',,77,28,27,107,106,108,109,,964,19,563,562,561,,564,8,48,7,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63',
',35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,226,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240',
',,256,257,,40,,,303,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84',
'98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253',
'263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63,,35',
'243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,260,,,,,65,,84,98,99,',
',,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264',
'258,259,254,255,,239,240,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,260,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66',
'67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,566,19',
'563,562,561,,564,8,48,301,10,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,566,,563,562,561,,564,,720,,566,,563,562,561,,564',
'724,,40,,,33,,,61,62,,,63,,35,,,,47,,720,,,,,,,20,,724,720,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,-613,-613',
',,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,-613,-613,-613,-613',
'263,264,,,-613,-613,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
'8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,246,-613,-613,-613,-613,263,264,,,-613,-613,,,,,,256,257,,40,,,33',
',,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299',
'72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,246,-613,-613,-613,-613,263,264,,,-613,-613',
',,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242',
'262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,5,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,7,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,,,,,256,257',
',40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,,,247,20,248',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27',
'107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,246,-613,-613,-613,-613,263,264,,,-613',
'-613,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241',
'242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65',
',84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252',
'253,263,264,258,259,254,255,,-613,-613,,,256,257,,40,,,303,,,61,62,',
',63,,35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73',
'74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,246,250,251,252,253,263,264,258,259,254,255,,-613,-613',
',,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262',
'261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75',
'76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263',
'264,,,254,255,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245',
'244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,-613',
'-613,-613,-613,263,264,,,-613,-613,,,,,,256,257,,40,,,33,,,61,62,,,63',
',35,243,,249,47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,246,-613,-613,-613,-613,263,264,,,-613,-613,,,,,,256,257',
',40,,,303,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,262,261,247',
'20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,250,251,252,253,263,264,258,259',
'254,255,,-613,-613,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245',
'244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68',
'69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,',
',,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241',
'242,,,247,20,248,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,250,251,252,253',
'263,264,258,,254,255,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249',
'47,245,244,,241,242,262,261,247,20,248,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
'8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,246,,,,,,,,,,,,,,,,256,257,,40,,,33,,,61,62,,,63,,35,243,,,47,245',
'244,,241,242,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,',
'84,98,99,,,,41,42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,',
',,,256,257,,40,,,33,,,61,62,,,63,,35,243,,249,47,245,244,,241,242,,',
',20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,299,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77',
'28,27,107,106,108,109,,,19,,,,,,8,48,301,10,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,246,,,,,,,,,,,,,,,,256,257,,40,,,33',
',,61,62,,,63,,35,243,,249,47,245,244,,241,242,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,',
',65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,',
'10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,',
',,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60',
'105,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,417,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28',
'27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,',
'104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63',
',417,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,',
',,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,777,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,',
',,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,226,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,9',
'60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,301,10,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,',
',,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99,,',
',41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,',
'77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,,,288,,47,,,294,,,,,,236,,,,,94,291,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
',,322,,,,,,,,,,,,,,,,,,,,951,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105',
',,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,678,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40',
',,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85',
'86,,87,89,88,90,,,,,83,93,226,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,957,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60',
'105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,951,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,',
',,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,9,60',
'105,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,19,,,,,,8,48,,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,288,,47,,,294,,,,,,236',
',,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42',
'105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
'293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,678,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,',
'83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316',
',,111,110,112,100,59,102,101,103,,104,113,114,,96,97,,,322,,,,,,,,,',
',,,,,,,,,,361,,,33,,,61,62,,,63,,35,,,,,,,,,,,,,,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
',,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,',
'77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101',
'103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61',
'62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43',
',,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,294,,,,,,236,,,',
',94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293',
'104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63',
',678,,,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,',
',,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,',
',111,110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,',
',,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,',
',,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290',
',288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,',
',,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,',
',,231,,,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85',
'86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,307,,,,,,,,,,,,',
',,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74',
',60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106',
'108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,324,,,65,,84,98,99,72,73',
'74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107',
'106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113',
'114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47',
',,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
',,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,',
',,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99',
'72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,290,,288,,47',
',,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33',
',,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111',
'110,112,100,59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,',
',,,,,,,,,,231,,,237,,,61,62,,,63,,290,,,,47,,,294,,,,,,236,,,,,94,291',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,293,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,',
'294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98',
'99,,,,41,42,105,72,73,74,9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,',
',,,,77,28,27,107,106,108,109,,,19,,,,,,8,48,,10,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61',
'62,,,63,,35,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,',
',19,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44',
'45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,',
',,,94,82,85,86,,87,89,88,90,,,,,83,93,119,,,,,118,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318',
'319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110',
'112,366,59,102,101,367,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,373',
',,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71',
'318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,316,,,111',
'110,112,366,59,102,101,367,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,',
',,,,368,,,237,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88',
'90,,,,,83,93,,,,,,,65,,84,98,99,,,,,,105,178,189,179,202,175,195,185',
'184,205,206,200,183,182,177,203,207,208,187,176,190,194,196,188,181',
',,,197,204,199,384,383,385,382,174,193,192,,,,,,173,180,171,172,379',
'380,381,377,133,102,101,378,,104,,,,,,162,163,,159,141,142,143,150,147',
'149,,,144,145,,,,164,165,151,152,,,,,,389,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,,,167,,,,,,72,73,74,9,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,105,77,28,27,107,106,108,109,,,19,,',
',,,8,48,7,10,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,,,,,,,,20,,,,',
'94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,401,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237,,,61,62,,,63,,,,,',
',,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,520,,,65,,84,98',
'99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
'293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62',
',,63,,,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,',
',,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,',
',,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,678,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,',
',,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30',
'31,75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90',
',,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,',
'111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,',
',,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86',
',87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,316,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
',,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61,62,,,63,,,,,,,,,,,,,,,,,,,,94',
'82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,72,73,74,,60,105',
',,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109',
',,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97',
'44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75',
'76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,',
',237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,537,,61,62,,,63,,,,,,47,,,',
',,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,',
',,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,',
',77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76',
',,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111',
'110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,',
',,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,',
',94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93',
',,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112',
'100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89,88,90,',
',,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238,,,,,,',
'48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,',
',,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
'9,60,,,,66,67,,,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108',
'109,,,19,,,,,,8,48,7,10,111,110,112,100,59,102,101,103,,104,113,114',
',96,97,44,45,43,,,,,,,,,,,,,,,,,,,,40,,,33,,,61,62,,,63,,35,,,,47,,',
',,,,,,20,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,',
',,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,',
',77,315,321,107,106,108,109,,,238,,,,,,,316,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,72,73,74,,60,105,,,66,67,,,,70,,68,69,71,318,319,75,76',
',,,,,77,315,321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59',
'102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237',
',,61,62,,,63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83',
'93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110',
'112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,',
',,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82,85,86,,87,89',
'88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,30,31,75,76,,,,,,77,28,27,107,106,108,109,,,19,,,,,',
',48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45,43,,',
',,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,,,,20,,,,,94,82',
'85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108',
'109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96',
'97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,,,,,47,,,,,,',
',,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41',
'42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315',
'321,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103',
',104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,',
'63,,,,,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,',
'65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31',
'75,76,,,,,,77,28,27,107,106,108,109,,,238,,,,,,,48,,,111,110,112,100',
'59,102,101,103,293,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231',
',,237,,,61,62,,,63,,290,,288,,47,,,294,,,,,,236,,,,,94,291,85,86,,87',
'89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321,107,106,108,109,,,238',
',,,,,,48,,,111,110,112,100,59,102,101,103,,104,113,114,,96,97,44,45',
'43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,417,,,,47,,,,,,,,,236',
',,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84,98,99,,,,41,42,105',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,318,319,75,76,,,,,,77,315,321',
'107,106,108,109,,,238,,,,,,,48,,,111,110,112,100,59,102,101,103,,104',
'113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,,61,62,,,63,,',
',,,47,,,,,,,,,236,,,,,94,82,85,86,,87,89,88,90,,,,,83,93,,,,,,,65,,84',
'98,99,,,,41,42,105,72,73,74,,60,,,,66,67,,,,70,,68,69,71,30,31,75,76',
',,,,,77,28,27,107,106,108,109,,,19,,,,,,,48,,,111,110,112,100,59,102',
'101,103,,104,113,114,,96,97,44,45,43,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'61,62,,566,63,563,562,561,571,564,47,,,,,,,,574,20,,,,,94,82,85,86,',
'87,89,88,90,,,,,83,93,,569,,,,,65,,84,98,99,-594,582,581,41,42,105,575',
'-594,-594,-594,,,-594,-594,-594,,-594,,,,,,,,,-594,-594,-594,-594,,',
',,,,,-594,-594,,-594,-594,-594,-594,-594,,,,,,,,,,,,,,,,,,,,,,,-594',
'-594,-594,-594,-594,-594,-594,-594,-594,-594,-594,-594,-594,-594,,,-594',
'-594,-594,,,-594,,,-594,,,-594,-594,,-594,,-594,,-594,,-594,-594,,-594',
'-594,-594,-594,-594,,-594,-594,-594,,,,,,566,,563,562,561,571,564,,-594',
',,-594,-594,-594,-594,574,-594,,-594,-593,,,,-594,-594,,-593,-593,-593',
',,-593,-593,-593,,-593,,569,,,,,,,-593,-593,-593,-593,582,581,,,,575',
',-593,-593,,-593,-593,-593,-593,-593,,,,,,,,,,,,,,,,,,,,,,,-593,-593',
'-593,-593,-593,-593,-593,-593,-593,-593,-593,-593,-593,-593,,,-593,-593',
'-593,,,-593,,,-593,,,-593,-593,,-593,,-593,,-593,,-593,-593,,-593,-593',
'-593,-593,-593,,-593,-593,-593,,,,,,566,,563,562,561,571,564,,-593,',
',-593,-593,-593,-593,574,-593,,-593,-416,,,,-593,-593,,-416,-416,-416',
',,-416,-416,-416,,-416,,569,,,,,,,-416,-416,-416,,582,581,,,,575,,-416',
'-416,,-416,-416,-416,-416,-416,,,,,,,,,,,,,,,,,,,,,,,-416,-416,-416',
'-416,-416,-416,-416,-416,-416,-416,-416,-416,-416,-416,,,-416,-416,-416',
',,-416,,272,-416,,,-416,-416,,-416,,-416,,-416,,-416,-416,,-416,-416',
'-416,-416,-416,,-416,-416,-416,566,,563,562,561,571,564,,,,,,,-416,',
'574,-416,-416,-255,-416,,-416,,,,-255,-255,-255,-416,-416,-255,-255',
'-255,,-255,,,569,,,,,,-255,-255,-255,579,578,582,581,,,,575,-255,-255',
',-255,-255,-255,-255,-255,,,,,,,,,,,,,,,,,,,,,,,-255,-255,-255,-255',
'-255,-255,-255,-255,-255,-255,-255,-255,-255,-255,,,-255,-255,-255,',
',-255,,272,-255,,,-255,-255,,-255,,-255,,-255,,-255,-255,,-255,-255',
'-255,-255,-255,-291,-255,-255,-255,,,,-291,-291,-291,,,-291,-291,-291',
',-291,-255,,,-255,-255,,-255,,-255,-291,-291,-291,,,,-255,-255,,,-291',
'-291,,-291,-291,-291,-291,-291,,,,,,,,,,,,,,,,,,,,,,,-291,-291,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,,,-291,-291,-291',
',,-291,,,-291,,,-291,-291,,-291,,-291,,-291,,-291,-291,,-291,-291,-291',
'-291,-291,,-291,-306,-291,,,,,,-306,-306,-306,,,-306,-306,-306,-291',
'-306,,-291,-291,-291,-291,,-291,,-291,-306,-306,,,-291,-291,,,,,-306',
'-306,,-306,-306,-306,-306,-306,,,,,,,,,,,,,,,,,,,,,,,-306,-306,-306',
'-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,,,-306,-306,-306',
',,-306,,281,-306,,,-306,-306,,-306,,-306,,-306,,-306,-306,,-306,-306',
'-306,-306,-306,,-306,-255,-306,,,,,,-255,-255,-255,,,-255,-255,-255',
'-306,-255,,-306,-306,,-306,,-306,,-255,-255,,,,-306,-306,,,,,-255,-255',
',-255,-255,-255,-255,-255,,,,,,,,453,443,,,454,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,-255,,,164,165,151,152,-255,,,,,272,-255',
',,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,-255',
'-255,167,,,,,,,,,,,,,-255,,,-255,,,,,-255,,,,,,,-255,178,189,179,202',
'175,195,185,184,205,206,200,183,182,177,203,207,208,187,176,190,194',
'196,188,181,,,,197,204,199,198,191,201,186,174,193,192,,,,,,173,180',
'171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141,142,143,150',
'147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,,,,,93,178,189',
'179,202,175,195,185,184,205,206,200,183,182,177,203,207,208,187,176',
'190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193,192,,,,,',
'173,180,171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155,,140',
'161,158,157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,,,,,93',
'178,189,179,202,175,195,185,184,205,206,200,183,182,177,203,207,208',
'187,176,190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193,192',
',,,,,173,180,171,172,168,169,170,131,133,,,132,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,,,167,94,,,,,,,,,,',
',,,93,178,189,179,202,175,195,185,184,205,206,200,183,182,177,203,207',
'208,187,176,190,194,196,188,181,,,,197,204,199,198,191,201,186,174,193',
'192,,,,,,173,180,171,172,168,169,170,131,133,130,,132,,,,,,,,162,163',
',159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,',
',,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,,,167,94',
',,,,,,,,,,,,,93,178,189,179,202,175,195,185,184,205,206,200,183,182',
'177,203,207,208,187,176,190,194,196,188,181,,,,197,204,199,198,191,201',
'186,174,193,192,,,,,,173,180,171,172,168,169,170,131,133,,,132,,,,,',
',,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152',
',,,,,,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139',
'446,450,167,,445,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145',
',,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153',
'154,148,146,138,160,139,782,450,167,,781,,,,,,,,162,163,,159,141,142',
'143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155',
',140,161,158,157,166,153,154,148,146,138,160,139,745,450,167,,746,,',
',,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152',
',,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160',
'139,661,450,167,,662,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144',
'145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166',
'153,154,148,146,138,160,139,659,443,167,,660,,,,,,,,162,163,,159,141',
'142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156',
'155,,140,161,158,157,166,153,154,148,146,138,160,139,1024,450,167,,1025',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,1019,450,167,,1018,,,,,,,,162,163,,159,141,142,143,150,147,149',
',,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157',
'166,153,154,148,146,138,160,139,453,443,167,,454,,,,,,,,162,163,,159',
'141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,,,,,,,,,156',
'155,,140,161,158,157,166,153,154,148,146,138,160,139,453,443,167,,454',
',,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151',
'152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138',
'160,139,748,450,167,,749,,,,,,,,162,163,,159,141,142,143,150,147,149',
',,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157',
'166,153,154,148,146,138,160,139,1022,443,167,,1023,,,,,,,,162,163,,159',
'141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,',
',156,155,,140,161,158,157,166,153,154,148,146,138,160,139,659,443,167',
',660,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164,165',
'151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148,146',
'138,160,139,661,450,167,,662,,,,,,,,162,163,,159,141,142,143,150,147',
'149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158',
'157,166,153,154,148,146,138,160,139,743,443,167,,744,,,,,,,,162,163',
',159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272,',
',,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,688,443',
'167,,689,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,,,,164',
'165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154,148',
'146,138,160,139,691,450,167,,692,,,,,,,,162,163,,159,141,142,143,150',
'147,149,,,144,145,,,,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161',
'158,157,166,153,154,148,146,138,160,139,779,443,167,,780,,,,,,,,162',
'163,,159,141,142,143,150,147,149,,,144,145,,,,164,165,151,152,,,,,,272',
',,,,,,,156,155,,140,161,158,157,166,153,154,148,146,138,160,139,439',
'443,167,,440,,,,,,,,162,163,,159,141,142,143,150,147,149,,,144,145,',
',,164,165,151,152,,,,,,272,,,,,,,,156,155,,140,161,158,157,166,153,154',
'148,146,138,160,139,,566,167,563,562,561,571,564,,566,,563,562,561,571',
'564,574,,,,,,,,574,,566,,563,562,561,571,564,,,,,,569,551,,574,,,,,569',
'579,578,582,581,,,,575,579,578,582,581,,,,575,569,,566,,563,562,561',
'571,564,579,578,582,581,,,,575,574,,566,,563,562,561,571,564,,566,,563',
'562,561,571,564,574,,,,,569,,,574,,,,,,579,578,582,581,,,,575,569,,',
',,,,,569,579,578,582,581,,,,575,579,578,582,581,,,566,575,563,562,561',
'571,564,,566,,563,562,561,571,564,574,,,,,,,,574,,566,,563,562,561,571',
'564,,,,,,569,,,574,,,,,569,,,582,581,,,,575,579,578,582,581,,,,575,569',
',566,,563,562,561,571,564,579,578,582,581,,,,575,574,,566,,563,562,561',
'571,564,,566,,563,562,561,571,564,574,,,,,569,,,574,,,,,,,,582,581,',
',,575,569,,,,,,,,569,,,582,581,,,,575,579,578,582,581,,,566,575,563',
'562,561,571,564,566,,563,562,561,571,564,566,574,563,562,561,571,564',
'566,574,563,562,561,571,564,,574,,,,,,,574,569,,,,,,,569,,,,582,581',
',569,,575,,582,581,,569,,575,,582,581,,,,575,,582,581,,,,575' ]
        racc_action_table = arr = ::Array.new(26933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'103,861,64,458,458,358,368,103,103,103,368,958,103,103,103,396,103,683',
'19,397,805,372,698,698,103,672,103,103,103,611,611,683,576,755,232,819',
'103,103,1024,103,103,103,103,103,1034,1025,350,351,923,668,576,689,615',
'615,995,805,615,615,615,19,672,926,704,926,359,704,103,103,103,103,103',
'103,103,103,103,103,103,103,103,103,1019,396,103,103,103,397,103,103',
'1021,64,103,362,744,103,103,232,103,458,103,363,103,819,103,103,954',
'103,103,103,103,103,861,103,662,103,358,1024,698,689,1022,662,662,662',
'1025,611,662,662,662,103,662,958,103,103,103,103,958,103,668,103,662',
'662,662,819,103,103,819,615,874,103,662,662,955,662,662,662,662,662',
'1024,689,819,1023,689,1024,1034,1025,350,351,923,1034,1025,350,351,923',
'995,359,689,588,743,995,662,662,662,662,662,662,662,662,662,662,662',
'662,662,662,395,901,662,662,662,741,662,662,362,744,662,705,746,662',
'662,874,662,659,662,361,662,776,662,662,745,662,662,662,662,662,954',
'662,781,662,357,954,660,597,865,781,781,781,778,865,1022,781,781,662',
'781,1022,662,662,662,662,130,662,802,662,340,130,130,340,662,662,395',
'395,395,662,781,781,356,781,781,781,781,781,955,746,659,607,607,955',
'691,688,345,1023,297,588,343,745,1023,297,588,743,787,644,342,660,781',
'781,781,781,781,781,781,781,781,781,781,781,781,781,317,26,781,781,781',
'802,781,901,705,746,781,741,901,781,741,338,741,624,781,392,781,745',
'781,781,332,781,781,781,781,781,644,781,445,781,597,691,691,688,808',
'445,445,445,43,43,644,445,445,781,445,355,781,781,379,781,355,781,1006',
'1006,330,379,366,607,781,781,317,26,607,781,445,445,818,445,445,445',
'445,445,691,688,822,691,688,624,624,392,392,392,323,317,26,326,3,624',
'870,691,688,3,825,870,445,445,445,445,445,445,445,445,445,445,445,445',
'445,445,366,826,445,445,445,379,445,366,43,43,445,833,366,445,508,424',
'366,622,445,393,445,834,445,445,326,445,445,445,445,445,835,445,661',
'445,341,366,780,341,326,661,661,661,322,322,661,661,661,445,661,837',
'445,445,779,445,840,445,470,661,661,661,661,344,445,445,344,366,366',
'445,661,661,39,661,661,661,661,661,424,841,508,508,508,622,622,393,393',
'393,391,464,470,843,367,622,470,470,229,508,230,780,661,661,661,661',
'661,661,661,661,661,661,661,661,661,661,844,779,661,661,661,39,661,661',
'322,322,661,38,846,661,661,398,661,387,661,39,661,849,661,661,387,661',
'661,661,661,661,367,661,661,661,349,349,464,367,391,391,391,394,367',
'229,854,230,367,661,321,385,661,661,661,661,857,661,385,661,38,384,316',
'100,661,661,17,367,384,661,100,100,100,315,38,100,100,100,49,100,312',
'398,398,398,387,49,383,100,862,100,100,100,962,383,49,962,864,367,367',
'100,100,440,100,100,100,100,100,394,394,394,382,306,988,17,710,710,385',
'382,381,988,868,748,731,731,869,381,384,17,988,100,100,100,100,100,100',
'100,100,100,100,100,100,100,100,49,49,100,100,100,440,100,100,383,872',
'100,439,873,100,100,305,100,380,100,440,100,304,100,100,380,100,100',
'100,100,100,748,100,382,100,988,988,302,748,14,14,381,378,748,46,46',
'301,748,100,378,377,100,100,100,100,882,100,377,100,439,24,883,782,100',
'100,884,748,24,100,782,782,782,886,439,887,782,782,525,782,707,46,46',
'471,380,525,888,890,782,891,707,892,289,286,525,80,285,748,748,782,782',
'271,782,782,782,782,782,80,378,238,234,937,10,7,920,471,377,80,921,471',
'471,937,233,707,707,930,24,934,707,782,782,782,782,782,782,782,782,782',
'782,782,782,782,782,525,525,782,782,782,1027,782,1030,309,948,782,937',
'937,782,231,309,937,209,782,951,782,115,782,782,309,782,782,782,782',
'782,48,782,782,782,811,957,811,811,811,811,811,310,513,513,513,513,513',
'782,310,811,782,782,446,782,960,782,961,310,966,446,446,446,782,782',
'967,446,446,782,446,968,969,811,40,309,309,37,978,446,981,982,811,811',
'811,811,983,984,986,811,446,446,22,446,446,446,446,446,851,991,851,851',
'851,950,851,15,13,12,310,310,950,1031,1005,1007,1032,811,1033,585,583',
'950,446,446,446,446,446,446,446,446,446,446,446,446,446,446,580,851',
'446,446,446,485,446,589,590,591,446,592,568,446,370,559,558,557,446',
'555,446,370,446,446,554,446,446,446,446,446,370,446,446,446,950,950',
'553,485,540,541,609,485,485,539,485,485,538,446,619,529,446,446,627',
'446,629,446,354,354,354,354,354,354,446,446,526,354,354,446,521,636',
'354,519,354,354,354,354,354,354,354,370,370,516,515,499,354,354,354',
'354,354,354,354,495,645,354,650,655,663,664,428,354,354,354,354,354',
'354,354,354,354,354,354,354,665,354,354,354,667,354,354,354,354,354',
'428,428,428,428,428,428,428,428,428,428,428,311,428,428,671,673,428',
'428,311,354,675,677,354,475,474,354,354,311,685,354,687,354,428,473',
'428,354,428,428,472,428,428,428,428,428,354,428,690,693,694,354,354',
'354,354,697,354,354,354,354,699,460,447,706,354,354,1,428,1041,428,1018',
'438,354,722,354,354,354,723,311,311,354,354,354,860,860,860,860,860',
'860,725,733,739,860,860,437,742,435,860,425,860,860,860,860,860,860',
'860,300,300,300,300,300,860,860,860,860,860,860,860,421,418,860,416',
'415,413,751,434,860,860,860,860,860,860,860,860,860,860,860,860,407',
'860,860,860,,860,860,860,860,860,434,434,434,434,434,434,434,434,434',
'434,434,360,434,434,,,434,434,360,860,,,860,,,860,860,360,,860,,860',
'434,,434,860,434,434,,434,434,434,434,434,860,434,,,,860,860,860,860',
',860,860,860,860,,,,,860,860,,434,,,,,860,,860,860,860,,360,360,860',
'860,860,904,904,904,904,904,904,,,313,904,904,,,,904,313,904,904,904',
'904,904,904,904,,313,,,,904,904,904,904,904,904,904,,999,904,999,999',
'999,,999,904,904,904,904,904,904,904,904,904,904,904,904,,904,904,904',
'692,904,904,904,904,904,327,692,,,,,692,327,313,313,692,956,,,,,327',
',956,904,,,904,16,,904,904,956,,904,16,904,,,971,904,971,971,971,16',
'971,,,,904,,,,,904,904,904,904,,904,904,904,904,,692,692,,904,904,,327',
'327,,,,904,971,904,904,904,,956,956,904,904,904,608,608,608,608,608',
'608,,16,16,608,608,,,,608,,608,608,608,608,608,608,608,337,337,337,337',
'337,608,608,608,608,608,608,608,,569,608,569,569,569,,569,608,608,608',
'608,608,608,608,608,608,608,608,608,,608,608,608,228,608,608,608,608',
'608,749,228,423,,,,486,749,569,423,228,,749,,,,749,569,423,608,,,608',
'600,,608,608,,,608,600,608,,,,608,,,486,600,,,486,486,608,486,486,,',
'608,608,608,608,,608,608,608,608,,228,228,,608,608,,749,749,423,423',
',608,,608,608,608,,,,608,608,608,587,587,587,587,587,587,,600,600,587',
'587,,,,587,,587,587,587,587,587,587,587,6,6,6,6,6,587,587,587,587,587',
'587,587,,724,587,724,724,724,,724,587,587,587,587,587,587,587,587,587',
'587,587,587,,587,587,587,,587,587,587,587,587,784,784,784,784,784,784',
'784,784,784,784,784,,784,784,,,784,784,,587,,,587,,,587,587,,,587,,587',
'784,,784,587,784,784,,784,784,784,784,784,587,784,,,,587,587,587,587',
',587,587,587,587,,,,,587,587,,784,,,,,587,,587,587,587,,,,587,587,587',
'0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,906,0,906',
'906,906,,906,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,489,489,489,489',
'489,489,489,489,489,489,489,,489,489,,,489,489,,0,,,0,,,0,0,,,0,,0,489',
',489,0,489,489,,489,489,489,489,489,0,489,,,,0,0,0,0,,0,0,0,0,,,,,0',
'0,489,489,,,,,0,,0,0,0,,,,0,0,0,308,308,308,308,308,308,,,,308,308,',
',,308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308',
',,308,,,,,,308,308,308,308,308,308,308,308,308,308,308,308,,308,308',
'308,,308,308,308,308,308,879,879,879,879,879,879,879,879,879,879,879',
',879,879,,,879,879,,308,,,308,,,308,308,,,308,,308,879,,879,308,879',
'879,,879,879,879,879,879,308,879,,,,308,308,308,308,,308,308,308,308',
',,,,308,308,,879,,,,,308,,308,308,308,,,,308,308,308,353,353,353,353',
'353,353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353',
'353,353,353,353,353,,,353,,,,,,353,353,353,353,353,353,353,353,353,353',
'353,353,,353,353,353,,353,353,353,353,353,283,283,283,283,283,283,283',
'283,283,283,283,,283,283,,,283,283,,353,,,353,,,353,353,,,353,,353,283',
',283,353,283,283,,283,283,283,283,283,353,283,,,,353,353,353,353,,353',
'353,353,353,,,,,353,353,,283,,,,,353,,353,353,353,,,,353,353,353,866',
'866,866,866,866,866,,,,866,866,,,,866,,866,866,866,866,866,866,866,',
',,,,866,866,866,866,866,866,866,,,866,,,,,,866,866,866,866,866,866,866',
'866,866,866,866,866,,866,866,866,,866,866,866,866,866,536,536,536,536',
'536,536,536,536,536,536,536,,536,536,,,536,536,,866,,,866,,,866,866',
',,866,,866,536,,536,866,536,536,,536,536,536,536,536,866,536,,,,866',
'866,866,866,,866,866,866,866,,,,,866,866,,536,,,,,866,,866,866,866,',
',,866,866,866,237,237,237,237,237,237,,,,237,237,,,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,237,237',
'237,237,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237',
'237,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,237,,,237,,,237',
'237,,,237,,237,21,,21,237,21,21,,21,21,21,21,21,237,21,,,,237,237,237',
'237,,237,237,237,237,,,,,237,237,,21,,,,,237,,237,237,237,,,,237,237',
'237,898,898,898,898,898,898,,,,898,898,,,,898,,898,898,898,898,898,898',
'898,,,,,,898,898,898,898,898,898,898,,720,898,720,720,720,,720,898,898',
'898,898,898,898,898,898,898,898,898,898,,898,898,898,,898,898,898,898',
'898,850,,850,850,850,,850,,720,,970,,970,970,970,,970,720,,898,,,898',
',,898,898,,,898,,898,,,,898,,850,,,,,,,898,,850,970,,898,898,898,898',
',898,898,898,898,,,,,898,898,,,,,,,898,,898,898,898,,,,898,898,898,905',
'905,905,905,905,905,,,,905,905,,,,905,,905,905,905,905,905,905,905,',
',,,,905,905,905,905,905,905,905,,,905,,,,,,905,905,905,905,905,905,905',
'905,905,905,905,905,,905,905,905,,905,905,905,905,905,328,328,328,328',
'328,328,328,328,328,328,328,,328,328,,,328,328,,905,,,905,,,905,905',
',,905,,905,328,,328,905,328,328,,328,328,328,328,328,905,328,,,,905',
'905,905,905,,905,905,905,905,,,,,905,905,,,,,,,905,,905,905,905,,,,905',
'905,905,813,813,813,813,813,813,,,,813,813,,,,813,,813,813,813,813,813',
'813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,813,813,813,813',
'813,813,813,813,813,813,813,813,,813,813,813,,813,813,813,813,813,483',
'483,483,483,483,483,483,,,483,483,,,,,,483,483,,813,,,813,,,813,813',
',,813,,813,483,,483,813,483,483,,483,483,483,483,483,813,483,,,,813',
'813,813,813,,813,813,813,813,,,,,813,813,,,,,,,813,,813,813,813,,,,813',
'813,813,336,336,336,336,336,336,,,,336,336,,,,336,,336,336,336,336,336',
'336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,336,336,336,336',
'336,336,336,336,336,336,336,336,,336,336,336,,336,336,336,336,336,482',
'482,482,482,482,482,482,,,482,482,,,,,,482,482,,336,,,336,,,336,336',
',,336,,336,482,,482,336,482,482,,482,482,482,482,482,336,482,,,,336',
'336,336,336,,336,336,336,336,,,,,336,336,,,,,,,336,,336,336,336,,,,336',
'336,336,880,880,880,880,880,880,,,,880,880,,,,880,,880,880,880,880,880',
'880,880,,,,,,880,880,880,880,880,880,880,,,880,,,,,,880,880,880,880',
'880,880,880,880,880,880,880,880,,880,880,880,,880,880,880,880,880,484',
'484,484,484,484,484,484,,,484,484,,,,,,484,484,,880,,,880,,,880,880',
',,880,,880,484,,484,880,484,484,,484,484,484,484,484,880,484,,,,880',
'880,880,880,,880,880,880,880,,,,,880,880,,,,,,,880,,880,880,880,,,,880',
'880,880,128,128,128,128,128,128,,,,128,128,,,,128,,128,128,128,128,128',
'128,128,,,,,,128,128,128,128,128,128,128,,,128,,,,,,128,128,128,128',
'128,128,128,128,128,128,128,128,,128,128,128,,128,128,128,128,128,490',
',,,,,,,,,,,,,,,490,490,,128,,,128,,,128,128,,,128,,128,490,,490,128',
'490,490,,490,490,,,490,128,490,,,,128,128,128,128,,128,128,128,128,',
',,,128,128,,,,,,,128,,128,128,128,,,,128,128,128,953,953,953,953,953',
'953,,,,953,953,,,,953,,953,953,953,953,953,953,953,,,,,,953,953,953',
'953,953,953,953,,,953,,,,,,953,953,953,953,953,953,953,953,953,953,953',
'953,,953,953,953,,953,953,953,953,953,481,481,481,481,481,481,481,,',
'481,481,,,,,,481,481,,953,,,953,,,953,953,,,953,,953,481,,481,953,481',
'481,,481,481,481,481,481,953,481,,,,953,953,953,953,,953,953,953,953',
',,,,953,953,,,,,,,953,,953,953,953,,,,953,953,953,303,303,303,303,303',
'303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303',
'303,303,303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303,303',
'303,,303,303,303,,303,303,303,303,303,468,468,468,468,468,468,468,468',
'468,468,468,,468,468,,,468,468,,303,,,303,,,303,303,,,303,,303,468,',
'468,303,468,468,,468,468,468,468,468,303,468,,,,303,303,303,303,,303',
'303,303,303,,,,,303,303,,,,,,,303,,303,303,303,,,,303,303,303,747,747',
'747,747,747,747,,,,747,747,,,,747,,747,747,747,747,747,747,747,,,,,',
'747,747,747,747,747,747,747,,,747,,,,,,747,747,747,747,747,747,747,747',
'747,747,747,747,,747,747,747,,747,747,747,747,747,469,469,469,469,469',
'469,469,469,469,469,469,,469,469,,,469,469,,747,,,747,,,747,747,,,747',
',747,469,,469,747,469,469,,469,469,469,469,469,747,469,,,,747,747,747',
'747,,747,747,747,747,,,,,747,747,,,,,,,747,,747,747,747,,,,747,747,747',
'824,824,824,824,824,824,,,,824,824,,,,824,,824,824,824,824,824,824,824',
',,,,,824,824,824,824,824,824,824,,,824,,,,,,824,824,824,824,824,824',
'824,824,824,824,824,824,,824,824,824,,824,824,824,824,824,487,487,487',
'487,487,487,487,,,487,487,,,,,,487,487,,824,,,824,,,824,824,,,824,,824',
'487,,487,824,487,487,,487,487,487,487,487,824,487,,,,824,824,824,824',
',824,824,824,824,,,,,824,824,,,,,,,824,,824,824,824,,,,824,824,824,211',
'211,211,211,211,211,,,,211,211,,,,211,,211,211,211,211,211,211,211,',
',,,,211,211,211,211,211,211,211,,,211,,,,,,211,211,211,211,211,211,211',
'211,211,211,211,211,,211,211,211,,211,211,211,211,211,480,480,480,480',
'480,480,480,,,480,480,,,,,,480,480,,211,,,211,,,211,211,,,211,,211,480',
',480,211,480,480,,480,480,480,480,480,211,480,,,,211,211,211,211,,211',
'211,211,211,,,,,211,211,,,,,,,211,,211,211,211,,,,211,211,211,33,33',
'33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33',
'33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33',
'33,33,33,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,,33,,,33',
',,33,33,,,33,,33,479,,479,33,479,479,,479,479,479,479,479,33,479,,,',
'33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33,33,,,,33,33,33,752',
'752,752,752,752,752,,,,752,752,,,,752,,752,752,752,752,752,752,752,',
',,,,752,752,752,752,752,752,752,,,752,,,,,,752,752,752,752,752,752,752',
'752,752,752,752,752,,752,752,752,,752,752,752,752,752,329,329,329,329',
'329,329,329,329,329,329,329,,329,329,,,329,329,,752,,,752,,,752,752',
',,752,,752,329,,329,752,329,329,,329,329,329,329,329,752,329,,,,752',
'752,752,752,,752,752,752,752,,,,,752,752,,,,,,,752,,752,752,752,,,,752',
'752,752,756,756,756,756,756,756,,,,756,756,,,,756,,756,756,756,756,756',
'756,756,,,,,,756,756,756,756,756,756,756,,,756,,,,,,756,756,756,756',
'756,756,756,756,756,756,756,756,,756,756,756,,756,756,756,756,756,535',
',,,,,,,,,,,,,,,535,535,,756,,,756,,,756,756,,,756,,756,535,,535,756',
'535,535,,535,535,,,535,756,535,,,,756,756,756,756,,756,756,756,756,',
',,,756,756,,,,,,,756,,756,756,756,,,,756,756,756,977,977,977,977,977',
'977,,,,977,977,,,,977,,977,977,977,977,977,977,977,,,,,,977,977,977',
'977,977,977,977,,,977,,,,,,977,977,977,977,977,977,977,977,977,977,977',
'977,,977,977,977,,977,977,977,977,977,488,488,488,488,488,488,488,488',
',488,488,,,,,,488,488,,977,,,977,,,977,977,,,977,,977,488,,488,977,488',
'488,,488,488,488,488,488,977,488,,,,977,977,977,977,,977,977,977,977',
',,,,977,977,,,,,,,977,,977,977,977,,,,977,977,977,767,767,767,767,767',
'767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767',
'767,767,767,767,,,767,,,,,,767,767,767,767,767,767,767,767,767,767,767',
'767,,767,767,767,,767,767,767,767,767,478,,,,,,,,,,,,,,,,478,478,,767',
',,767,,,767,767,,,767,,767,478,,,767,478,478,,478,478,,,,767,,,,,767',
'767,767,767,,767,767,767,767,,,,,767,767,,,,,,,767,,767,767,767,,,,767',
'767,767,972,972,972,972,972,972,,,,972,972,,,,972,,972,972,972,972,972',
'972,972,,,,,,972,972,972,972,972,972,972,,,972,,,,,,972,972,972,972',
'972,972,972,972,972,972,972,972,,972,972,972,,972,972,972,972,972,477',
',,,,,,,,,,,,,,,477,477,,972,,,972,,,972,972,,,972,,972,477,,477,972',
'477,477,,477,477,,,,972,,,,,972,972,972,972,,972,972,972,972,,,,,972',
'972,,,,,,,972,,972,972,972,,,,972,972,972,584,584,584,584,584,584,,',
',584,584,,,,584,,584,584,584,584,584,584,584,,,,,,584,584,584,584,584',
'584,584,,,584,,,,,,584,584,584,584,584,584,584,584,584,584,584,584,',
'584,584,584,,584,584,584,584,584,476,,,,,,,,,,,,,,,,476,476,,584,,,584',
',,584,584,,,584,,584,476,,476,584,476,476,,476,476,,,,584,,,,,584,584',
'584,584,,584,584,584,584,,,,,584,584,,,,,,,584,,584,584,584,,,,584,584',
'584,122,122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122,122',
',,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122',
'122,122,122,,122,122,122,,122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122',
',,122,,,122,122,,,122,,,,,,122,,,,,,,,,122,,,,,122,122,122,122,,122',
'122,122,122,,,,,122,122,,,,,,,122,,122,122,122,,,,122,122,122,123,123',
'123,,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123',
'123,123,123,123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123',
',123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123',
'123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123',
',,,,123,123,,,,,,,123,,123,123,123,,,,123,123,123,124,124,124,,124,',
',,124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124,124',
'124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124,124',
',124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,',
',,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,,,,124,,124,124,124,,,,124,124,124,125,125,125,,125,,,,125,125,,',
',125,,125,125,125,125,125,125,125,,,,,,125,125,125,125,125,125,125,',
',125,,,,,,,125,,,125,125,125,125,125,125,125,125,,125,125,125,,125,125',
'125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,,,,,125,,',
',,,,,,125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,,,,,,125',
',125,125,125,,,,125,125,125,126,126,126,126,126,,,,126,126,,,,126,,126',
'126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126,,,,,',
'126,126,,126,126,126,126,126,126,126,126,126,,126,126,126,,126,126,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,126,,,,126,,,',
',,,,,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126',
',126,126,126,,,,126,126,126,520,520,520,,520,,,,520,520,,,,520,,520',
'520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,',
',520,,,520,520,520,520,520,520,520,520,,520,520,520,,520,520,,,520,',
',,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,,,,,,,,,,,,,,,,,,,520,520',
'520,520,,520,520,520,520,,,,,520,520,,,,,,,520,,520,520,520,212,212',
'212,,212,520,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212',
'212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212',
'212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,',
',212,212,,,212,,212,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212',
'212,212,,,,,212,212,,,,,,,212,,212,212,212,,,,212,212,212,213,213,213',
',213,,,,213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213',
'213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213',
'213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213',
',,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,',
',,,213,213,,,,,,,213,,213,213,213,,,,213,213,213,214,214,214,,214,,',
',214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214',
',214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,',
',,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214',
',,,,,,214,,214,214,214,,,,214,214,214,215,215,215,,215,,,,215,215,,',
',215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,',
',215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215',
'215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,',
',,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,,,,215',
',215,215,215,,,,215,215,215,216,216,216,,216,,,,216,216,,,,216,,216',
'216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,',
',216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216,216,216',
'216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216',
',,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,,,,216,,216,216',
'216,,,,216,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217',
'217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217',
'217,217,217,217,217,217,217,217,217,217,,217,217,217,217,217,,,,,,,',
',,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,217,,217,,,217,,,,,,217',
',,,,217,217,217,217,,217,217,217,217,,,,,217,217,,,,,,,217,,217,217',
'217,,,,217,217,217,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637',
'637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637',
'637,637,637,637,637,637,,637,637,637,,637,637,637,637,637,,,,,,,,,,',
',,,,,,,,,637,,,637,,,637,637,,,637,,637,,,,637,,,,,,,,,637,,,,,637,637',
'637,637,,637,637,637,637,,,,,637,637,,,,,,,637,,637,637,637,,,,637,637',
'637,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638',
',,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638',
'638,638,638,,638,638,638,,638,638,638,638,638,,,,,,,,,,,,,,,,,,,,638',
',,638,,,638,638,,,638,,,,,,638,,,,,,,,,638,,,,,638,638,638,638,,638',
'638,638,638,,,,,638,638,,,,,,,638,,638,638,638,,,,638,638,638,639,639',
'639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639',
'639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639',
'639,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,',
'639,639,,,639,,639,,639,,639,,,639,,,,,,639,,,,,639,639,639,639,,639',
'639,639,639,,,,,639,639,,,,,,,639,,639,639,639,,,,639,639,639,223,223',
'223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,,223,,,,,223,223,223,223,,223,223,223,223',
',,,,223,223,,,,,,,223,,223,223,223,,,,223,223,223,224,224,224,,224,',
',,224,224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224',
'224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224',
',224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,',
',,,224,,,,,,,,,224,,,,,224,224,224,224,,224,224,224,224,,,,,224,224',
',,,,,,224,,224,224,224,,,,224,224,224,225,225,225,,225,,,,225,225,,',
',225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,',
',225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,,225,225',
'225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,',
',,,,,,225,,,,,225,225,225,225,,225,225,225,225,,,,,225,225,225,,,,,',
'225,,225,225,225,,,,225,225,225,512,512,512,512,512,,,,512,512,,,,512',
',512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512',
',,,,,512,512,512,512,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,512,,',
',512,,,,,,,,,512,,,,,512,512,512,512,,512,512,512,512,,,,,512,512,,',
',,,512,512,,512,512,512,,,,512,512,512,506,506,506,,506,,,,506,506,',
',,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506',
',,506,,,,,,,506,,,506,506,506,506,506,506,506,506,,506,506,506,,506',
'506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,506',
',,,,,,,,506,,,,,506,506,506,506,,506,506,506,506,,,,,506,506,,,,,,,506',
',506,506,506,,,,506,506,506,504,504,504,,504,,,,504,504,,,,504,,504',
'504,504,504,504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,',
',504,,,504,504,504,504,504,504,504,504,504,504,504,504,,504,504,504',
'504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,504,,504,,,504',
',,,,,504,,,,,504,504,504,504,,504,504,504,504,,,,,504,504,,,,,,,504',
',504,504,504,,,,504,504,504,949,949,949,,949,,,,949,949,,,,949,,949',
'949,949,949,949,949,949,,,,,,949,949,949,949,949,949,949,,,949,,,,,',
',949,,,949,949,949,949,949,949,949,949,,949,949,949,,949,949,,,949,',
',,,,,,,,,,,,,,,,,,949,,,949,,,949,949,,,949,,,,,,,,,,,,,,,,,,,,949,949',
'949,949,,949,949,949,949,,,,,949,949,,,,,,,949,,949,949,949,502,502',
'502,,502,949,,,502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502',
'502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502',
'502,502,502,502,502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502',
',,502,502,,,502,,502,,502,,502,,,502,,,,,,502,,,,,502,502,502,502,,502',
'502,502,502,,,,,502,502,,,,,,,502,,502,502,502,,,,502,502,502,236,236',
'236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236',
'236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236',
',236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236',
'236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236',
',,,,236,236,,,,,,,236,,236,236,236,,,,236,236,236,239,239,239,,239,',
',,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,,,,239,,239,239,239,,,,239,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
'240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,',
',,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,,,,240',
',240,240,240,,,,240,240,240,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,,,,241,,241,241',
'241,,,,241,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242',
'242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242',
'242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,',
',,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242',
'242,242,,242,242,242,242,,,,,242,242,,,,,,,242,,242,242,242,,,,242,242',
'242,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,,,,243,,243,243,243,,,,243,243,243,244,244',
'244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244',
'244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244',
',244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244',
'244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244',
',,,,244,244,,,,,,,244,,244,244,244,,,,244,244,244,245,245,245,,245,',
',,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,,,,245,,245,245,245,,,,245,245,245,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
'246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,',
',,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,,,,246',
',246,246,246,,,,246,246,246,247,247,247,,247,,,,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247',
',,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,,,,247,,247,247',
'247,,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248',
'248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248',
'248,248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,',
',,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248',
'248,248,,248,248,248,248,,,,,248,248,,,,,,,248,,248,248,248,,,,248,248',
'248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249',
'249,249,249,,,,,249,249,,,,,,,249,,249,249,249,,,,249,249,249,250,250',
'250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250',
'250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250',
',250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250',
'250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250',
',,,,250,250,,,,,,,250,,250,250,250,,,,250,250,250,251,251,251,,251,',
',,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,,,,251,,251,251,251,,,,251,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
'252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,',
',,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,,,,252',
',252,252,252,,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253',
',,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,,,,253,,253,253',
'253,,,,253,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254',
'254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254',
'254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,',
',,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254',
'254,254,,254,254,254,254,,,,,254,254,,,,,,,254,,254,254,254,,,,254,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255',
'255,255,255,,,,,255,255,,,,,,,255,,255,255,255,,,,255,255,255,256,256',
'256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256',
'256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256',
',256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256',
'256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256',
',,,,256,256,,,,,,,256,,256,256,256,,,,256,256,256,257,257,257,,257,',
',,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,,,,257,,257,257,257,,,,257,257,257,258,258,258,,258,,,,258,258,,',
',258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,',
',258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258',
'258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,',
',,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,,,,258',
',258,258,258,,,,258,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259',
',,,,259,259,259,259,,259,259,259,259,,,,,259,259,,,,,,,259,,259,259',
'259,,,,259,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260',
'260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260',
'260,260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,',
',,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260',
'260,260,,260,260,260,260,,,,,260,260,,,,,,,260,,260,260,260,,,,260,260',
'260,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265,265',
',,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265',
'265,265,265,,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265',
',,265,,,265,265,,,265,,,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265',
'265,265,265,,,,,265,265,,,,,,,265,,265,265,265,,,,265,265,265,642,642',
'642,642,642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,,642',
'642,642,642,642,642,642,,,642,,,,,,642,642,,642,642,642,642,642,642',
'642,642,642,,642,642,642,,642,642,642,642,642,,,,,,,,,,,,,,,,,,,,642',
',,642,,,642,642,,,642,,642,,,,642,,,,,,,,,642,,,,,642,642,642,642,,642',
'642,642,642,,,,,642,642,,,,,,,642,,642,642,642,,,,642,642,642,272,272',
'272,,272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272',
'272,272,272,272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272',
'272,272,272,272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,',
'272,272,,,272,,272,,272,,272,,,272,,,,,,272,,,,,272,272,272,272,,272',
'272,272,272,,,,,272,272,,,,,,,272,,272,272,272,,,,272,272,272,273,273',
'273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273',
'273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273',
'273,273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,',
'273,273,,,273,,273,,273,,273,,,273,,,,,,273,,,,,273,273,273,273,,273',
'273,273,273,,,,,273,273,,,,,,,273,,273,273,273,,,,273,273,273,281,281',
'281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281',
'281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281',
'281,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,',
'281,281,,,281,,281,,281,,281,,,281,,,,,,281,,,,,281,281,281,281,,281',
'281,281,281,,,,,281,281,281,,,,,,281,,281,281,281,,,,281,281,281,902',
'902,902,,902,,,,902,902,,,,902,,902,902,902,902,902,902,902,,,,,,902',
'902,902,902,902,902,902,,,902,,,,,,,902,,,902,902,902,902,902,902,902',
'902,,902,902,902,,902,902,,,902,,,,,,,,,,,,,,,,,,,,902,,,902,,,902,902',
',,902,,,,,,,,,,,,,,,,,,,,902,902,902,902,,902,902,902,902,,,,,902,902',
',,,,,,902,,902,902,902,288,288,288,,288,902,,,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288',
',,288,288,288,288,288,288,288,288,,288,288,288,,288,288,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,,288,,',
',,288,288,288,288,,288,288,288,288,,,,,288,288,,,,,,,288,,288,288,288',
',,,288,288,288,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290',
'290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290',
'290,290,290,290,290,,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,',
',,,,,290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290',
'290,,290,290,290,290,,,,,290,290,,,,,,,290,,290,290,290,,,,290,290,290',
'293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,',
',293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293,293',
'293,293,,293,293,293,,293,293,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293',
',,293,293,,,293,,,,,,293,,,,,,,,,293,,,,,293,293,293,293,,293,293,293',
'293,,,,,293,293,,,,,,,293,,293,293,293,,,,293,293,293,294,294,294,,294',
',,,294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294',
'294,294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294',
'294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294',
',,,,,294,,,,,,,,,294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294',
',,,,,,294,,294,294,294,,,,294,294,294,893,893,893,,893,,,,893,893,,',
',893,,893,893,893,893,893,893,893,,,,,,893,893,893,893,893,893,893,',
',893,,,,,,,893,,,893,893,893,893,893,893,893,893,,893,893,893,,893,893',
',,893,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,893,,,893,,,,,,,,,,,,,,,,,',
',,893,893,893,893,,893,893,893,893,,,,,893,893,,,,,,,893,,893,893,893',
'299,299,299,299,299,893,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,,299,299,299,299,299,299,299,,,299,,,,,,299,299,,299,299,299,299',
'299,299,299,299,299,,299,299,299,,299,299,299,299,299,,,,,,,,,,,,,,',
',,,,,299,,,299,,,299,299,,,299,,299,,,,299,,,,,,,,,299,,,,,299,299,299',
'299,,299,299,299,299,,,,,299,299,,,,,,,299,,299,299,299,,,,299,299,299',
'643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,',
',643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643',
'643,643,,643,643,643,,643,643,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643',
',,643,643,,,643,,,,,,643,,,,,,,,,643,,,,,643,643,643,643,,643,643,643',
'643,,,,,643,643,,,,,,,643,,643,643,643,,,,643,643,643,878,878,878,,878',
',,,878,878,,,,878,,878,878,878,878,878,878,878,,,,,,878,878,878,878',
'878,878,878,,,878,,,,,,,878,,,878,878,878,878,878,878,878,878,,878,878',
'878,,878,878,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878,,,878',
',,,,,878,,,,,,,,,878,,,,,878,878,878,878,,878,878,878,878,,,,,878,878',
',,,,,,878,,878,878,878,,,,878,878,878,877,877,877,,877,,,,877,877,,',
',877,,877,877,877,877,877,877,877,,,,,,877,877,877,877,877,877,877,',
',877,,,,,,,877,,,877,877,877,877,877,877,877,877,877,877,877,877,,877',
'877,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,,,877',
',877,,,877,,,,,,877,,,,,877,877,877,877,,877,877,877,877,,,,,877,877',
',,,,,,877,,877,877,877,,,,877,877,877,646,646,646,,646,,,,646,646,,',
',646,,646,646,646,646,646,646,646,,,,,,646,646,646,646,646,646,646,',
',646,,,,,,,646,,,646,646,646,646,646,646,646,646,646,646,646,646,,646',
'646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,,,646,646,,,646,,646,,646',
',646,,,646,,,,,,646,,,,,646,646,646,646,,646,646,646,646,,,,,646,646',
',,,,,,646,,646,646,646,,,,646,646,646,71,71,71,,71,,,,71,71,,,,71,,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71',
'71,71,71,71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71',
'71,,,71,,71,,,,,,,,,,,,,,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,',
',,71,,71,71,71,593,593,593,,593,71,,,593,593,,,,593,,593,593,593,593',
'593,593,593,,,,,,593,593,593,593,593,593,593,,,593,,,,,,,593,,,593,593',
'593,593,593,593,593,593,,593,593,593,,593,593,593,593,593,,,,,,,,,,',
',,,,,,,,,593,,,593,,,593,593,,,593,,593,,,,593,,,,,,,,,593,,,,,593,593',
'593,593,,593,593,593,593,,,,,593,593,,,,,,,593,,593,593,593,,,,593,593',
'593,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572',
',,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572',
'572,572,572,,572,572,572,,572,572,572,572,572,,,,,,,,,,,,,,,,,,,,572',
',,572,,,572,572,,,572,,,,,,572,,,,,,,,,572,,,,,572,572,572,572,,572',
'572,572,572,,,,,572,572,,,,,,,572,,572,572,572,,,,572,572,572,992,992',
'992,,992,,,,992,992,,,,992,,992,992,992,992,992,992,992,,,,,,992,992',
'992,992,992,992,992,,,992,,,,,,,992,,,992,992,992,992,992,992,992,992',
'992,992,992,992,,992,992,992,992,992,,,,,,,,,,,,,,,,,,,,992,,,992,,',
'992,992,,,992,,992,,992,,992,,,992,,,,,,992,,,,,992,992,992,992,,992',
'992,992,992,,,,,992,992,,,,,,,992,,992,992,992,,,,992,992,992,594,594',
'594,,594,,,,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594,594',
'594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594,594',
'594,594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,',
'594,594,,,594,,594,,594,,594,,,594,,,,,,594,,,,,594,594,594,594,,594',
'594,594,594,,,,,594,594,,,,,,,594,,594,594,594,,,,594,594,594,604,604',
'604,,604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604',
'604,604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604,604,604,604',
'604,604,604,604,,604,604,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,',
'604,604,,,604,,604,,604,,604,,,604,,,,,,604,,,,,604,604,604,604,,604',
'604,604,604,,,,,604,604,,,,,,,604,,604,604,604,,,,604,604,604,20,20',
'20,,20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20',
',,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,',
',,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20',
'20,,20,20,20,20,,,,,20,20,,,,,,,20,,20,20,20,,,,20,20,20,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546',
'546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,546,546',
'546,546,546,,546,546,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546',
'546,,,546,,,,,,546,,,546,,,,,,546,,,,,546,546,546,546,,546,546,546,546',
',,,,546,546,,,,,,,546,,546,546,546,,,,546,546,546,543,543,543,,543,',
',,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543',
'543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543,543,543,543',
'543,,543,543,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543',
',543,,,,543,,,543,,,,,,543,,,,,543,543,543,543,,543,543,543,543,,,,',
'543,543,,,,,,,543,,543,543,543,,,,543,543,543,537,537,537,,537,,,,537',
'537,,,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537',
'537,,,537,,,,,,,537,,,537,537,537,537,537,537,537,537,,537,537,537,',
'537,537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,,',
',,537,,,,,,,,,537,,,,,537,537,537,537,,537,537,537,537,,,,,537,537,',
',,,,,537,,537,537,537,,,,537,537,537,29,29,29,,29,,,,29,29,,,,29,,29',
'29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29',
'29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29',
',,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,',
',,,29,29,,,,,,,29,,29,29,29,,,,29,29,29,30,30,30,,30,,,,30,30,,,,30',
',30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30',
'30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30',
',,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30',
'30,,,,,30,30,,,,,,,30,,30,30,30,,,,30,30,30,31,31,31,,31,,,,31,31,,',
',31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,',
'31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,',
',,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31',
'31,31,31,,,,,31,31,,,,,,,31,,31,31,31,,,,31,31,31,34,34,34,,34,,,,34',
'34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,',
'34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,',
',,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34',
',,,,34,34,,,,,,,34,,34,34,34,35,35,35,,35,34,,,35,35,,,,35,,35,35,35',
'35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35',
'35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,',
'35,,,,,,,,,,,,,,,,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,,35',
',35,35,35,534,534,534,,534,35,,,534,534,,,,534,,534,534,534,534,534',
'534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534',
'534,534,534,534,534,,534,534,534,,534,534,534,534,534,,,,,,,,,,,,,,',
',,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,,534,,,,,534,534,534',
'534,,534,534,534,534,,,,,534,534,,,,,,,534,,534,534,534,,,,534,534,534',
'531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531,,,,',
',531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531',
'531,531,,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531',
',,531,531,,,531,,,,,,531,,,,,,,,,531,,,,,531,531,531,531,,531,531,531',
'531,,,,,531,531,,,,,,,531,,531,531,531,,,,531,531,531,41,41,41,,41,',
',,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,',
',,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,',
',,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,,41,,,,,41,41,41,41,',
'41,41,41,41,,,,,41,41,,,,,,,41,,41,41,41,,,,41,41,41,42,42,42,,42,,',
',42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,',
',,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,',
',,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42',
'42,42,42,,,,,42,42,,,,,,,42,,42,42,42,,,,42,42,42,528,528,528,,528,',
',,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528',
'528,528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528',
',528,528,,,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,,,',
',,,,,,,,,,,528,528,528,528,,528,528,528,528,,,,,528,528,,,,,,,528,,528',
'528,528,44,44,44,,44,528,,,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44',
'44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44',
',44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,',
',,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,,,,44,,44,44,44,,,',
'44,44,44,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,',
'45,,,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,,,,45,,45,45,45,,,,45,45',
'45,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47',
'47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47',
'47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,',
',47,47,47,47,,47,47,47,47,,,,,47,47,,,,,,,47,,47,47,47,,,,47,47,47,522',
'522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522',
'522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522',
'522,522,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,522,,,522,,522,,522,,522,,,522,,,,,,522,,,,,522,522,522,522,,522',
'522,522,522,,,,,522,522,,,,,,,522,,522,522,522,,,,522,522,522,61,61',
'61,61,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61',
'61,,,61,,,,,,61,61,,61,61,61,61,61,61,61,61,61,,61,61,61,,61,61,61,61',
'61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,61,,,,61,,,,,,,,,61,,,,',
'61,61,61,61,,61,61,61,61,,,,,61,61,,,,,,,61,,61,61,61,,,,61,61,61,62',
'62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62',
'62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,62,62',
'62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,62,,,,,,62,,',
',,62,62,62,62,,62,62,62,62,,,,,62,62,,,,,,,62,,62,62,62,,,,62,62,62',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,63,,,,,,63,',
',,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,,,,63,,63,63,63,,,,63,63,63',
'635,635,635,635,635,,,,635,635,,,,635,,635,635,635,635,635,635,635,',
',,,,635,635,635,635,635,635,635,,,635,,,,,,635,635,,635,635,635,635',
'635,635,635,635,635,,635,635,635,,635,635,635,635,635,,,,,,,,,,,,,,',
',,,,,635,,,635,,,635,635,,,635,,635,,,,635,,,,,,,,,635,,,,,635,635,635',
'635,,635,635,635,635,,,,,635,635,,,,,,,635,,635,635,635,,,,635,635,635',
'66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66',
'66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66,66',
'66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,,66,,,,,66',
'66,66,66,,66,66,66,66,,,,,66,66,,,,,,,66,,66,66,66,,,,66,66,66,67,67',
'67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67',
',,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,',
',,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67',
'67,,67,67,67,67,,,,,67,67,,,,,,,67,,67,67,67,,,,67,67,67,70,70,70,,70',
',,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70',
',,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,70,70,70,,,,,,,',
',,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,,70,,,,,70,70,70,70',
',70,70,70,70,,,,,70,70,70,,,,,70,70,,70,70,70,,,,70,70,70,417,417,417',
',417,,,,417,417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417,417',
'417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417',
'417,417,,417,417,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417',
',,417,,,,,,417,,,,,,,,,417,,,,,417,417,417,417,,417,417,417,417,,,,',
'417,417,,,,,,,417,,417,417,417,,,,417,417,417,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72',
',,72,72,72,72,72,72,72,72,,72,72,72,,72,72,,,72,,,,,,,,,,,,,,,,,72,',
',72,,,72,,,72,72,,,72,,,,,,,,,,,,,,,,,,,,72,72,72,72,,72,72,72,72,,',
',,72,72,,,,,,,72,,72,72,72,73,73,73,,73,72,,,73,73,,,,73,,73,73,73,73',
'73,73,73,,,,,,73,73,73,73,73,73,73,,,73,,,,,,,73,,,73,73,73,73,73,73',
'73,73,,73,73,73,,73,73,,,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73,,,73',
',,,,,,,,,,,,,,,,,,,73,73,73,73,,73,73,73,73,,,,,73,73,,,,,,,73,,73,73',
'73,,,,,,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74',
'74,74,74,74,74,74,74,,74,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,',
',74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74',
'74,,,74,,,,,,117,117,117,117,117,,,,117,117,,,,117,,117,117,117,117',
'117,117,117,,,,,74,117,117,117,117,117,117,117,,,117,,,,,,117,117,117',
'117,117,117,117,117,117,117,117,117,,117,117,117,,117,117,117,117,117',
',,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,117,,,,117,,,,,,,,,117',
',,,,117,117,117,117,,117,117,117,117,,,,,117,117,,,,,,117,117,,117,117',
'117,,,,117,117,117,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307',
'307,307,307,,,,,,307,307,307,307,307,307,307,,,307,,,,,,,307,,,307,307',
'307,307,307,307,307,307,,307,307,307,,307,307,,,307,,,,,,,,,,,,,,,,',
',,,307,,,307,,,307,307,,,307,,,,,,,,,,,,,,,,,,,,307,307,307,307,,307',
'307,307,307,,,,,307,307,,,,307,,,307,,307,307,307,647,647,647,,647,307',
',,647,647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647',
'647,647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,647,647,647',
'647,,647,647,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647',
',,,647,,647,,,647,,,,,,647,,,,,647,647,647,647,,647,647,647,647,,,,',
'647,647,,,,,,,647,,647,647,647,,,,647,647,647,648,648,648,,648,,,,648',
'648,,,,648,,648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648',
'648,,,648,,,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,',
'648,648,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,',
',,648,,,,,,,,,648,,,,,648,648,648,648,,648,648,648,648,,,,,648,648,',
',,,,,648,,648,648,648,,,,648,648,648,649,649,649,,649,,,,649,649,,,',
'649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,',
'649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,,649,649',
'649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,,',
',,,,,,649,,,,,649,649,649,649,,649,649,649,649,,,,,649,649,,,,,,,649',
',649,649,649,,,,649,649,649,653,653,653,,653,,,,653,653,,,,653,,653',
'653,653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,',
',653,,,653,653,653,653,653,653,653,653,,653,653,653,,653,653,653,653',
'653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,,,,,653,,,,,,,,,653',
',,,,653,653,653,653,,653,653,653,653,,,,,653,653,,,,,,,653,,653,653',
'653,,,,653,653,653,859,859,859,,859,,,,859,859,,,,859,,859,859,859,859',
'859,859,859,,,,,,859,859,859,859,859,859,859,,,859,,,,,,,859,,,859,859',
'859,859,859,859,859,859,,859,859,859,,859,859,859,859,859,,,,,,,,,,',
',,,,,,,,,859,,,859,,,859,859,,,859,,859,,,,859,,,,,,,,,859,,,,,859,859',
'859,859,,859,859,859,859,,,,,859,859,,,,,,,859,,859,859,859,,,,859,859',
'859,654,654,654,,654,,,,654,654,,,,654,,654,654,654,654,654,654,654',
',,,,,654,654,654,654,654,654,654,,,654,,,,,,,654,,,654,654,654,654,654',
'654,654,654,,654,654,654,,654,654,654,654,654,,,,,,,,,,,,,,,,,,,,654',
',,654,,,654,654,,,654,,,,,,654,,,,,,,,,654,,,,,654,654,654,654,,654',
'654,654,654,,,,,654,654,,,,,,,654,,654,654,654,,,,654,654,654,856,856',
'856,,856,,,,856,856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856',
'856,856,856,856,856,,,856,,,,,,,856,,,856,856,856,856,856,856,856,856',
',856,856,856,,856,856,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856',
'856,,,856,,,,,,856,,,,,,,,,856,,,,,856,856,856,856,,856,856,856,856',
',,,,856,856,,,,,,,856,,856,856,856,,,,856,856,856,324,324,324,,324,',
',,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324',
'324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324',
',324,324,,,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,,,',
',,,,,,,,,,,324,324,324,324,,324,324,324,324,,,,,324,324,,,,,,,324,,324',
'324,324,678,678,678,,678,324,,,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678',
'678,678,678,678,,678,678,678,,678,678,678,678,678,,,,,,,,,,,,,,,,,,',
',678,,,678,,,678,678,,,678,,,,,,678,,,,,,,,,678,,,,,678,678,678,678',
',678,678,678,678,,,,,678,678,,,,,,,678,,678,678,678,,,,678,678,678,681',
'681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,,,681',
'681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681,681,681,681',
'681,,681,681,681,,681,681,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,',
',681,681,,,681,,,,,,681,,,,,,,,,681,,,,,681,681,681,681,,681,681,681',
'681,,,,,681,681,,,,,,,681,,681,681,681,,,,681,681,681,803,803,803,,803',
',,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803',
'803,803,803,,,803,,,,,,,803,,,803,803,803,803,803,803,803,803,,803,803',
'803,,803,803,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803',
',,,,,803,,,,,,,,,803,,,,,803,803,803,803,,803,803,803,803,,,,,803,803',
',,,,,,803,,803,803,803,,,,803,803,803,333,333,333,,333,,,,333,333,,',
',333,,333,333,333,333,333,333,333,,,,,,333,333,333,333,333,333,333,',
',333,,,,,,,333,,,333,333,333,333,333,333,333,333,,333,333,333,,333,333',
'333,333,333,,,,,,,,,,,,,,,,,,,,333,,,333,,,333,333,,,333,,,,,,333,,',
',,,,,,333,,,,,333,333,333,333,,333,333,333,333,,,,,333,333,,,,,,,333',
',333,333,333,,,,333,333,333,335,335,335,,335,,,,335,335,,,,335,,335',
'335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,,,335,,,,,',
',335,,,335,335,335,335,335,335,335,335,,335,335,335,,335,335,335,335',
'335,,,,,,,,,,,,,,,,,,,,335,,,335,335,,335,335,,,335,,,,,,335,,,,,,,',
',335,,,,,335,335,335,335,,335,335,335,335,,,,,335,335,,,,,,,335,,335',
'335,335,,,,335,335,335,684,684,684,,684,,,,684,684,,,,684,,684,684,684',
'684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,,,684,,,684',
'684,684,684,684,684,684,684,,684,684,684,,684,684,,,684,,,,,,,,,,,,',
',,,,,,,684,,,684,,,684,684,,,684,,,,,,,,,,,,,,,,,,,,684,684,684,684',
',684,684,684,684,,,,,684,684,,,,,,,684,,684,684,684,801,801,801,,801',
'684,,,801,801,,,,801,,801,801,801,801,801,801,801,,,,,,801,801,801,801',
'801,801,801,,,801,,,,,,,801,,,801,801,801,801,801,801,801,801,,801,801',
'801,,801,801,801,801,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,801,,,801',
',,,,,801,,,,,,,,,801,,,,,801,801,801,801,,801,801,801,801,,,,,801,801',
',,,,,,801,,801,801,801,,,,801,801,801,800,800,800,,800,,,,800,800,,',
',800,,800,800,800,800,800,800,800,,,,,,800,800,800,800,800,800,800,',
',800,,,,,,,800,,,800,800,800,800,800,800,800,800,,800,800,800,,800,800',
'800,800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,,800,,,,,,800,,',
',,,,,,800,,,,,800,800,800,800,,800,800,800,800,,,,,800,800,,,,,,,800',
',800,800,800,,,,800,800,800,799,799,799,,799,,,,799,799,,,,799,,799',
'799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799,,,,,',
',799,,,799,799,799,799,799,799,799,799,,799,799,799,,799,799,799,799',
'799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,799,,,,,,,,,799',
',,,,799,799,799,799,,799,799,799,799,,,,,799,799,,,,,,,799,,799,799',
'799,,,,799,799,799,798,798,798,,798,,,,798,798,,,,798,,798,798,798,798',
'798,798,798,,,,,,798,798,798,798,798,798,798,,,798,,,,,,,798,,,798,798',
'798,798,798,798,798,798,,798,798,798,,798,798,798,798,798,,,,,,,,,,',
',,,,,,,,,798,,,798,,,798,798,,,798,,,,,,798,,,,,,,,,798,,,,,798,798',
'798,798,,798,798,798,798,,,,,798,798,,,,,,,798,,798,798,798,,,,798,798',
'798,785,785,785,,785,,,,785,785,,,,785,,785,785,785,785,785,785,785',
',,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785,785',
'785,785,785,,785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,,,,,,,785',
',,785,,,785,785,,,785,,,,,,785,,,,,,,,,785,,,,,785,785,785,785,,785',
'785,785,785,,,,,785,785,,,,,,,785,,785,785,785,,,,785,785,785,352,352',
'352,,352,,,,352,352,,,,352,,352,352,352,352,352,352,352,,,,,,352,352',
'352,352,352,352,352,,,352,,,,,,,352,,,352,352,352,352,352,352,352,352',
',352,352,352,,352,352,352,352,352,,,,,,,,,,,,,,,,,,,,352,,,352,,,352',
'352,,,352,,,,,,352,,,,,,,,,352,,,,,352,352,352,352,,352,352,352,352',
',,,,352,352,,,,,,,352,,352,352,352,,,,352,352,352,777,777,777,,777,',
',,777,777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777,777,777,777',
'777,777,,,777,,,,,,,777,,,777,777,777,777,777,777,777,777,,777,777,777',
',777,777,777,777,777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,,777,,',
',,,777,,,,,,,,,777,,,,,777,777,777,777,,777,777,777,777,,,,,777,777',
',,,,,,777,,777,777,777,,,,777,777,777,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5',
'5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5',
'5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5',
'5,5,,5,5,5,5,,,,,5,5,,,,,,,5,,5,5,5,,,,5,5,5,695,695,695,,695,,,,695',
'695,,,,695,,695,695,695,695,695,695,695,,,,,,695,695,695,695,695,695',
'695,,,695,,,,,,,695,,,695,695,695,695,695,695,695,695,,695,695,695,',
'695,695,,,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,,,,',
',,,,,,,,,,695,695,695,695,,695,695,695,695,,,,,695,695,,,,,,,695,,695',
'695,695,467,467,467,,467,695,,,467,467,,,,467,,467,467,467,467,467,467',
'467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467,467,467,467',
'467,467,467,467,,467,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,',
',467,,,467,,,467,467,,,467,,,,,,467,,,,,,,,,467,,,,,467,467,467,467',
',467,467,467,467,,,,,467,467,,,,,,,467,,467,467,467,,,,467,467,467,753',
'753,753,,753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,,753',
'753,753,753,753,753,753,,,753,,,,,,,753,,,753,753,753,753,753,753,753',
'753,,753,753,753,,753,753,753,753,753,,,,,,,,,,,,,,,,,,,,753,,,753,',
',753,753,,,753,,,,,,753,,,,,,,,,753,,,,,753,753,753,753,,753,753,753',
'753,,,,,753,753,,,,,,,753,,753,753,753,,,,753,753,753,373,373,373,,373',
',,,373,373,,,,373,,373,373,373,373,373,373,373,,,,,,373,373,373,373',
'373,373,373,,,373,,,,,,,373,,,373,373,373,373,373,373,373,373,,373,373',
'373,,373,373,373,373,373,,,,,,,,,,,,,,,,,,,,373,,,373,,,373,373,,,373',
',,,,,373,,,,,,,,,373,,,,,373,373,373,373,,373,373,373,373,,,,,373,373',
',,,,,,373,,373,373,373,,,,373,373,373,466,466,466,,466,,,,466,466,,',
',466,,466,466,466,466,466,466,466,,,,,,466,466,466,466,466,466,466,',
',466,,,,,,,466,,,466,466,466,466,466,466,466,466,,466,466,466,,466,466',
'466,466,466,,,,,,,,,,,,,,,,,,,,466,,,466,,,466,466,,,466,,,,,,466,,',
',,,,,,466,,,,,466,466,466,466,,466,466,466,466,,,,,466,466,,,,,,,466',
',466,466,466,,,,466,466,466,465,465,465,,465,,,,465,465,,,,465,,465',
'465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,,,,,',
',465,,,465,465,465,465,465,465,465,465,,465,465,465,,465,465,465,465',
'465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,,,,,,465,,,,,,,,,465',
',,,,465,465,465,465,,465,465,465,465,,,,,465,465,,,,,,,465,,465,465',
'465,,,,465,465,465,463,463,463,,463,,,,463,463,,,,463,,463,463,463,463',
'463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463,,,463,463',
'463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463,,,,,,,',
',,,,,,,,,,,,463,,,463,,,463,463,,,463,,463,,463,,463,,,463,,,,,,463',
',,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463,,463,463',
'463,,,,463,463,463,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700',
'700,700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,,700,,,700,700',
'700,700,700,700,700,700,,700,700,700,,700,700,700,700,700,,,,,,,,,,',
',,,,,,,,,700,,,700,,,700,700,,,700,,700,,,,700,,,,,,,,,700,,,,,700,700',
'700,700,,700,700,700,700,,,,,700,700,,,,,,,700,,700,700,700,,,,700,700',
'700,718,718,718,,718,,,,718,718,,,,718,,718,718,718,718,718,718,718',
',,,,,718,718,718,718,718,718,718,,,718,,,,,,,718,,,718,718,718,718,718',
'718,718,718,,718,718,718,,718,718,718,718,718,,,,,,,,,,,,,,,,,,,,718',
',,718,,,718,718,,,718,,,,,,718,,,,,,,,,718,,,,,718,718,718,718,,718',
'718,718,718,,,,,718,718,,,,,,,718,,718,718,718,,,,718,718,718,389,389',
'389,,389,,,,389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389',
'389,389,389,389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389',
',389,389,389,,389,389,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389',
'389,,716,389,716,716,716,716,716,389,,,,,,,,716,389,,,,,389,389,389',
'389,,389,389,389,389,,,,,389,389,,716,,,,,389,,389,389,389,451,716,716',
'389,389,389,716,451,451,451,,,451,451,451,,451,,,,,,,,,451,451,451,451',
',,,,,,,451,451,,451,451,451,451,451,,,,,,,,,,,,,,,,,,,,,,,451,451,451',
'451,451,451,451,451,451,451,451,451,451,451,,,451,451,451,,,451,,,451',
',,451,451,,451,,451,,451,,451,451,,451,451,451,451,451,,451,451,451',
',,,,,911,,911,911,911,911,911,,451,,,451,451,451,451,911,451,,451,450',
',,,451,451,,450,450,450,,,450,450,450,,450,,911,,,,,,,450,450,450,450',
'911,911,,,,911,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450',
'450,450,450,450,450,450,450,450,450,450,450,450,450,,,450,450,450,,',
'450,,,450,,,450,450,,450,,450,,450,,450,450,,450,450,450,450,450,,450',
'450,450,,,,,,913,,913,913,913,913,913,,450,,,450,450,450,450,913,450',
',450,27,,,,450,450,,27,27,27,,,27,27,27,,27,,913,,,,,,,27,27,27,,913',
'913,,,,913,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27',
',27,,27,27,,27,27,27,27,27,,27,27,27,909,,909,909,909,909,909,,,,,,',
'27,,909,27,27,441,27,,27,,,,441,441,441,27,27,441,441,441,,441,,,909',
',,,,,441,441,441,909,909,909,909,,,,909,441,441,,441,441,441,441,441',
',,,,,,,,,,,,,,,,,,,,,,441,441,441,441,441,441,441,441,441,441,441,441',
'441,441,,,441,441,441,,,441,,441,441,,,441,441,,441,,441,,441,,441,441',
',441,441,441,441,441,59,441,441,441,,,,59,59,59,,,59,59,59,,59,441,',
',441,441,,441,,441,59,59,59,,,,441,441,,,59,59,,59,59,59,59,59,,,,,',
',,,,,,,,,,,,,,,,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59',
',,59,,,59,,,59,59,,59,,59,,59,,59,59,,59,59,59,59,59,,59,28,59,,,,,',
'28,28,28,,,28,28,28,59,28,,59,59,59,59,,59,,59,28,28,,,59,59,,,,,28',
'28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28',
'28,28,28,28,,28,492,28,,,,,,492,492,492,,,492,492,492,28,492,,28,28',
',28,,28,,492,492,,,,28,28,,,,,492,492,,492,492,492,492,492,,,,,,,,268',
'268,,,268,,,,,,,,268,268,,268,268,268,268,268,268,268,,,268,268,492',
',,268,268,268,268,492,,,,,492,492,,,,,,,268,268,,268,268,268,268,268',
'268,268,268,268,268,268,268,492,492,268,,,,,,,,,,,,,492,,,492,,,,,492',
',,,,,,492,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,,,,633,633,633,633,633,633,633,633',
'633,633,,,,,,633,633,633,633,633,633,633,633,633,,,633,,,,,,,,633,633',
',633,633,633,633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,,,,,',
',,,633,633,,633,633,633,633,633,633,633,633,633,633,633,633,,,633,633',
',,,,,,,,,,,,,633,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,',
'9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9',
'9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9',
',,,,,,,,,,,,,9,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,,,,408,408,408,408,408,408,408',
'408,408,408,,,,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,408',
'408,,408,408,408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,',
',,,,,,,408,408,,408,408,408,408,408,408,408,408,408,408,408,408,,,408',
'408,,,,,,,,,,,,,,408,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
',,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8',
'8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,',
',8,8,,,,,,,,,,,,,,8,759,759,759,759,759,759,759,759,759,759,759,759',
'759,759,759,759,759,759,759,759,759,759,759,759,,,,759,759,759,759,759',
'759,759,759,759,759,,,,,,759,759,759,759,759,759,759,759,759,,,759,',
',,,,,,759,759,,759,759,759,759,759,759,759,,,759,759,,,,759,759,759',
'759,,,,,,,,,,,,,,759,759,,759,759,759,759,759,759,759,759,759,759,759',
'759,219,219,759,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,,,219',
'219,,,,219,219,219,219,,,,,,219,,,,,,,,219,219,,219,219,219,219,219',
'219,219,219,219,219,219,219,641,641,219,,641,,,,,,,,641,641,,641,641',
'641,641,641,641,641,,,641,641,,,,641,641,641,641,,,,,,641,,,,,,,,641',
'641,,641,641,641,641,641,641,641,641,641,641,641,641,596,596,641,,596',
',,,,,,,596,596,,596,596,596,596,596,596,596,,,596,596,,,,596,596,596',
'596,,,,,,596,,,,,,,,596,596,,596,596,596,596,596,596,596,596,596,596',
'596,596,462,462,596,,462,,,,,,,,462,462,,462,462,462,462,462,462,462',
',,462,462,,,,462,462,462,462,,,,,,462,,,,,,,,462,462,,462,462,462,462',
'462,462,462,462,462,462,462,462,461,461,462,,461,,,,,,,,461,461,,461',
'461,461,461,461,461,461,,,461,461,,,,461,461,461,461,,,,,,461,,,,,,',
',461,461,,461,461,461,461,461,461,461,461,461,461,461,461,994,994,461',
',994,,,,,,,,994,994,,994,994,994,994,994,994,994,,,994,994,,,,994,994',
'994,994,,,,,,994,,,,,,,,994,994,,994,994,994,994,994,994,994,994,994',
'994,994,994,989,989,994,,989,,,,,,,,989,989,,989,989,989,989,989,989',
'989,,,989,989,,,,989,989,989,989,,,,,,989,,,,,,,,989,989,,989,989,989',
'989,989,989,989,989,989,989,989,989,220,220,989,,220,,,,,,,,220,220',
',220,220,220,220,220,220,220,,,220,220,,,,220,220,220,220,,,,,,,,,,',
',,,220,220,,220,220,220,220,220,220,220,220,220,220,220,220,603,603',
'220,,603,,,,,,,,603,603,,603,603,603,603,603,603,603,,,603,603,,,,603',
'603,603,603,,,,,,603,,,,,,,,603,603,,603,603,603,603,603,603,603,603',
'603,603,603,603,602,602,603,,602,,,,,,,,602,602,,602,602,602,602,602',
'602,602,,,602,602,,,,602,602,602,602,,,,,,602,,,,,,,,602,602,,602,602',
'602,602,602,602,602,602,602,602,602,602,993,993,602,,993,,,,,,,,993',
'993,,993,993,993,993,993,993,993,,,993,993,,,,993,993,993,993,,,,,,993',
',,,,,,,993,993,,993,993,993,993,993,993,993,993,993,993,993,993,532',
'532,993,,532,,,,,,,,532,532,,532,532,532,532,532,532,532,,,532,532,',
',,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532,532,532',
'532,532,532,532,532,533,533,532,,533,,,,,,,,533,533,,533,533,533,533',
'533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,,,,,,,533,533,,533',
'533,533,533,533,533,533,533,533,533,533,533,595,595,533,,595,,,,,,,',
'595,595,,595,595,595,595,595,595,595,,,595,595,,,,595,595,595,595,,',
',,,595,,,,,,,,595,595,,595,595,595,595,595,595,595,595,595,595,595,595',
'523,523,595,,523,,,,,,,,523,523,,523,523,523,523,523,523,523,,,523,523',
',,,523,523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523,523',
'523,523,523,523,523,523,524,524,523,,524,,,,,,,,524,524,,524,524,524',
'524,524,524,524,,,524,524,,,,524,524,524,524,,,,,,524,,,,,,,,524,524',
',524,524,524,524,524,524,524,524,524,524,524,524,640,640,524,,640,,',
',,,,,640,640,,640,640,640,640,640,640,640,,,640,640,,,,640,640,640,640',
',,,,,640,,,,,,,,640,640,,640,640,640,640,640,640,640,640,640,640,640',
'640,218,218,640,,218,,,,,,,,218,218,,218,218,218,218,218,218,218,,,218',
'218,,,,218,218,218,218,,,,,,218,,,,,,,,218,218,,218,218,218,218,218',
'218,218,218,218,218,218,218,,348,218,348,348,348,348,348,,551,,551,551',
'551,551,551,348,,,,,,,,551,,712,,712,712,712,712,712,,,,,,348,348,,712',
',,,,551,348,348,348,348,,,,348,551,551,551,551,,,,551,712,,714,,714',
'714,714,714,714,712,712,712,712,,,,712,714,,757,,757,757,757,757,757',
',758,,758,758,758,758,758,757,,,,,714,,,758,,,,,,714,714,714,714,,,',
'714,757,,,,,,,,758,757,757,757,757,,,,757,758,758,758,758,,,915,758',
'915,915,915,915,915,,941,,941,941,941,941,941,915,,,,,,,,941,,943,,943',
'943,943,943,943,,,,,,915,,,943,,,,,941,,,915,915,,,,915,941,941,941',
'941,,,,941,943,,945,,945,945,945,945,945,943,943,943,943,,,,943,945',
',1000,,1000,1000,1000,1000,1000,,1009,,1009,1009,1009,1009,1009,1000',
',,,,945,,,1009,,,,,,,,945,945,,,,945,1000,,,,,,,,1009,,,1000,1000,,',
',1000,1009,1009,1009,1009,,,1011,1009,1011,1011,1011,1011,1011,1013',
',1013,1013,1013,1013,1013,1015,1011,1015,1015,1015,1015,1015,1036,1013',
'1036,1036,1036,1036,1036,,1015,,,,,,,1036,1011,,,,,,,1013,,,,1011,1011',
',1015,,1011,,1013,1013,,1036,,1013,,1015,1015,,,,1015,,1036,1036,,,',
'1036' ]
        racc_action_check = arr = ::Array.new(26933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1727,  1127,   nil,   264,   nil, 22385,  1566,   668, 25237, 24981,
   667,   nil,   768,   767,   671,   827,  1301,   506,   nil,   -71,
 14914,  2311,   873,   nil,   651,   nil,   280, 24246, 24600, 15494,
 15639, 15784,   nil,  4063, 15929, 16068,   nil,   752,   453,   400,
   827, 16497, 16642,   285, 16926, 17071,   641, 17216,   710,   527,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 24488,
   nil, 17506, 17651, 17796,   -23,   nil, 18086, 18231,   nil,   nil,
 18376, 14050, 18666, 18805, 18950,   nil,   nil,   nil,   nil,   nil,
   646,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   589,   nil,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   831,   nil, 19068,   nil,   nil,
   nil,   nil,  5084,  5229,  5374,  5519,  5664,   nil,  3187,   nil,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   694,
   nil,  3917,  5948,  6093,  6238,  6383,  6528,  6673, 26463, 25426,
 25853,   nil,   nil,  7253,  7398,  7543,   nil,   nil,  1418,   424,
   426,   769,   -52,   642,   691,   nil,  8407,  2311,   687,  8552,
  8697,  8842,  8987,  9132,  9277,  9422,  9567,  9712,  9857, 10002,
 10147, 10292, 10437, 10582, 10727, 10872, 11017, 11162, 11307, 11452,
 11597,   nil,   nil,   nil,   nil, 11742,   nil,   nil, 24712,   nil,
   nil,   672, 12032, 12177,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 12322,   nil,  2019,   nil,   630,   627,   nil, 12606,   672,
 12751,   nil,   nil, 12896, 13041,   nil,   nil,   148,   nil, 13325,
  1128,   602,   558,  3479,   560,   594,   504, 19213,  1873,   741,
   774,   997,   551,  1221,   nil,   510,   458,   279,   nil,   nil,
   nil,   487,   397,   257, 20367,   nil,   307,  1278,  2603,  4209,
   296,   nil,   262, 20941,   nil, 21086,  2895,  1420,   189,   nil,
   120,   320,   194,   167,   347,   189,   nil,   nil, 26525,   526,
    34,    35, 22095,  2019,   997,   223,   246,    91,   -19,    40,
  1143,   156,    67,    75,   nil,   nil,   339,   481,   -45,   nil,
   879,   nil,   -86, 22959,   nil,   nil,   nil,   641,   633,   279,
   609,   567,   559,   535,   510,   500,   nil,   468,   nil, 23829,
   nil,   442,   263,   375,   509,   132,   -45,   -41,   483,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1086, 25109,   nil,
   nil,   nil,   nil,  1071,   nil,  1140,  1049, 18521,  1047,   nil,
   nil,  1032,   nil,  1426,   345,  1116,   nil,   nil,   997,   nil,
   nil,   nil,   nil,   nil,  1143,  1027,   nil,  1022,   999,   594,
   541, 24378,   nil,   nil,   nil,   336,   862,  1034,   nil,   nil,
 24108, 23970,   nil,   nil,   nil,   nil,   nil,   nil,   -33,   nil,
  1032, 25670, 25609, 23394,   417, 23249, 23104, 22669,  3479,  3625,
   406,   684,  1035,  1030,  1021,  1020,  4939,  4793,  4647,  4063,
  3917,  3333,  2895,  2749,  3041,   881,  1441,  3771,  4501,  1727,
  3187,   nil, 24712,   nil,   nil,   903,   nil,   nil,   nil,   895,
   nil,   nil,  8262,   nil,  7978,   nil,  7833,   nil,   370,   nil,
   nil,   nil,  7688,   813,   nil,   894,   890,   nil,   nil,   880,
  5809,   880, 17361, 26280, 26341,   668,   917,   nil, 16787,   858,
   nil, 16352, 26097, 26158, 16207,  4355,  2165, 15349,   981,   976,
   850,   891,   nil, 15204,   nil,   nil, 15059,   nil,   nil,   nil,
   nil, 26533,   nil,   845,   833,   828,   nil,   826,   825,   824,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   807,  1421,
   nil,   nil, 14334,   nil,   nil,   nil,    -1,   nil,   nil,   nil,
   891,   nil,   nil,   875,  4939,   913,   nil,  1581,   149,   940,
   941,   935,   944, 14189, 14624, 26219, 25548,   205,   nil,   nil,
  1447,   nil, 25975, 25914, 14769,   nil,   nil,   235,  1435,   893,
   nil,    -7,   nil,   nil,   nil,    -1,   nil,   nil,   nil,   871,
   nil,   nil,   373,   nil,   261,   nil,   nil,   860,   nil,   862,
   nil,   nil,   nil, 24853,   nil, 17941,   878,  6818,  6963,  7108,
 26402, 25487, 11887, 13470,   201,   940, 13905, 19352, 19497, 19642,
   940,   nil,   nil, 19787, 20077,   941,   nil,   nil,   nil,   123,
   142,   448,   112,   908,   907,  1044,   nil,  1030,    24,   nil,
   nil,   964,   -49,  1069,   nil,   950,   nil,   997, 20506,   nil,
   nil, 20651,   nil,  -116, 21231,   958,   nil,   963,   251,    27,
  1020,   250,  1272,  1021,   978, 22530,   nil,  1050,   -14,  1107,
 23539,   nil,   nil,   nil,   -68,   175,   994,   691,   nil,   nil,
   541,   nil, 26550,   nil, 26589,   nil, 23872,   nil, 23684,   nil,
  2443,   nil,  1001,  1005,  1567,  1020,   nil,   nil,   nil,   nil,
   nil,   635,   nil,  1137,   nil,   nil,   nil,   nil,   nil,  1143,
   nil,   185,  1026,   152,    68,   192,   180,  3625,   622,  1424,
   nil,  1055,  4209, 22814,   nil,    24,  4355, 26606, 26614, 25365,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4647,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80, 22240,   104,   382,
   366,   224,   730,   nil,  1581, 21950,   nil,   153,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 21805, 21660,
 21515, 21370,   162, 20796,   nil,   -54,   nil,   nil,   229,   nil,
   nil,   793,   nil,  2749,   nil,   nil,   nil,   nil,   241,    11,
   nil,   nil,   374,   nil,  3771,   267,   330,   nil,   nil,   nil,
   nil,   nil,   nil,   292,   347,   313,   nil,   414,   nil,   nil,
   337,   360,   nil,   372,   395,   nil,   407,   nil,   nil,   419,
  2472,   855,   nil,   nil,   563,   nil, 20222,   573,   nil, 19932,
  1143,   -23,   605,   nil,   613,   100,  2165,   nil,   637,   520,
   266,   nil,   551,   548,    60,   nil,   nil, 13760, 13615,  1873,
  3041,   nil,   590,   596,   600,   nil,   607,   609,   620,   nil,
   645,   626,   611, 13186,   nil,   nil,   nil,   nil,  2457,   nil,
   nil,   181, 12467,   nil,  1289,  2603,  1713,   nil,   nil, 24309,
   nil, 24038,   nil, 24176,   nil, 26666,   nil,   nil,   nil,   nil,
   648,   652,   nil,    36,   nil,   nil,    47,   nil,   nil,   nil,
   783,   nil,   nil,   nil,   705,   nil,   nil,   722,   nil,   nil,
   nil, 26674,   nil, 26691,   nil, 26730,   nil,   nil,   710,  8123,
   834,   774,   nil,  3333,    92,   138,  1289,   790,    -1,   nil,
   751,   857,   488,   nil,   nil,   nil,   735,   741,   746,   747,
  2482,  1338,  4793,   nil,   nil,   nil,   nil,  4501,   753,   nil,
   nil,   755,   756,   761,   762,   nil,   763,   nil,   561, 25792,
   nil,   900, 14479, 26036, 25731,    42,   nil,   nil,   nil,  1275,
 26747,   nil,   nil,   nil,   nil,   787,   347,   912,   nil, 26755,
   nil, 26807,   nil, 26814,   nil, 26821,   nil,   nil,  1042,    -9,
   nil,   -42,   106,   147,    26,    33,   nil,   682,   nil,   nil,
   684,   786,   789,   791,    32,   nil, 26828,   nil,   nil,   nil,
   nil,   996,   nil ]

racc_action_default = [
    -3,  -613,    -1,  -599,    -4,  -613,    -7,  -613,  -613,  -613,
  -613,   -30,  -613,  -613,   -35,  -613,  -613,  -290,   -47,  -601,
  -613,   -52,   -56,   -57,   -58,   -62,  -267,  -267,  -267,  -303,
  -332,  -333,   -74,   -12,   -78,   -86,   -88,  -613,  -501,  -502,
  -613,  -613,  -613,  -613,  -613,  -613,  -226,  -613,  -601,  -240,
  -281,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -289,  -587,
  -292,  -296,  -612,  -577,  -311,  -394,  -613,  -613,   -54,   -54,
  -599,  -613,  -613,  -613,  -613,  -334,  -335,  -338,  -439,  -440,
  -441,  -442,  -463,  -445,  -446,  -465,  -467,  -450,  -455,  -459,
  -461,  -478,  -479,  -480,  -463,  -482,  -484,  -485,  -486,  -487,
  -585,  -489,  -490,  -586,  -492,  -493,  -494,  -495,  -496,  -497,
  -498,  -499,  -500,  -505,  -506,  -613,    -2,  -600,  -608,  -609,
  -610,    -6,  -613,  -613,  -613,  -613,  -613,    -8,    -3,   -18,
  -613,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -127,  -128,
  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,   -23,
  -124,   -12,  -613,  -613,  -613,  -613,  -613,  -257,  -613,  -613,
  -613,  -597,  -598,  -613,  -613,  -601,  -602,   -51,  -613,  -501,
  -502,  -613,  -290,  -613,  -613,  -232,  -613,   -12,  -613,  -209,
  -210,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
  -613,  -241,  -242,  -243,  -244,  -613,  -403,  -405,  -613,  -595,
  -596,   -63,  -257,  -613,  -310,  -409,  -418,  -420,   -69,  -415,
   -70,  -601,   -71,  -247,  -262,  -271,  -271,  -266,  -613,  -272,
  -613,  -463,  -579,  -613,  -613,   -72,   -73,  -599,   -13,  -613,
   -16,  -613,   -76,   -12,  -601,  -613,   -79,   -82,   -12,   -94,
   -95,  -613,  -613,  -102,  -303,  -306,  -601,  -613,  -332,  -333,
  -337,  -416,  -613,   -84,  -613,   -90,  -300,  -613,  -211,  -212,
  -483,  -220,  -221,  -613,  -233,  -613,   -12,  -294,  -601,  -248,
  -605,  -605,  -613,  -613,  -605,  -613,  -312,  -313,  -534,   -53,
  -613,  -613,  -613,   -12,   -12,  -599,  -613,  -600,  -501,  -502,
  -613,  -613,  -290,  -613,  -348,  -349,  -112,  -113,  -613,  -115,
  -613,  -290,  -509,  -613,  -501,  -502,  -325,  -117,  -118,  -157,
  -158,  -159,  -175,  -180,  -187,  -190,  -327,  -613,  -575,  -613,
  -443,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  1043,
    -5,  -611,   -24,   -25,   -26,   -27,   -28,  -613,  -613,   -20,
   -21,   -22,  -125,  -613,   -31,   -34,  -277,  -613,  -613,  -276,
   -32,  -613,   -36,  -613,  -290,   -44,   -46,  -198,  -252,  -272,
   -48,   -49,   -37,  -199,  -252,  -601,  -258,  -271,  -271,  -588,
  -589,  -267,  -413,  -590,  -591,  -589,  -588,  -267,  -412,  -414,
  -590,  -591,  -336,  -588,  -589,   -43,  -206,   -50,  -601,  -309,
  -613,  -613,  -613,  -257,  -300,  -613,  -613,  -613,  -207,  -208,
  -213,  -214,  -215,  -216,  -217,  -218,  -222,  -223,  -224,  -225,
  -227,  -228,  -229,  -230,  -231,  -234,  -235,  -236,  -237,  -601,
  -245,  -424,  -267,   -60,   -64,  -601,  -268,  -422,  -424,  -601,
  -305,  -263,  -613,  -264,  -613,  -269,  -613,  -273,  -613,  -582,
  -584,   -11,  -600,   -15,   -17,  -601,   -75,  -298,   -91,   -80,
  -613,  -601,  -257,  -613,  -613,  -101,  -613,  -483,  -613,   -87,
   -92,  -613,  -613,  -613,  -613,  -246,  -238,  -613,  -431,  -613,
  -601,  -613,  -249,  -607,  -606,  -251,  -607,  -301,  -302,  -578,
  -395,  -534,  -398,  -574,  -574,  -574,  -517,  -519,  -519,  -519,
  -533,  -535,  -536,  -537,  -538,  -539,  -540,  -541,  -542,  -613,
  -544,  -546,  -548,  -553,  -555,  -556,  -559,  -564,  -566,  -567,
  -569,  -570,  -571,  -613,   -12,  -339,  -340,   -12,  -613,  -613,
  -613,  -613,  -613,  -613,  -257,  -613,  -613,  -300,   -54,  -112,
  -113,  -114,  -613,  -613,  -257,  -321,  -507,  -613,   -12,  -511,
  -329,  -601,  -444,  -464,  -469,  -613,  -471,  -447,  -466,  -613,
  -468,  -449,  -613,  -452,  -613,  -454,  -457,  -613,  -458,  -613,
  -481,    -9,   -19,  -613,   -29,  -613,  -280,  -613,  -613,  -257,
  -613,  -613,  -613,  -613,  -417,  -613,  -259,  -261,  -613,  -613,
   -65,  -256,  -410,  -613,  -613,   -67,  -411,  -308,  -603,  -588,
  -589,  -588,  -589,  -601,  -613,  -613,  -425,   -59,  -406,  -422,
  -254,  -613,  -383,  -613,  -304,  -271,  -270,  -274,  -613,  -580,
  -581,  -613,   -14,   -77,  -613,   -83,   -89,  -601,  -588,  -589,
  -255,  -592,  -100,  -613,   -85,  -613,  -205,  -219,  -601,  -612,
  -612,  -293,  -295,  -297,  -605,  -613,  -601,  -613,  -514,  -515,
  -613,  -516,  -613,  -526,  -613,  -529,  -613,  -531,  -613,  -350,
  -613,  -352,  -354,  -357,  -360,  -601,  -547,  -557,  -558,  -568,
  -572,  -612,  -341,  -612,   -55,  -342,  -343,  -316,  -317,  -613,
  -319,  -613,  -601,  -588,  -589,  -592,  -299,   -12,  -112,  -113,
  -116,  -601,   -12,  -613,  -323,  -613,   -12,  -534,  -534,  -613,
  -576,  -470,  -473,  -474,  -475,  -476,  -477,   -12,  -448,  -451,
  -453,  -456,  -460,  -462,  -126,   -33,  -278,  -613,  -601,  -588,
  -589,  -589,  -588,   -45,  -253,  -613,  -604,  -271,   -39,  -201,
   -40,  -202,   -66,   -41,  -204,   -42,  -203,   -68,  -613,  -613,
  -613,  -613,  -417,  -613,  -404,  -383,  -408,  -407,  -613,  -419,
  -384,  -601,  -386,   -12,  -421,  -265,  -275,  -583,   -81,  -417,
   -93,  -307,  -612,  -346,   -12,  -432,  -612,  -433,  -434,  -250,
  -396,  -399,  -401,  -388,  -613,  -574,  -554,  -559,  -573,  -518,
  -519,  -519,  -545,  -519,  -519,  -565,  -519,  -542,  -560,  -601,
  -613,  -613,  -359,  -543,  -613,  -344,  -613,  -613,  -318,  -613,
   -12,  -417,  -613,  -417,  -613,  -613,   -12,  -326,  -613,  -601,
  -613,  -330,  -613,  -279,  -417,   -38,  -200,  -260,  -613,  -239,
   -12,   -61,  -574,  -574,  -574,  -365,  -367,  -367,  -367,  -382,
  -613,  -601,  -542,  -550,  -551,  -562,  -423,   -10,   -12,  -438,
  -347,  -613,  -613,  -436,   -12,   -12,  -613,  -397,  -513,  -613,
  -522,  -613,  -524,  -613,  -527,  -613,  -530,  -532,  -351,  -353,
  -355,  -358,  -314,  -613,  -315,  -274,  -612,  -320,  -322,  -508,
  -613,  -328,  -510,  -512,  -511,  -472,  -426,  -613,  -362,  -363,
  -364,  -373,  -375,  -613,  -378,  -613,  -380,  -385,  -613,  -613,
  -549,  -613,  -437,   -12,  -501,  -502,  -613,  -613,  -290,  -435,
  -613,  -613,  -601,  -390,  -392,  -393,  -519,  -519,  -519,  -519,
  -613,  -613,   -12,  -427,  -428,  -429,  -324,   -12,  -574,  -552,
  -366,  -367,  -367,  -367,  -367,  -563,  -367,  -387,  -561,  -613,
  -300,  -431,  -257,  -613,  -613,  -300,  -400,  -402,  -389,  -613,
  -613,  -520,  -523,  -525,  -528,  -356,  -612,  -613,  -361,  -613,
  -370,  -613,  -372,  -613,  -376,  -613,  -379,  -381,  -299,  -592,
  -430,  -601,  -588,  -589,  -592,  -299,  -391,  -519,  -345,  -331,
  -367,  -367,  -367,  -367,  -417,  -521,  -613,  -368,  -371,  -374,
  -377,  -367,  -369 ]

clist = [
'224,26,284,284,284,305,26,218,386,134,134,120,267,339,592,269,320,320',
'346,435,494,26,137,137,644,353,354,584,587,335,26,26,26,699,26,330,854',
'349,349,275,279,349,268,350,351,129,210,355,116,306,503,756,432,320',
'320,320,419,420,117,455,539,679,26,227,285,285,285,26,26,542,545,26',
'6,549,495,134,127,6,120,834,887,601,529,2,441,447,452,459,845,304,676',
'568,676,349,349,349,349,340,302,402,403,404,405,679,842,837,426,560',
'813,426,323,618,620,623,623,356,426,725,26,552,671,919,889,26,26,26',
'26,26,121,26,963,822,921,337,492,965,391,985,665,605,282,295,296,500',
'363,673,622,624,398,372,376,347,343,388,271,278,280,891,668,342,333',
'962,719,550,830,857,516,348,708,709,711,705,633,904,905,491,497,498',
'805,973,826,433,901,413,890,430,431,390,456,6,284,669,392,393,394,457',
'458,734,406,395,6,396,503,985,679,397,761,767,753,305,981,407,26,26',
'26,26,26,26,26,461,451,408,415,1026,26,26,26,840,965,336,209,442,682',
'836,676,676,979,897,26,365,400,880,919,540,338,284,284,418,418,739,752',
'1005,802,866,284,414,425,608,609,425,759,934,387,1,948,663,425,920,849',
',,,,26,26,305,819,,685,,305,,26,845,,,694,,,320,,,808,,568,,,526,,,26',
',523,,26,120,320,842,285,26,560,1028,,719,527,750,285,852,532,541,657',
',706,349,687,589,590,441,447,588,275,861,755,842,279,837,,26,,530,863',
'770,511,770,607,508,,,,,,595,512,26,26,26,,670,974,515,611,674,,120',
'521,,,874,302,,514,513,,302,26,,977,683,269,286,286,286,519,686,496',
',,,,690,26,,499,,,,742,,690,792,591,,702,,797,610,751,842,,134,,,341',
'344,640,,645,,860,,,,137,,,,,,,,456,,433,829,679,,284,,,815,,778,818',
'719,719,632,,,16,,908,,,16,651,568,,568,,,656,690,,451,26,676,,,228',
'690,664,,,760,442,,864,228,228,228,868,16,311,311,788,790,1020,,,793',
'795,,713,715,717,284,696,938,939,940,568,568,320,,,651,441,447,698,16',
'320,,,26,228,228,560,560,228,360,370,370,,26,,451,,,869,870,,426,,,451',
'530,442,,26,,,426,426,530,827,442,426,426,,,,815,,,892,747,731,,,733',
'821,,,719,719,16,,284,345,650,228,228,228,228,16,655,16,284,953,,,,',
',975,26,838,853,26,838,930,,,1008,,26,735,451,,,972,,,451,936,26,,,442',
'26,1034,893,284,789,791,754,442,,794,796,667,875,807,286,835,,,,741',
'961,,286,,,134,,26,,,26,26,,451,26,645,,,137,,26,26,828,568,442,26,26',
',806,,16,228,423,228,228,423,228,320,,645,,774,423,228,228,,,,320,426',
',,425,,,892,16,892,833,,,885,425,425,871,,,425,425,,530,,1007,,651,',
',656,775,,,820,918,,,783,,884,416,429,862,228,228,,645,349,,,,883,228',
'865,932,645,,,418,,893,,872,841,893,843,893,,893,,16,26,,876,16,892',
'26,26,311,16,26,,645,134,,,789,791,796,794,,26,,,,311,899,,910,912,903',
'914,916,,917,,,16,896,26,,,,,,833,505,1021,507,900,,509,510,228,16,16',
',,,,,,893,,893,,893,26,893,838,,,,885,228,885,,885,26,,349,425,,,,926',
'923,,,893,228,,888,,,,876,,,884,,884,,884,,675,,978,,,26,883,690,883',
'26,883,,,,,26,,,952,,833,929,,320,960,,933,,,26,,,320,,,,885,,885,,885',
'704,885,,,,,26,,1001,1002,1003,1004,26,26,,,,,228,,,884,885,884,844',
'884,846,884,,636,,,991,883,,883,,883,320,883,,,,,966,,,,884,,998,1006',
',,993,,,,,,883,26,,,,,,16,,1035,,,284,,,311,982,228,983,,26,,,311,,26',
',,,,,,228,,,,,451,,,26,,451,787,,,,,,645,,,,442,677,,345,,680,,,886',
',,,,,,,,,,942,944,946,,,,,16,,,16,,1030,,29,,,228,,29,,,,677,,,345,228',
',,,16,,,29,,,,,,,,,29,29,29,,29,,,,,726,,,,,,16,,,423,228,,,16,,,,,',
'423,423,429,,29,423,423,,,29,29,,,29,,,967,,968,,969,,,,1010,1012,1014',
'1016,,1017,,,,,,,311,,,,,,,,,,776,311,,,984,,986,,,677,345,,,,29,,,',
',29,29,29,29,29,,29,,1037,1038,1039,1040,,38,,,,,38,1042,,,816,,,817',
',,,,,,,,16,,,,,16,228,,1027,16,825,,38,309,309,,,1031,,1032,16,1033',
',,,,,,848,,,,,,,,,,423,,38,,,,1041,,,,,,358,374,374,374,,29,29,29,29',
'29,29,29,,,,,16,29,29,29,,,,,,,,16,,,,29,,,,,,873,,,,,,,,,38,,,,,,,',
',38,,38,,228,,,,16,,,29,29,,16,,,,,,29,,,,,,,,16,,,,,,,,,,29,,,950,29',
',,,16,29,,,956,,16,16,,,,,,,,39,,,925,,39,,,,,,,,,29,,,,,,,345,,,38',
',,,,,29,29,29,39,310,310,988,,,,16,,,,,,,,,,38,29,,,,,,,,16,,39,,,16',
',,29,,,,359,375,375,375,,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,',
',,38,39,,,309,38,,,,,39,,39,,,,,,,,,309,,,,29,,,,,,,,38,,,,,,,,,,,,',
',,,,38,38,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,29,,,,,,,,,,,39,,,,29,,',
',,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,29,,,29,,,,,,,29,,,,,',
',,,,29,,,,29,,,,,,,,,,,,,39,,,,39,,,,310,39,,17,,,29,,17,29,29,,,29',
',,,310,38,29,29,,,,29,29,309,,,39,,,,,309,,17,313,313,,,,,,,,39,39,',
',,,,,,,,,,,,,,,17,,,,,,,,,,362,371,371,,,,,,,,,,,,,,38,,,38,,,,,,,,',
',,,,,,,,,,,,38,,,,29,,17,,,29,29,,,29,,17,,17,,,,,,,29,,,38,,,,,,,38',
',,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,309,,,,,29,,,,,,309,,,',
'39,,,,,,,,310,17,,424,,,424,,310,,,,,424,29,,,,29,,,,,,29,,,17,,,,,',
',,,,,29,,38,,,,,38,,,,38,,,,,,,29,,,,38,,29,29,39,,,39,15,,,,,15,,,',
',,,,,,,,,,,39,17,,,,17,,,,313,17,,,15,,,,,38,,,,,29,,,313,39,,38,,,',
',39,,,,17,,13,15,29,,,13,,29,,,,,,,,17,17,,,,,,29,,,38,,,,,,38,,13,',
',310,,,,,,,,,38,,310,,,,,,,,,,15,374,,,13,,38,,,15,954,15,38,38,364',
',,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,39,,,,39,,,,,,374,,,13,38,39,,,,,',
',13,,13,,,,,,,,,38,,,,,38,,,,,,,,,15,,15,,,15,,,,,,,15,,39,,,,,,,,,17',
',39,15,,,,,313,,,,,,,,313,,,,,,,,,,,,,,,,,,,,,13,39,421,,,421,,39,,',
',,421,,,,,,,,,39,,,,,13,,15,,,,15,,375,17,,15,17,39,,,,955,,39,39,,',
',,,,,,,,,,17,,,,,,15,766,,,,,,,,,,,,,,,,15,15,,,17,,13,424,375,,13,17',
'39,,,13,,424,424,,,,424,424,,,,,,,,39,,,,,39,,,,,,,13,,,,,,,,,,313,',
',,,,,13,13,,,313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'17,,,,,17,,,,17,,,,,,,,,,,17,,,,,,,,,,,,,,,,,,424,,,,,15,,,,,,,,,,,',
',,,,,,,,,,,17,,,,,,,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,17,',
'15,,,15,17,,,,,,,,,,,,,,17,,,,,,15,,,,,,,371,,,,,17,,,,958,,17,17,,',
',,,,,15,,,15,,,,15,,13,,,13,15,15,,,,15,15,,,,,,,,,,,,,,13,,,371,,,',
'17,,,,,,,,,,,,,,,,,,,17,13,,,421,17,,,13,,,,,,421,421,,,,421,421,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,,,,15,,,,15,,,,,,,,,,,15,,,,,,,,,,',
',,,,,,,15,,,,,,,,,,,,,,,,,,,,,,13,,,,,13,15,,,13,,,235,,,,,15,,,13,283',
'283,283,,,,,,,,,,328,329,,331,332,421,334,,,,,,,,,,,,,,15,283,283,,',
',15,,,,,,,13,,,,,,,15,,,,13,,,,,,,,,,,,,,15,,,,,,15,15,,,,,,,,,,,,,',
',13,,,,,,13,,,,,,,,,,,,,,13,,,,,,,,,,,,,15,,,,,13,,,,959,,13,13,,,,',
',,15,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,428,13,,434,283,,,',
',,434,,,,,,,,,,13,,,235,,13,468,469,470,471,472,473,474,475,476,477',
'478,479,480,481,482,483,484,485,486,487,488,489,,,,,490,,,,,,,283,283',
',,,,,,,283,,,,,,,283,,283,,,283,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,535,,536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,283,,434,434,434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,283',
',283,,,,,,,,,,,,,,,,283,,,,,,,,,434,,,697,,,,,,,,,283,,,283,,,,,,,,',
',,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,283,283,,,,,,,,,,283,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,283,434,283,,,,784,,,283,283,434,434,,,,434',
'434,,,,,,,,,,,,,,,,,,,,,,,,283,,,283,,,,,,,,,,,,,,,,,,,283,,,,,,,,,',
',,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,283,,,,,,,,434,,,,,,,,,,,,,434,434,434,434,,879,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,283,434,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283' ]
        racc_goto_table = arr = ::Array.new(3741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,47,39,39,39,10,47,32,63,64,64,102,141,75,99,32,71,71,94,30,45,47',
'66,66,31,36,36,97,97,34,47,47,47,11,47,69,98,25,25,79,79,25,42,18,18',
'16,16,18,4,56,81,103,27,71,71,71,23,23,6,27,9,187,47,21,76,76,76,47',
'47,77,77,47,7,77,30,64,8,7,102,132,128,61,58,2,43,43,43,54,183,53,82',
'177,82,25,25,25,25,76,52,18,18,18,18,187,178,182,19,172,130,19,57,163',
'163,163,163,4,19,116,47,140,46,114,119,47,47,47,47,47,5,47,134,12,117',
'7,43,135,158,184,144,101,51,51,51,54,100,144,162,162,158,62,62,96,93',
'92,44,44,44,126,80,74,72,133,115,136,137,12,54,138,122,122,122,139,67',
'142,143,145,147,148,151,152,153,68,154,10,132,25,25,157,68,7,39,48,159',
'160,161,25,25,37,7,164,7,165,81,184,187,166,167,168,171,10,128,2,47',
'47,47,47,47,47,47,32,64,26,24,134,47,47,47,176,135,105,17,79,15,180',
'82,82,181,13,47,20,5,130,114,106,107,39,39,76,76,99,108,117,31,109,39',
'21,21,110,111,21,112,113,104,1,132,30,21,118,116,,,,,47,47,10,31,,58',
',10,,47,183,,,58,,,71,,,46,,177,,,34,,,47,,32,,47,102,71,178,76,47,172',
'98,,115,69,61,76,115,32,34,54,,140,25,30,10,10,43,43,18,79,31,9,178',
'79,182,,47,,56,31,163,4,163,25,158,,,,,,32,6,47,47,47,,54,12,53,25,54',
',102,53,,,31,52,,8,7,,52,47,,103,54,32,78,78,78,57,54,51,,,,,43,47,',
'51,,,,30,,43,45,4,,54,,45,42,30,178,,64,,,78,78,32,,34,,97,,,,66,,,',
',,,,68,,68,77,187,,39,,,81,,30,58,115,115,16,,,29,,122,,,29,79,177,',
'177,,,79,43,,64,47,82,,,29,43,34,,,54,79,,9,29,29,29,9,29,29,29,27,27',
'11,,,27,27,,175,175,175,39,68,122,122,122,177,177,71,,,79,43,43,25,29',
'71,,,47,29,29,172,172,29,29,29,29,,47,,64,,,140,140,,19,,,64,56,79,',
'47,,,19,19,56,23,79,19,19,,,,81,,,177,36,10,,,10,54,,,115,115,29,,39',
'73,44,29,29,29,29,29,44,29,39,97,,,,,,99,47,124,54,47,124,9,,,122,,47',
'102,64,,,97,,,64,9,47,,,79,47,31,179,39,68,68,102,79,,68,68,44,27,94',
'78,121,,,,76,9,,78,,,64,,47,,,47,47,,64,47,34,,,66,,47,47,75,177,79',
'47,47,,141,,29,29,29,29,29,29,29,71,,34,,16,29,29,29,,,,71,19,,,21,',
',177,29,177,34,,,124,21,21,63,,,21,21,,56,,9,,79,,,79,7,,,56,54,,,7',
',123,73,73,10,29,29,,34,25,,,,121,29,18,54,34,,,76,,179,,10,129,179',
'129,179,,179,,29,47,,68,29,177,47,47,29,29,47,,34,64,,,68,68,68,68,',
'47,,,,29,75,,175,175,75,175,175,,175,,,29,10,47,,,,,,34,73,30,73,10',
',73,73,29,29,29,,,,,,,179,,179,,179,47,179,124,,,,124,29,124,,124,47',
',25,21,,,,10,18,,,179,29,,129,,,,68,,,123,,123,,123,,78,,121,,,47,121',
'43,121,47,121,,,,,47,,,10,,34,102,,71,10,,102,,,47,,,71,,,,124,,124',
',124,78,124,,,,,47,,175,175,175,175,47,47,,,,,29,,,123,124,123,127,123',
'127,123,,73,,,10,121,,121,,121,71,121,,,,,129,,,,123,,34,10,,,32,,,',
',,121,47,,,,,,29,,175,,,39,,,29,129,29,129,,47,,,29,,47,,,,,,,29,,,',
',64,,,47,,64,78,,,,,,34,,,,79,73,,73,,73,,,127,,,,,,,,,,,125,125,125',
',,,,29,,,29,,129,,50,,,29,,50,,,,73,,,73,29,,,,29,,,50,,,,,,,,,50,50',
'50,,50,,,,,73,,,,,,29,,,29,29,,,29,,,,,,29,29,73,,50,29,29,,,50,50,',
',50,,,127,,127,,127,,,,125,125,125,125,,125,,,,,,,29,,,,,,,,,,73,29',
',,127,,127,,,73,73,,,,50,,,,,50,50,50,50,50,,50,,125,125,125,125,,59',
',,,,59,125,,,73,,,73,,,,,,,,,29,,,,,29,29,,127,29,73,,59,59,59,,,127',
',127,29,127,,,,,,,73,,,,,,,,,,29,,59,,,,127,,,,,,59,59,59,59,,50,50',
'50,50,50,50,50,,,,,29,50,50,50,,,,,,,,29,,,,50,,,,,,73,,,,,,,,,59,,',
',,,,,,59,,59,,29,,,,29,,,50,50,,29,,,,,,50,,,,,,,,29,,,,,,,,,,50,,,29',
'50,,,,29,50,,,29,,29,29,,,,,,,,60,,,73,,60,,,,,,,,,50,,,,,,,73,,,59',
',,,,,50,50,50,60,60,60,29,,,,29,,,,,,,,,,59,50,,,,,,,,29,,60,,,29,,',
'50,,,,60,60,60,60,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,59,60',
',,59,59,,,,,60,,60,,,,,,,,,59,,,,50,,,,,,,,59,,,,,,,,,,,,,,,,,59,59',
',,,,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,50,,,,,,,,,,,60,,,,50,,,,,,,,,,,,',
',,,,,,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,50,,,50,,,,,,,50,,,,,,,,,,50,,,',
'50,,,,,,,,,,,,,60,,,,60,,,,60,60,,33,,,50,,33,50,50,,,50,,,,60,59,50',
'50,,,,50,50,59,,,60,,,,,59,,33,33,33,,,,,,,,60,60,,,,,,,,,,,,,,,,,33',
',,,,,,,,,33,33,33,,,,,,,,,,,,,,59,,,59,,,,,,,,,,,,,,,,,,,,,59,,,,50',
',33,,,50,50,,,50,,33,,33,,,,,,,50,,,59,,,,,,,59,,,,,,,,50,,,,,,,,,,',
',,,,,,,,,,,,,,,,,50,,,,,,59,,,,,50,,,,,,59,,,,60,,,,,,,,60,33,,33,,',
'33,,60,,,,,33,50,,,,50,,,,,,50,,,33,,,,,,,,,,,50,,59,,,,,59,,,,59,,',
',,,,50,,,,59,,50,50,60,,,60,28,,,,,28,,,,,,,,,,,,,,,60,33,,,,33,,,,33',
'33,,,28,,,,,59,,,,,50,,,33,60,,59,,,,,60,,,,33,,22,28,50,,,22,,50,,',
',,,,,33,33,,,,,,50,,,59,,,,,,59,,22,,,60,,,,,,,,,59,,60,,,,,,,,,,28',
'59,,,22,,59,,,28,59,28,59,59,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,,60',
',,,60,,,,,,59,,,22,59,60,,,,,,,22,,22,,,,,,,,,59,,,,,59,,,,,,,,,28,',
'28,,,28,,,,,,,28,,60,,,,,,,,,33,,60,28,,,,,33,,,,,,,,33,,,,,,,,,,,,',
',,,,,,,,22,60,22,,,22,,60,,,,,22,,,,,,,,,60,,,,,22,,28,,,,28,,60,33',
',28,33,60,,,,60,,60,60,,,,,,,,,,,,,33,,,,,,28,33,,,,,,,,,,,,,,,,28,28',
',,33,,22,33,60,,22,33,60,,,22,,33,33,,,,33,33,,,,,,,,60,,,,,60,,,,,',
',22,,,,,,,,,,33,,,,,,,22,22,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,33,,,,,33,,,,33,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,33,,,',
',28,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,22',
',,,,,,,,,33,,28,,,28,33,,,,,,,,,,,,,,33,,,,,,28,,,,,,,33,,,,,33,,,,33',
',33,33,,,,,,,,28,,,28,,,,28,,22,,,22,28,28,,,,28,28,,,,,,,,,,,,,,22',
',,33,,,,33,,,,,,,,,,,,,,,,,,,33,22,,,22,33,,,22,,,,,,22,22,,,,22,22',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,28,,,,28,,,,,,,,,,,28,,,,,,,',
',,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,22,,,,,22,28,,,22,,,35,,,,,28,,,22',
'35,35,35,,,,,,,,,,35,35,,35,35,22,35,,,,,,,,,,,,,,28,35,35,,,,28,,,',
',,,22,,,,,,,28,,,,22,,,,,,,,,,,,,,28,,,,,,28,28,,,,,,,,,,,,,,,22,,,',
',,22,,,,,,,,,,,,,,22,,,,,,,,,,,,,28,,,,,22,,,,22,,22,22,,,,,,,28,,,',
',28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,22,,35,35,,,,,,35,,,,,,,',
',,22,,,35,,22,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,,,,,35,,,,,,,35,35,,,,,,,,35,,,,,,,35,,35,,,35,35,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,35,,,,,,,,,35,',
',35,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,',
',35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,',
',,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3741, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   263,    83,   nil,    45,   123,    55,    72,    69,  -276,
   -28,  -505,  -568,  -585,   nil,  -280,    37,   221,   -23,  -107,
   168,    43,  2009,  -156,    10,   -29,    92,  -164,  1949,   448,
  -198,  -411,    -9,  1671,   -19,  2748,   -43,  -391,   nil,   -27,
   nil,   nil,    18,  -134,   128,  -251,  -377,     1,  -302,   nil,
  1039,   111,    65,    56,  -138,   nil,    15,    75,  -242,  1174,
  1361,  -287,    77,   -66,     1,   nil,    14,  -240,   -35,    -8,
   nil,   -18,   114,   505,    97,   -49,    35,  -271,   350,    13,
  -334,  -236,  -412,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    79,    89,   -46,   nil,    86,  -323,  -695,  -342,
    73,  -233,     8,  -558,   188,   169,   -94,   183,  -355,  -501,
  -119,  -128,  -350,  -610,  -729,  -407,  -452,  -719,  -583,  -689,
   nil,   -83,  -385,   -95,  -121,   139,  -654,   203,  -731,    28,
  -564,   nil,  -627,  -745,  -776,  -771,  -185,  -541,   102,  -379,
  -229,   -10,  -658,  -658,  -353,   -91,   nil,  -100,  -100,   nil,
   nil,  -488,  -747,  -520,  -644,   nil,   nil,   107,    54,   107,
   107,   107,  -248,  -281,   111,   112,   115,  -409,  -409,   nil,
   nil,  -398,  -241,   nil,   nil,   -65,  -485,  -257,  -608,  -200,
  -474,  -701,  -602,  -626,  -806,   nil,   nil,  -443 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   357,   300,   nil,   nil,
   538,   nil,   855,   nil,   297,   298,   nil,   nil,   nil,    11,
    12,    18,   233,   nil,   nil,    14,   nil,   422,   234,   327,
   nil,   nil,   603,   232,   460,    21,   nil,   nil,   352,    22,
    23,    24,   nil,   693,   nil,   nil,   nil,   317,   nil,    25,
   314,   436,    32,   nil,   nil,    34,    37,    36,   nil,   229,
   230,   369,   nil,   136,   444,   135,    79,   nil,   427,    95,
    46,    49,   265,   289,   nil,   823,   437,   nil,   438,   449,
   652,   501,   287,   273,    50,    51,    52,    53,    54,    55,
    56,    57,    58,   nil,   274,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   585,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   721,   567,   nil,   722,   723,   980,
   882,   554,   nil,   555,   556,   nil,   nil,   557,   nil,   559,
   nil,   810,   nil,   nil,   nil,   565,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   448,   nil,   nil,   672,
   666,   nil,   nil,   nil,   nil,    78,    80,    81,   nil,   nil,
   nil,   nil,   nil,   613,   nil,   nil,   nil,   nil,   nil,    91,
    92,   nil,   839,   758,   553,   nil,   558,   847,   570,   572,
   573,   894,   576,   577,   895,   580,   583,   292 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_none,
  2, 151, :_reduce_2,
  0, 152, :_reduce_3,
  1, 152, :_reduce_4,
  3, 152, :_reduce_5,
  2, 152, :_reduce_6,
  1, 154, :_reduce_none,
  2, 154, :_reduce_8,
  3, 157, :_reduce_9,
  4, 158, :_reduce_10,
  2, 159, :_reduce_11,
  0, 163, :_reduce_12,
  1, 163, :_reduce_13,
  3, 163, :_reduce_14,
  2, 163, :_reduce_15,
  1, 164, :_reduce_none,
  2, 164, :_reduce_17,
  0, 175, :_reduce_18,
  4, 156, :_reduce_19,
  3, 156, :_reduce_20,
  3, 156, :_reduce_21,
  3, 156, :_reduce_22,
  2, 156, :_reduce_23,
  3, 156, :_reduce_24,
  3, 156, :_reduce_25,
  3, 156, :_reduce_26,
  3, 156, :_reduce_27,
  3, 156, :_reduce_28,
  4, 156, :_reduce_29,
  1, 156, :_reduce_none,
  3, 156, :_reduce_31,
  3, 156, :_reduce_32,
  5, 156, :_reduce_33,
  3, 156, :_reduce_34,
  1, 156, :_reduce_none,
  3, 168, :_reduce_36,
  3, 168, :_reduce_37,
  6, 168, :_reduce_38,
  5, 168, :_reduce_39,
  5, 168, :_reduce_40,
  5, 168, :_reduce_41,
  5, 168, :_reduce_42,
  3, 168, :_reduce_43,
  1, 176, :_reduce_none,
  3, 176, :_reduce_45,
  1, 176, :_reduce_none,
  1, 174, :_reduce_none,
  3, 174, :_reduce_48,
  3, 174, :_reduce_49,
  3, 174, :_reduce_50,
  2, 174, :_reduce_51,
  1, 174, :_reduce_none,
  1, 167, :_reduce_none,
  0, 187, :_reduce_54,
  3, 185, :_reduce_55,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 189, :_reduce_none,
  4, 189, :_reduce_59,
  0, 197, :_reduce_60,
  4, 194, :_reduce_61,
  1, 196, :_reduce_none,
  2, 188, :_reduce_63,
  3, 188, :_reduce_64,
  4, 188, :_reduce_65,
  5, 188, :_reduce_66,
  4, 188, :_reduce_67,
  5, 188, :_reduce_68,
  2, 188, :_reduce_69,
  2, 188, :_reduce_70,
  2, 188, :_reduce_71,
  2, 188, :_reduce_72,
  2, 188, :_reduce_73,
  1, 169, :_reduce_74,
  3, 169, :_reduce_75,
  1, 202, :_reduce_76,
  3, 202, :_reduce_77,
  1, 201, :_reduce_none,
  2, 201, :_reduce_79,
  3, 201, :_reduce_80,
  5, 201, :_reduce_81,
  2, 201, :_reduce_82,
  4, 201, :_reduce_83,
  2, 201, :_reduce_84,
  4, 201, :_reduce_85,
  1, 201, :_reduce_86,
  3, 201, :_reduce_87,
  1, 205, :_reduce_none,
  3, 205, :_reduce_89,
  2, 204, :_reduce_90,
  3, 204, :_reduce_91,
  1, 207, :_reduce_92,
  3, 207, :_reduce_93,
  1, 206, :_reduce_94,
  1, 206, :_reduce_95,
  4, 206, :_reduce_96,
  3, 206, :_reduce_97,
  3, 206, :_reduce_98,
  3, 206, :_reduce_99,
  3, 206, :_reduce_100,
  2, 206, :_reduce_101,
  1, 206, :_reduce_102,
  1, 171, :_reduce_103,
  1, 171, :_reduce_104,
  4, 171, :_reduce_105,
  3, 171, :_reduce_106,
  3, 171, :_reduce_107,
  3, 171, :_reduce_108,
  3, 171, :_reduce_109,
  2, 171, :_reduce_110,
  1, 171, :_reduce_111,
  1, 210, :_reduce_112,
  1, 210, :_reduce_none,
  2, 211, :_reduce_114,
  1, 211, :_reduce_115,
  3, 211, :_reduce_116,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 165, :_reduce_122,
  1, 165, :_reduce_none,
  1, 166, :_reduce_124,
  0, 216, :_reduce_125,
  4, 166, :_reduce_126,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  3, 184, :_reduce_198,
  3, 184, :_reduce_199,
  6, 184, :_reduce_200,
  5, 184, :_reduce_201,
  5, 184, :_reduce_202,
  5, 184, :_reduce_203,
  5, 184, :_reduce_204,
  4, 184, :_reduce_205,
  3, 184, :_reduce_206,
  3, 184, :_reduce_207,
  3, 184, :_reduce_208,
  2, 184, :_reduce_209,
  2, 184, :_reduce_210,
  2, 184, :_reduce_211,
  2, 184, :_reduce_212,
  3, 184, :_reduce_213,
  3, 184, :_reduce_214,
  3, 184, :_reduce_215,
  3, 184, :_reduce_216,
  3, 184, :_reduce_217,
  3, 184, :_reduce_218,
  4, 184, :_reduce_219,
  2, 184, :_reduce_220,
  2, 184, :_reduce_221,
  3, 184, :_reduce_222,
  3, 184, :_reduce_223,
  3, 184, :_reduce_224,
  3, 184, :_reduce_225,
  1, 184, :_reduce_none,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  2, 184, :_reduce_232,
  2, 184, :_reduce_233,
  3, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  6, 184, :_reduce_239,
  1, 184, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  3, 219, :_reduce_245,
  3, 219, :_reduce_246,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  2, 223, :_reduce_none,
  4, 223, :_reduce_250,
  2, 223, :_reduce_251,
  1, 217, :_reduce_none,
  3, 217, :_reduce_253,
  3, 228, :_reduce_254,
  0, 229, :_reduce_255,
  1, 229, :_reduce_none,
  0, 179, :_reduce_257,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  4, 179, :_reduce_260,
  2, 179, :_reduce_261,
  1, 200, :_reduce_262,
  2, 200, :_reduce_263,
  2, 200, :_reduce_264,
  4, 200, :_reduce_265,
  1, 200, :_reduce_266,
  0, 232, :_reduce_267,
  2, 193, :_reduce_268,
  2, 231, :_reduce_269,
  2, 230, :_reduce_270,
  0, 230, :_reduce_271,
  1, 225, :_reduce_272,
  2, 225, :_reduce_273,
  3, 225, :_reduce_274,
  4, 225, :_reduce_275,
  1, 173, :_reduce_276,
  1, 173, :_reduce_none,
  3, 172, :_reduce_278,
  4, 172, :_reduce_279,
  2, 172, :_reduce_280,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_291,
  0, 254, :_reduce_292,
  4, 220, :_reduce_293,
  0, 255, :_reduce_294,
  4, 220, :_reduce_295,
  0, 256, :_reduce_296,
  4, 220, :_reduce_297,
  3, 220, :_reduce_298,
  3, 220, :_reduce_299,
  2, 220, :_reduce_300,
  3, 220, :_reduce_301,
  3, 220, :_reduce_302,
  1, 220, :_reduce_303,
  4, 220, :_reduce_304,
  3, 220, :_reduce_305,
  1, 220, :_reduce_306,
  5, 220, :_reduce_307,
  4, 220, :_reduce_308,
  3, 220, :_reduce_309,
  2, 220, :_reduce_310,
  1, 220, :_reduce_none,
  2, 220, :_reduce_312,
  2, 220, :_reduce_313,
  6, 220, :_reduce_314,
  6, 220, :_reduce_315,
  4, 220, :_reduce_316,
  4, 220, :_reduce_317,
  5, 220, :_reduce_318,
  4, 220, :_reduce_319,
  6, 220, :_reduce_320,
  0, 257, :_reduce_321,
  6, 220, :_reduce_322,
  0, 258, :_reduce_323,
  7, 220, :_reduce_324,
  0, 259, :_reduce_325,
  5, 220, :_reduce_326,
  0, 260, :_reduce_327,
  6, 220, :_reduce_328,
  0, 261, :_reduce_329,
  0, 262, :_reduce_330,
  9, 220, :_reduce_331,
  1, 220, :_reduce_332,
  1, 220, :_reduce_333,
  1, 220, :_reduce_334,
  1, 220, :_reduce_335,
  3, 220, :_reduce_336,
  1, 178, :_reduce_none,
  1, 199, :_reduce_338,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  2, 246, :_reduce_341,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 247, :_reduce_none,
  5, 247, :_reduce_345,
  1, 161, :_reduce_none,
  2, 161, :_reduce_347,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  1, 263, :_reduce_350,
  3, 263, :_reduce_351,
  1, 266, :_reduce_352,
  3, 266, :_reduce_353,
  1, 265, :_reduce_none,
  3, 265, :_reduce_355,
  5, 265, :_reduce_356,
  1, 265, :_reduce_357,
  3, 265, :_reduce_358,
  2, 267, :_reduce_359,
  1, 267, :_reduce_360,
  4, 268, :_reduce_361,
  2, 268, :_reduce_362,
  2, 268, :_reduce_363,
  2, 268, :_reduce_364,
  1, 268, :_reduce_365,
  2, 274, :_reduce_366,
  0, 274, :_reduce_367,
  6, 275, :_reduce_368,
  8, 275, :_reduce_369,
  4, 275, :_reduce_370,
  6, 275, :_reduce_371,
  4, 275, :_reduce_372,
  2, 275, :_reduce_none,
  6, 275, :_reduce_374,
  2, 275, :_reduce_375,
  4, 275, :_reduce_376,
  6, 275, :_reduce_377,
  2, 275, :_reduce_378,
  4, 275, :_reduce_379,
  2, 275, :_reduce_380,
  4, 275, :_reduce_381,
  1, 275, :_reduce_none,
  0, 279, :_reduce_383,
  1, 279, :_reduce_384,
  3, 280, :_reduce_385,
  1, 280, :_reduce_386,
  4, 280, :_reduce_387,
  1, 281, :_reduce_388,
  4, 281, :_reduce_389,
  1, 282, :_reduce_390,
  3, 282, :_reduce_391,
  1, 283, :_reduce_392,
  1, 283, :_reduce_none,
  0, 287, :_reduce_394,
  0, 288, :_reduce_395,
  4, 245, :_reduce_396,
  4, 285, :_reduce_397,
  1, 285, :_reduce_398,
  0, 291, :_reduce_399,
  4, 286, :_reduce_400,
  0, 292, :_reduce_401,
  4, 286, :_reduce_402,
  0, 294, :_reduce_403,
  4, 290, :_reduce_404,
  2, 190, :_reduce_405,
  4, 190, :_reduce_406,
  5, 190, :_reduce_407,
  5, 190, :_reduce_408,
  2, 244, :_reduce_409,
  4, 244, :_reduce_410,
  4, 244, :_reduce_411,
  3, 244, :_reduce_412,
  3, 244, :_reduce_413,
  3, 244, :_reduce_414,
  2, 244, :_reduce_415,
  1, 244, :_reduce_416,
  4, 244, :_reduce_417,
  0, 296, :_reduce_418,
  4, 243, :_reduce_419,
  0, 297, :_reduce_420,
  4, 243, :_reduce_421,
  0, 298, :_reduce_422,
  3, 195, :_reduce_423,
  0, 299, :_reduce_424,
  0, 300, :_reduce_425,
  4, 293, :_reduce_426,
  5, 248, :_reduce_427,
  1, 301, :_reduce_428,
  1, 301, :_reduce_none,
  6, 160, :_reduce_430,
  0, 160, :_reduce_431,
  1, 302, :_reduce_432,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  2, 303, :_reduce_435,
  1, 303, :_reduce_none,
  2, 162, :_reduce_437,
  1, 162, :_reduce_none,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  1, 234, :_reduce_441,
  1, 305, :_reduce_442,
  2, 305, :_reduce_443,
  3, 306, :_reduce_444,
  1, 306, :_reduce_445,
  1, 306, :_reduce_446,
  3, 235, :_reduce_447,
  4, 236, :_reduce_448,
  3, 237, :_reduce_449,
  0, 310, :_reduce_450,
  3, 310, :_reduce_451,
  1, 311, :_reduce_452,
  2, 311, :_reduce_453,
  3, 239, :_reduce_454,
  0, 313, :_reduce_455,
  3, 313, :_reduce_456,
  3, 238, :_reduce_457,
  3, 240, :_reduce_458,
  0, 314, :_reduce_459,
  3, 314, :_reduce_460,
  0, 315, :_reduce_461,
  3, 315, :_reduce_462,
  0, 307, :_reduce_463,
  2, 307, :_reduce_464,
  0, 308, :_reduce_465,
  2, 308, :_reduce_466,
  0, 309, :_reduce_467,
  2, 309, :_reduce_468,
  1, 312, :_reduce_469,
  2, 312, :_reduce_470,
  0, 317, :_reduce_471,
  4, 312, :_reduce_472,
  1, 316, :_reduce_473,
  1, 316, :_reduce_474,
  1, 316, :_reduce_475,
  1, 316, :_reduce_476,
  1, 316, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 318, :_reduce_480,
  3, 319, :_reduce_481,
  1, 304, :_reduce_482,
  2, 304, :_reduce_483,
  1, 218, :_reduce_484,
  1, 218, :_reduce_485,
  1, 218, :_reduce_486,
  1, 218, :_reduce_487,
  1, 208, :_reduce_488,
  1, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 208, :_reduce_491,
  1, 208, :_reduce_492,
  1, 208, :_reduce_493,
  1, 209, :_reduce_494,
  1, 209, :_reduce_495,
  1, 209, :_reduce_496,
  1, 209, :_reduce_497,
  1, 209, :_reduce_498,
  1, 209, :_reduce_499,
  1, 209, :_reduce_500,
  1, 241, :_reduce_501,
  1, 241, :_reduce_502,
  1, 177, :_reduce_503,
  1, 177, :_reduce_504,
  1, 182, :_reduce_505,
  1, 182, :_reduce_506,
  0, 320, :_reduce_507,
  4, 250, :_reduce_508,
  0, 250, :_reduce_509,
  3, 252, :_reduce_510,
  0, 322, :_reduce_511,
  3, 252, :_reduce_512,
  4, 321, :_reduce_513,
  2, 321, :_reduce_514,
  2, 321, :_reduce_515,
  2, 321, :_reduce_516,
  1, 321, :_reduce_517,
  2, 324, :_reduce_518,
  0, 324, :_reduce_519,
  6, 289, :_reduce_520,
  8, 289, :_reduce_521,
  4, 289, :_reduce_522,
  6, 289, :_reduce_523,
  4, 289, :_reduce_524,
  6, 289, :_reduce_525,
  2, 289, :_reduce_526,
  4, 289, :_reduce_527,
  6, 289, :_reduce_528,
  2, 289, :_reduce_529,
  4, 289, :_reduce_530,
  2, 289, :_reduce_531,
  4, 289, :_reduce_532,
  1, 289, :_reduce_533,
  0, 289, :_reduce_534,
  1, 284, :_reduce_535,
  1, 284, :_reduce_536,
  1, 284, :_reduce_537,
  1, 284, :_reduce_538,
  1, 264, :_reduce_none,
  1, 264, :_reduce_540,
  1, 326, :_reduce_541,
  1, 327, :_reduce_542,
  3, 327, :_reduce_543,
  1, 276, :_reduce_544,
  3, 276, :_reduce_545,
  1, 328, :_reduce_546,
  2, 329, :_reduce_547,
  1, 329, :_reduce_548,
  2, 330, :_reduce_549,
  1, 330, :_reduce_550,
  1, 269, :_reduce_551,
  3, 269, :_reduce_552,
  1, 323, :_reduce_553,
  3, 323, :_reduce_554,
  1, 331, :_reduce_none,
  1, 331, :_reduce_none,
  2, 272, :_reduce_557,
  2, 270, :_reduce_558,
  1, 270, :_reduce_559,
  3, 332, :_reduce_560,
  3, 333, :_reduce_561,
  1, 277, :_reduce_562,
  3, 277, :_reduce_563,
  1, 325, :_reduce_564,
  3, 325, :_reduce_565,
  1, 334, :_reduce_none,
  1, 334, :_reduce_none,
  2, 278, :_reduce_568,
  1, 278, :_reduce_569,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 273, :_reduce_572,
  2, 271, :_reduce_573,
  0, 271, :_reduce_574,
  1, 253, :_reduce_none,
  3, 253, :_reduce_576,
  0, 242, :_reduce_577,
  2, 242, :_reduce_none,
  1, 227, :_reduce_579,
  3, 227, :_reduce_580,
  3, 336, :_reduce_581,
  2, 336, :_reduce_582,
  4, 336, :_reduce_583,
  2, 336, :_reduce_584,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 181, :_reduce_597,
  1, 181, :_reduce_598,
  0, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  2, 203, :_reduce_603,
  2, 180, :_reduce_604,
  0, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  1, 251, :_reduce_608,
  1, 251, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_none,
  0, 224, :_reduce_612 ]

racc_reduce_n = 613

racc_shift_n = 1043

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tMETHREF => 143,
  :tBDOT2 => 144,
  :tBDOT3 => 145,
  :tNUMPARAM => 146,
  :tEQL => 147,
  :tLOWEST => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tMETHREF",
  "tBDOT2",
  "tBDOT3",
  "tNUMPARAM",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "ssym",
  "dsym",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 46 omitted

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_55(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 78 omitted

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 88 omitted

def _reduce_89(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_112(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 113 omitted

def _reduce_114(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_125(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_126(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

def _reduce_198(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 226 omitted

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 256 omitted

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

# reduce 258 omitted

# reduce 259 omitted

def _reduce_260(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_265(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_267(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_268(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = []
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

def _reduce_291(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_294(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_310(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 311 omitted

def _reduce_312(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_313(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_319(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_322(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_323(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_326(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = @builder.method_ref(val[0], val[1], val[2])
                    
    result
end

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = val
                    
    result
end

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = []
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 382 omitted

def _reduce_383(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_384(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_385(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_386(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_387(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = []
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_392(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                      @context.push(:lambda)
                    
    result
end

def _reduce_395(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_396(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_397(val, _values, result)
                      @lexer.max_numparam_stack.cant_have_numparams!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      if val[0].any?
                        @lexer.max_numparam_stack.cant_have_numparams!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_403(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_405(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_418(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_420(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_422(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_423(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[1]
                      result = [ args, val[2] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_424(val, _values, result)
                      @static_env.extend_dynamic
                      @lexer.max_numparam_stack.push
                    
    result
end

def _reduce_425(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_426(val, _values, result)
                      args = @lexer.max_numparam > 0 ? @builder.numargs(@lexer.max_numparam) : val[2]
                      result = [ args, val[3] ]

                      @lexer.max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = []
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_448(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = []
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_472(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_483(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_484(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.numparam(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_507(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_512(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = []
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = []
                    
    result
end

def _reduce_535(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_537(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 539 omitted

def _reduce_540(val, _values, result)
                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_546(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @lexer.max_numparam_stack.cant_have_numparams!

                      result = val[0]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_558(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_562(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 566 omitted

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 570 omitted

# reduce 571 omitted

def _reduce_572(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = []
                    
    result
end

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = []
                    
    result
end

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_580(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_584(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_598(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_604(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

def _reduce_608(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

def _reduce_612(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
