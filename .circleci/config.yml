version: 2
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: Setting environment variables
          command: |
            echo MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} >> development.env
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 1
      - run:
          name: "before_test: setup db"
          command: |
            docker-compose run web yarn install --check-files
            docker-compose run web rails db:create db:migrate
      - run:
          name: test
          command: docker-compose run web rails test
      - run:
          name: Rubocop
          command: docker-compose run web rubocop --require rubocop-rails -a
      - run:
          name: docker-compose down
          command: docker-compose down
# jobs:
#   build:
#     parallelism: 3
#     docker:
#       - image: circleci/ruby:2.6.0-stretch-node-browsers-legacy

#     steps:
#       - checkout

#       - restore_cache:
#           keys:
#             - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
#             - rails-demo-bundle-v2-

#       - run:
#           name: Bundle Install
#           command: bundle install --deployment

#       - save_cache:
#           key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
#           paths:
#             - vendor/bundle

#       - restore_cache:
#           keys:
#             - rails-demo-yarn-{{ checksum "yarn.lock" }}
#             - rails-demo-yarn-

#       - run:
#           name: Yarn Install
#           command: yarn install --cache-folder ~/.cache/yarn

#       - save_cache:
#           key: rails-demo-yarn-{{ checksum "yarn.lock" }}
#           paths:
#             - ~/.cache/yarn

#       - run:
#           name: Rubocop の 実行
#           command: bundle exec rubocop --require rubocop-rails -a

#       - store_test_results:
#           path: test_results
  deploy:
    docker:
      - image: circleci/ruby:2.6.0-stretch-node-browsers-legacy
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Heroku CLI, if necessary
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      # - run:
      #     name: Master を Heroku にデプロイ
      #     command: |
      #       git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: heroku container:relese
          command: heroku container:release web -a $HEROKU_APP_NAME
      - run:
          name: heroku run rails db:migrate
          command: heroku run rails db:migrate -a $HEROKU_APP_NAME
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master